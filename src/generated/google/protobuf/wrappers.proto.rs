//! DO NOT EDIT!
//! Generated by protoc-gen-rust, part of the protrust crate.
//! 
//! Source: google/protobuf/wrappers.proto


#[derive(Clone, PartialEq)]
pub struct DoubleValue {
    pub value: f64,
    _unknown_fields: crate::UnknownFieldSet
}
static DOUBLE_VALUE_VALUE_DEFAULT_VALUE: f64 = 0.0;
impl crate::CodedMessage for self::DoubleValue {
    fn merge_from(&mut self, input: &mut crate::io::CodedInput) -> crate::io::InputResult<()> {
        while let std::option::Option::Some(tag) = input.read_tag()? {
            match tag.get() {
                9 => self.value = input.read_double()?,
                _ => { }
            }
        }
        std::result::Result::Ok(())
    }
    fn calculate_size(&self) -> std::option::Option<i32> {
        let mut size = 0i32;
        let value = self.value;
        if value != DOUBLE_VALUE_VALUE_DEFAULT_VALUE {
            size = size.checked_add(1)?;
            size = size.checked_add(crate::io::sizes::double(value))?;
        }
        std::option::Option::Some(size)
    }
    fn write_to(&self, output: &mut crate::io::CodedOutput) -> crate::io::OutputResult {
        let value = self.value;
        if value != DOUBLE_VALUE_VALUE_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[9])?;
            output.write_double(value)?;
        }
        std::result::Result::Ok(())
    }
}
impl crate::LiteMessage for self::DoubleValue {
    fn new() -> Self {
        Self {
            value: DOUBLE_VALUE_VALUE_DEFAULT_VALUE,
            _unknown_fields: crate::UnknownFieldSet::new()
        }
    }
    fn merge(&mut self, other: &Self) {
        self.value = other.value;
    }
}
impl crate::Message for self::DoubleValue {
    fn descriptor() -> &'static crate::reflect::MessageDescriptor {
        unimplemented!()
    }
}
impl self::DoubleValue {
    /// Gets the field number of the 'value' field
    pub const VALUE_FIELD_NUMBER: i32 = 1;
}
#[derive(Clone, PartialEq)]
pub struct FloatValue {
    pub value: f32,
    _unknown_fields: crate::UnknownFieldSet
}
static FLOAT_VALUE_VALUE_DEFAULT_VALUE: f32 = 0.0;
impl crate::CodedMessage for self::FloatValue {
    fn merge_from(&mut self, input: &mut crate::io::CodedInput) -> crate::io::InputResult<()> {
        while let std::option::Option::Some(tag) = input.read_tag()? {
            match tag.get() {
                13 => self.value = input.read_float()?,
                _ => { }
            }
        }
        std::result::Result::Ok(())
    }
    fn calculate_size(&self) -> std::option::Option<i32> {
        let mut size = 0i32;
        let value = self.value;
        if value != FLOAT_VALUE_VALUE_DEFAULT_VALUE {
            size = size.checked_add(1)?;
            size = size.checked_add(crate::io::sizes::float(value))?;
        }
        std::option::Option::Some(size)
    }
    fn write_to(&self, output: &mut crate::io::CodedOutput) -> crate::io::OutputResult {
        let value = self.value;
        if value != FLOAT_VALUE_VALUE_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[13])?;
            output.write_float(value)?;
        }
        std::result::Result::Ok(())
    }
}
impl crate::LiteMessage for self::FloatValue {
    fn new() -> Self {
        Self {
            value: FLOAT_VALUE_VALUE_DEFAULT_VALUE,
            _unknown_fields: crate::UnknownFieldSet::new()
        }
    }
    fn merge(&mut self, other: &Self) {
        self.value = other.value;
    }
}
impl crate::Message for self::FloatValue {
    fn descriptor() -> &'static crate::reflect::MessageDescriptor {
        unimplemented!()
    }
}
impl self::FloatValue {
    /// Gets the field number of the 'value' field
    pub const VALUE_FIELD_NUMBER: i32 = 1;
}
#[derive(Clone, PartialEq)]
pub struct Int64Value {
    pub value: i64,
    _unknown_fields: crate::UnknownFieldSet
}
static INT64_VALUE_VALUE_DEFAULT_VALUE: i64 = 0;
impl crate::CodedMessage for self::Int64Value {
    fn merge_from(&mut self, input: &mut crate::io::CodedInput) -> crate::io::InputResult<()> {
        while let std::option::Option::Some(tag) = input.read_tag()? {
            match tag.get() {
                8 => self.value = input.read_int64()?,
                _ => { }
            }
        }
        std::result::Result::Ok(())
    }
    fn calculate_size(&self) -> std::option::Option<i32> {
        let mut size = 0i32;
        let value = self.value;
        if value != INT64_VALUE_VALUE_DEFAULT_VALUE {
            size = size.checked_add(1)?;
            size = size.checked_add(crate::io::sizes::int64(value))?;
        }
        std::option::Option::Some(size)
    }
    fn write_to(&self, output: &mut crate::io::CodedOutput) -> crate::io::OutputResult {
        let value = self.value;
        if value != INT64_VALUE_VALUE_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[8])?;
            output.write_int64(value)?;
        }
        std::result::Result::Ok(())
    }
}
impl crate::LiteMessage for self::Int64Value {
    fn new() -> Self {
        Self {
            value: INT64_VALUE_VALUE_DEFAULT_VALUE,
            _unknown_fields: crate::UnknownFieldSet::new()
        }
    }
    fn merge(&mut self, other: &Self) {
        self.value = other.value;
    }
}
impl crate::Message for self::Int64Value {
    fn descriptor() -> &'static crate::reflect::MessageDescriptor {
        unimplemented!()
    }
}
impl self::Int64Value {
    /// Gets the field number of the 'value' field
    pub const VALUE_FIELD_NUMBER: i32 = 1;
}
#[derive(Clone, PartialEq)]
pub struct UInt64Value {
    pub value: u64,
    _unknown_fields: crate::UnknownFieldSet
}
static U_INT64_VALUE_VALUE_DEFAULT_VALUE: u64 = 0;
impl crate::CodedMessage for self::UInt64Value {
    fn merge_from(&mut self, input: &mut crate::io::CodedInput) -> crate::io::InputResult<()> {
        while let std::option::Option::Some(tag) = input.read_tag()? {
            match tag.get() {
                8 => self.value = input.read_uint64()?,
                _ => { }
            }
        }
        std::result::Result::Ok(())
    }
    fn calculate_size(&self) -> std::option::Option<i32> {
        let mut size = 0i32;
        let value = self.value;
        if value != U_INT64_VALUE_VALUE_DEFAULT_VALUE {
            size = size.checked_add(1)?;
            size = size.checked_add(crate::io::sizes::uint64(value))?;
        }
        std::option::Option::Some(size)
    }
    fn write_to(&self, output: &mut crate::io::CodedOutput) -> crate::io::OutputResult {
        let value = self.value;
        if value != U_INT64_VALUE_VALUE_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[8])?;
            output.write_uint64(value)?;
        }
        std::result::Result::Ok(())
    }
}
impl crate::LiteMessage for self::UInt64Value {
    fn new() -> Self {
        Self {
            value: U_INT64_VALUE_VALUE_DEFAULT_VALUE,
            _unknown_fields: crate::UnknownFieldSet::new()
        }
    }
    fn merge(&mut self, other: &Self) {
        self.value = other.value;
    }
}
impl crate::Message for self::UInt64Value {
    fn descriptor() -> &'static crate::reflect::MessageDescriptor {
        unimplemented!()
    }
}
impl self::UInt64Value {
    /// Gets the field number of the 'value' field
    pub const VALUE_FIELD_NUMBER: i32 = 1;
}
#[derive(Clone, PartialEq)]
pub struct Int32Value {
    pub value: i32,
    _unknown_fields: crate::UnknownFieldSet
}
static INT32_VALUE_VALUE_DEFAULT_VALUE: i32 = 0;
impl crate::CodedMessage for self::Int32Value {
    fn merge_from(&mut self, input: &mut crate::io::CodedInput) -> crate::io::InputResult<()> {
        while let std::option::Option::Some(tag) = input.read_tag()? {
            match tag.get() {
                8 => self.value = input.read_int32()?,
                _ => { }
            }
        }
        std::result::Result::Ok(())
    }
    fn calculate_size(&self) -> std::option::Option<i32> {
        let mut size = 0i32;
        let value = self.value;
        if value != INT32_VALUE_VALUE_DEFAULT_VALUE {
            size = size.checked_add(1)?;
            size = size.checked_add(crate::io::sizes::int32(value))?;
        }
        std::option::Option::Some(size)
    }
    fn write_to(&self, output: &mut crate::io::CodedOutput) -> crate::io::OutputResult {
        let value = self.value;
        if value != INT32_VALUE_VALUE_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[8])?;
            output.write_int32(value)?;
        }
        std::result::Result::Ok(())
    }
}
impl crate::LiteMessage for self::Int32Value {
    fn new() -> Self {
        Self {
            value: INT32_VALUE_VALUE_DEFAULT_VALUE,
            _unknown_fields: crate::UnknownFieldSet::new()
        }
    }
    fn merge(&mut self, other: &Self) {
        self.value = other.value;
    }
}
impl crate::Message for self::Int32Value {
    fn descriptor() -> &'static crate::reflect::MessageDescriptor {
        unimplemented!()
    }
}
impl self::Int32Value {
    /// Gets the field number of the 'value' field
    pub const VALUE_FIELD_NUMBER: i32 = 1;
}
#[derive(Clone, PartialEq)]
pub struct UInt32Value {
    pub value: u32,
    _unknown_fields: crate::UnknownFieldSet
}
static U_INT32_VALUE_VALUE_DEFAULT_VALUE: u32 = 0;
impl crate::CodedMessage for self::UInt32Value {
    fn merge_from(&mut self, input: &mut crate::io::CodedInput) -> crate::io::InputResult<()> {
        while let std::option::Option::Some(tag) = input.read_tag()? {
            match tag.get() {
                8 => self.value = input.read_uint32()?,
                _ => { }
            }
        }
        std::result::Result::Ok(())
    }
    fn calculate_size(&self) -> std::option::Option<i32> {
        let mut size = 0i32;
        let value = self.value;
        if value != U_INT32_VALUE_VALUE_DEFAULT_VALUE {
            size = size.checked_add(1)?;
            size = size.checked_add(crate::io::sizes::uint32(value))?;
        }
        std::option::Option::Some(size)
    }
    fn write_to(&self, output: &mut crate::io::CodedOutput) -> crate::io::OutputResult {
        let value = self.value;
        if value != U_INT32_VALUE_VALUE_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[8])?;
            output.write_uint32(value)?;
        }
        std::result::Result::Ok(())
    }
}
impl crate::LiteMessage for self::UInt32Value {
    fn new() -> Self {
        Self {
            value: U_INT32_VALUE_VALUE_DEFAULT_VALUE,
            _unknown_fields: crate::UnknownFieldSet::new()
        }
    }
    fn merge(&mut self, other: &Self) {
        self.value = other.value;
    }
}
impl crate::Message for self::UInt32Value {
    fn descriptor() -> &'static crate::reflect::MessageDescriptor {
        unimplemented!()
    }
}
impl self::UInt32Value {
    /// Gets the field number of the 'value' field
    pub const VALUE_FIELD_NUMBER: i32 = 1;
}
#[derive(Clone, PartialEq)]
pub struct BoolValue {
    pub value: bool,
    _unknown_fields: crate::UnknownFieldSet
}
static BOOL_VALUE_VALUE_DEFAULT_VALUE: bool = false;
impl crate::CodedMessage for self::BoolValue {
    fn merge_from(&mut self, input: &mut crate::io::CodedInput) -> crate::io::InputResult<()> {
        while let std::option::Option::Some(tag) = input.read_tag()? {
            match tag.get() {
                8 => self.value = input.read_bool()?,
                _ => { }
            }
        }
        std::result::Result::Ok(())
    }
    fn calculate_size(&self) -> std::option::Option<i32> {
        let mut size = 0i32;
        let value = self.value;
        if value != BOOL_VALUE_VALUE_DEFAULT_VALUE {
            size = size.checked_add(1)?;
            size = size.checked_add(crate::io::sizes::bool(value))?;
        }
        std::option::Option::Some(size)
    }
    fn write_to(&self, output: &mut crate::io::CodedOutput) -> crate::io::OutputResult {
        let value = self.value;
        if value != BOOL_VALUE_VALUE_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[8])?;
            output.write_bool(value)?;
        }
        std::result::Result::Ok(())
    }
}
impl crate::LiteMessage for self::BoolValue {
    fn new() -> Self {
        Self {
            value: BOOL_VALUE_VALUE_DEFAULT_VALUE,
            _unknown_fields: crate::UnknownFieldSet::new()
        }
    }
    fn merge(&mut self, other: &Self) {
        self.value = other.value;
    }
}
impl crate::Message for self::BoolValue {
    fn descriptor() -> &'static crate::reflect::MessageDescriptor {
        unimplemented!()
    }
}
impl self::BoolValue {
    /// Gets the field number of the 'value' field
    pub const VALUE_FIELD_NUMBER: i32 = 1;
}
#[derive(Clone, PartialEq)]
pub struct StringValue {
    pub value: std::string::String,
    _unknown_fields: crate::UnknownFieldSet
}
static STRING_VALUE_VALUE_DEFAULT_VALUE: &'static str = "";
impl crate::CodedMessage for self::StringValue {
    fn merge_from(&mut self, input: &mut crate::io::CodedInput) -> crate::io::InputResult<()> {
        while let std::option::Option::Some(tag) = input.read_tag()? {
            match tag.get() {
                10 => self.value = input.read_string()?,
                _ => { }
            }
        }
        std::result::Result::Ok(())
    }
    fn calculate_size(&self) -> std::option::Option<i32> {
        let mut size = 0i32;
        let value = &self.value;
        if value != STRING_VALUE_VALUE_DEFAULT_VALUE {
            size = size.checked_add(1)?;
            size = size.checked_add(crate::io::sizes::string(value)?)?;
        }
        std::option::Option::Some(size)
    }
    fn write_to(&self, output: &mut crate::io::CodedOutput) -> crate::io::OutputResult {
        let value = &self.value;
        if value != STRING_VALUE_VALUE_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[10])?;
            output.write_string(value)?;
        }
        std::result::Result::Ok(())
    }
}
impl crate::LiteMessage for self::StringValue {
    fn new() -> Self {
        Self {
            value: std::string::String::new(),
            _unknown_fields: crate::UnknownFieldSet::new()
        }
    }
    fn merge(&mut self, other: &Self) {
        self.value = other.value.clone();
    }
}
impl crate::Message for self::StringValue {
    fn descriptor() -> &'static crate::reflect::MessageDescriptor {
        unimplemented!()
    }
}
impl self::StringValue {
    /// Gets the field number of the 'value' field
    pub const VALUE_FIELD_NUMBER: i32 = 1;
}
#[derive(Clone, PartialEq)]
pub struct BytesValue {
    pub value: std::vec::Vec<u8>,
    _unknown_fields: crate::UnknownFieldSet
}
static BYTES_VALUE_VALUE_DEFAULT_VALUE: &'static [u8] = &[];
impl crate::CodedMessage for self::BytesValue {
    fn merge_from(&mut self, input: &mut crate::io::CodedInput) -> crate::io::InputResult<()> {
        while let std::option::Option::Some(tag) = input.read_tag()? {
            match tag.get() {
                10 => self.value = input.read_bytes()?,
                _ => { }
            }
        }
        std::result::Result::Ok(())
    }
    fn calculate_size(&self) -> std::option::Option<i32> {
        let mut size = 0i32;
        let value = &self.value;
        if value.as_slice() != BYTES_VALUE_VALUE_DEFAULT_VALUE {
            size = size.checked_add(1)?;
            size = size.checked_add(crate::io::sizes::bytes(value)?)?;
        }
        std::option::Option::Some(size)
    }
    fn write_to(&self, output: &mut crate::io::CodedOutput) -> crate::io::OutputResult {
        let value = &self.value;
        if value.as_slice() != BYTES_VALUE_VALUE_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[10])?;
            output.write_bytes(value)?;
        }
        std::result::Result::Ok(())
    }
}
impl crate::LiteMessage for self::BytesValue {
    fn new() -> Self {
        Self {
            value: std::vec::Vec::new(),
            _unknown_fields: crate::UnknownFieldSet::new()
        }
    }
    fn merge(&mut self, other: &Self) {
        self.value = other.value.clone();
    }
}
impl crate::Message for self::BytesValue {
    fn descriptor() -> &'static crate::reflect::MessageDescriptor {
        unimplemented!()
    }
}
impl self::BytesValue {
    /// Gets the field number of the 'value' field
    pub const VALUE_FIELD_NUMBER: i32 = 1;
}