//! DO NOT EDIT!
//! Generated by protoc-gen-rust, part of the protrust crate.
//!
//! Source: google/protobuf/api.proto

static FILE_ONCE: ::std::sync::Once = ::std::sync::Once::new();
static mut FILE_POOL: ::std::option::Option<crate::reflect::DescriptorPool<'static>> = ::std::option::Option::None;
static mut FILE_PROTO: ::std::option::Option<[crate::descriptor::FileDescriptorProto; 1]> = ::std::option::Option::None;
static mut FILE_DESCRIPTOR: ::std::option::Option<&'static crate::reflect::FileDescriptor> = ::std::option::Option::None;
static mut FILE_DEPS: ::std::option::Option<[&'static crate::reflect::DescriptorPool<'static>; 2]> = ::std::option::Option::None;

fn file_once_init() {
    unsafe {
        FILE_PROTO = ::std::option::Option::Some([crate::LiteMessage::read_new(&mut [
            10, 25, 103, 111, 111, 103, 108, 101, 47, 112, 114, 111, 116, 111, 98, 117, 102, 47, 97, 112, 
            105, 46, 112, 114, 111, 116, 111, 18, 15, 103, 111, 111, 103, 108, 101, 46, 112, 114, 111, 116, 
            111, 98, 117, 102, 26, 36, 103, 111, 111, 103, 108, 101, 47, 112, 114, 111, 116, 111, 98, 117, 
            102, 47, 115, 111, 117, 114, 99, 101, 95, 99, 111, 110, 116, 101, 120, 116, 46, 112, 114, 111, 
            116, 111, 26, 26, 103, 111, 111, 103, 108, 101, 47, 112, 114, 111, 116, 111, 98, 117, 102, 47, 
            116, 121, 112, 101, 46, 112, 114, 111, 116, 111, 34, 193, 2, 10, 3, 65, 112, 105, 18, 18, 
            10, 4, 110, 97, 109, 101, 24, 1, 32, 1, 40, 9, 82, 4, 110, 97, 109, 101, 18, 49, 
            10, 7, 109, 101, 116, 104, 111, 100, 115, 24, 2, 32, 3, 40, 11, 50, 23, 46, 103, 111, 
            111, 103, 108, 101, 46, 112, 114, 111, 116, 111, 98, 117, 102, 46, 77, 101, 116, 104, 111, 100, 
            82, 7, 109, 101, 116, 104, 111, 100, 115, 18, 49, 10, 7, 111, 112, 116, 105, 111, 110, 115, 
            24, 3, 32, 3, 40, 11, 50, 23, 46, 103, 111, 111, 103, 108, 101, 46, 112, 114, 111, 116, 
            111, 98, 117, 102, 46, 79, 112, 116, 105, 111, 110, 82, 7, 111, 112, 116, 105, 111, 110, 115, 
            18, 24, 10, 7, 118, 101, 114, 115, 105, 111, 110, 24, 4, 32, 1, 40, 9, 82, 7, 118, 
            101, 114, 115, 105, 111, 110, 18, 69, 10, 14, 115, 111, 117, 114, 99, 101, 95, 99, 111, 110, 
            116, 101, 120, 116, 24, 5, 32, 1, 40, 11, 50, 30, 46, 103, 111, 111, 103, 108, 101, 46, 
            112, 114, 111, 116, 111, 98, 117, 102, 46, 83, 111, 117, 114, 99, 101, 67, 111, 110, 116, 101, 
            120, 116, 82, 13, 115, 111, 117, 114, 99, 101, 67, 111, 110, 116, 101, 120, 116, 18, 46, 10, 
            6, 109, 105, 120, 105, 110, 115, 24, 6, 32, 3, 40, 11, 50, 22, 46, 103, 111, 111, 103, 
            108, 101, 46, 112, 114, 111, 116, 111, 98, 117, 102, 46, 77, 105, 120, 105, 110, 82, 6, 109, 
            105, 120, 105, 110, 115, 18, 47, 10, 6, 115, 121, 110, 116, 97, 120, 24, 7, 32, 1, 40, 
            14, 50, 23, 46, 103, 111, 111, 103, 108, 101, 46, 112, 114, 111, 116, 111, 98, 117, 102, 46, 
            83, 121, 110, 116, 97, 120, 82, 6, 115, 121, 110, 116, 97, 120, 34, 178, 2, 10, 6, 77, 
            101, 116, 104, 111, 100, 18, 18, 10, 4, 110, 97, 109, 101, 24, 1, 32, 1, 40, 9, 82, 
            4, 110, 97, 109, 101, 18, 40, 10, 16, 114, 101, 113, 117, 101, 115, 116, 95, 116, 121, 112, 
            101, 95, 117, 114, 108, 24, 2, 32, 1, 40, 9, 82, 14, 114, 101, 113, 117, 101, 115, 116, 
            84, 121, 112, 101, 85, 114, 108, 18, 43, 10, 17, 114, 101, 113, 117, 101, 115, 116, 95, 115, 
            116, 114, 101, 97, 109, 105, 110, 103, 24, 3, 32, 1, 40, 8, 82, 16, 114, 101, 113, 117, 
            101, 115, 116, 83, 116, 114, 101, 97, 109, 105, 110, 103, 18, 42, 10, 17, 114, 101, 115, 112, 
            111, 110, 115, 101, 95, 116, 121, 112, 101, 95, 117, 114, 108, 24, 4, 32, 1, 40, 9, 82, 
            15, 114, 101, 115, 112, 111, 110, 115, 101, 84, 121, 112, 101, 85, 114, 108, 18, 45, 10, 18, 
            114, 101, 115, 112, 111, 110, 115, 101, 95, 115, 116, 114, 101, 97, 109, 105, 110, 103, 24, 5, 
            32, 1, 40, 8, 82, 17, 114, 101, 115, 112, 111, 110, 115, 101, 83, 116, 114, 101, 97, 109, 
            105, 110, 103, 18, 49, 10, 7, 111, 112, 116, 105, 111, 110, 115, 24, 6, 32, 3, 40, 11, 
            50, 23, 46, 103, 111, 111, 103, 108, 101, 46, 112, 114, 111, 116, 111, 98, 117, 102, 46, 79, 
            112, 116, 105, 111, 110, 82, 7, 111, 112, 116, 105, 111, 110, 115, 18, 47, 10, 6, 115, 121, 
            110, 116, 97, 120, 24, 7, 32, 1, 40, 14, 50, 23, 46, 103, 111, 111, 103, 108, 101, 46, 
            112, 114, 111, 116, 111, 98, 117, 102, 46, 83, 121, 110, 116, 97, 120, 82, 6, 115, 121, 110, 
            116, 97, 120, 34, 47, 10, 5, 77, 105, 120, 105, 110, 18, 18, 10, 4, 110, 97, 109, 101, 
            24, 1, 32, 1, 40, 9, 82, 4, 110, 97, 109, 101, 18, 18, 10, 4, 114, 111, 111, 116, 
            24, 2, 32, 1, 40, 9, 82, 4, 114, 111, 111, 116, 66, 117, 10, 19, 99, 111, 109, 46, 
            103, 111, 111, 103, 108, 101, 46, 112, 114, 111, 116, 111, 98, 117, 102, 66, 8, 65, 112, 105, 
            80, 114, 111, 116, 111, 80, 1, 90, 43, 103, 111, 111, 103, 108, 101, 46, 103, 111, 108, 97, 
            110, 103, 46, 111, 114, 103, 47, 103, 101, 110, 112, 114, 111, 116, 111, 47, 112, 114, 111, 116, 
            111, 98, 117, 102, 47, 97, 112, 105, 59, 97, 112, 105, 162, 2, 3, 71, 80, 66, 170, 2, 
            30, 71, 111, 111, 103, 108, 101, 46, 80, 114, 111, 116, 111, 98, 117, 102, 46, 87, 101, 108, 
            108, 75, 110, 111, 119, 110, 84, 121, 112, 101, 115, 98, 6, 112, 114, 111, 116, 111, 51, 
        ].as_ref()).expect("Could not read file descriptor")]);
        FILE_DEPS = ::std::option::Option::Some([crate::wkt::source_context::pool(), crate::wkt::r#type::pool(), ]);
        FILE_POOL = ::std::option::Option::Some(crate::reflect::DescriptorPool::build_generated_pool(
            FILE_PROTO.as_ref().unwrap(),
            FILE_DEPS.as_ref().unwrap()
        ));
        FILE_DESCRIPTOR = ::std::option::Option::Some(FILE_POOL.as_ref().unwrap().find_file_by_name("google/protobuf/api.proto").unwrap());
    }
}

pub fn pool() -> &'static crate::reflect::DescriptorPool<'static> {
    unsafe {
        FILE_ONCE.call_once(file_once_init);
        FILE_POOL.as_ref().unwrap()
    }
}
pub fn file() -> &'static crate::reflect::FileDescriptor {
    unsafe {
        FILE_ONCE.call_once(file_once_init);
        FILE_DESCRIPTOR.as_ref().unwrap()
    }
}
#[derive(Debug, PartialEq)]
pub struct Api {
    pub name: ::std::string::String,
    pub methods: crate::collections::RepeatedField<self::Method>,
    pub options: crate::collections::RepeatedField<crate::wkt::r#type::Option>,
    pub version: ::std::string::String,
    pub source_context: ::std::option::Option<::std::boxed::Box<crate::wkt::source_context::SourceContext>>,
    pub mixins: crate::collections::RepeatedField<self::Mixin>,
    pub syntax: crate::EnumValue<crate::wkt::r#type::Syntax>,
    unknown_fields: crate::UnknownFieldSet
}
static API_METHODS_CODEC: crate::Codec<self::Method> = crate::Codec::message(18);
static API_OPTIONS_CODEC: crate::Codec<crate::wkt::r#type::Option> = crate::Codec::message(26);
static API_MIXINS_CODEC: crate::Codec<self::Mixin> = crate::Codec::message(50);
impl crate::CodedMessage for self::Api {
    fn merge_from(&mut self, input: &mut crate::io::CodedInput) -> crate::io::InputResult<()> {
        while let ::std::option::Option::Some(tag) = input.read_tag()? {
            match tag.get() {
                10 => self.name = input.read_string()?,
                18 => self.methods.add_entries(tag.get(), input, &API_METHODS_CODEC)?,
                26 => self.options.add_entries(tag.get(), input, &API_OPTIONS_CODEC)?,
                34 => self.version = input.read_string()?,
                42 => input.read_message(self.source_context.get_or_insert_with(crate::LiteMessage::new))?,
                50 => self.mixins.add_entries(tag.get(), input, &API_MIXINS_CODEC)?,
                56 => self.syntax = input.read_enum_value()?,
                tag => self.unknown_fields.merge_from(tag, input)?
            }
        }
        ::std::result::Result::Ok(())
    }
    fn calculate_size(&self) -> ::std::option::Option<i32> {
        let mut size = 0i32;
        let name = &self.name;
        if name != Self::NAME_DEFAULT_VALUE {
            size = size.checked_add(1)?;
            size = size.checked_add(crate::io::sizes::string(name)?)?;
        }
        size = size.checked_add(self.methods.calculate_size(&API_METHODS_CODEC)?)?;
        size = size.checked_add(self.options.calculate_size(&API_OPTIONS_CODEC)?)?;
        let version = &self.version;
        if version != Self::VERSION_DEFAULT_VALUE {
            size = size.checked_add(1)?;
            size = size.checked_add(crate::io::sizes::string(version)?)?;
        }
        let source_context = &self.source_context;
        if let ::std::option::Option::Some(source_context) = source_context {
            size = size.checked_add(1)?;
            size = size.checked_add(crate::io::sizes::message(source_context)?)?;
        }
        size = size.checked_add(self.mixins.calculate_size(&API_MIXINS_CODEC)?)?;
        let syntax = self.syntax;
        if syntax != Self::SYNTAX_DEFAULT_VALUE {
            size = size.checked_add(1)?;
            size = size.checked_add(crate::io::sizes::enum_value(syntax))?;
        }
        size = size.checked_add(self.unknown_fields.calculate_size()?)?;
        ::std::option::Option::Some(size)
    }
    fn write_to(&self, output: &mut crate::io::CodedOutput) -> crate::io::OutputResult {
        let name = &self.name;
        if name != Self::NAME_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[10])?;
            output.write_string(name)?;
        }
        self.methods.write_to(output, &API_METHODS_CODEC)?;
        self.options.write_to(output, &API_OPTIONS_CODEC)?;
        let version = &self.version;
        if version != Self::VERSION_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[34])?;
            output.write_string(version)?;
        }
        let source_context = &self.source_context;
        if let ::std::option::Option::Some(source_context) = source_context {
            output.write_raw_tag_bytes(&[42])?;
            output.write_message(source_context)?;
        }
        self.mixins.write_to(output, &API_MIXINS_CODEC)?;
        let syntax = self.syntax;
        if syntax != Self::SYNTAX_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[56])?;
            output.write_enum_value(syntax)?;
        }
        self.unknown_fields.write_to(output)?;
        ::std::result::Result::Ok(())
    }
}
impl crate::LiteMessage for self::Api {
    fn new() -> Self {
        Self {
            name: ::std::string::String::new(),
            methods: crate::collections::RepeatedField::new(),
            options: crate::collections::RepeatedField::new(),
            version: ::std::string::String::new(),
            source_context: ::std::option::Option::None,
            mixins: crate::collections::RepeatedField::new(),
            syntax: Self::SYNTAX_DEFAULT_VALUE,
            unknown_fields: crate::UnknownFieldSet::new()
        }
    }
}
impl ::std::clone::Clone for self::Api {
    fn clone(&self) -> Self {
        Self {
            name: self.name.clone(),
            methods: self.methods.clone(),
            options: self.options.clone(),
            version: self.version.clone(),
            source_context: self.source_context.clone(),
            mixins: self.mixins.clone(),
            syntax: self.syntax.clone(),
            unknown_fields: self.unknown_fields.clone()
        }
    }
    fn clone_from(&mut self, other: &Self) {
        self.name = other.name.clone();
        self.methods.clone_from(&other.methods);
        self.options.clone_from(&other.options);
        self.version = other.version.clone();
        if let ::std::option::Option::Some(source_context) = &other.source_context {
            self.source_context.get_or_insert_with(crate::LiteMessage::new).clone_from(source_context);
        }
        self.mixins.clone_from(&other.mixins);
        self.syntax = other.syntax;
        self.unknown_fields.clone_from(&other.unknown_fields);
    }
}
impl crate::Message for self::Api {
    fn descriptor() -> &'static crate::reflect::MessageDescriptor {
        &self::file().messages()[0]
    }
}
impl self::Api {
    /// Gets the field number of the 'name' field
    pub const NAME_FIELD_NUMBER: i32 = 1;
    pub const NAME_DEFAULT_VALUE: &'static str = "";
    /// Gets the field number of the 'methods' field
    pub const METHODS_FIELD_NUMBER: i32 = 2;
    /// Gets the field number of the 'options' field
    pub const OPTIONS_FIELD_NUMBER: i32 = 3;
    /// Gets the field number of the 'version' field
    pub const VERSION_FIELD_NUMBER: i32 = 4;
    pub const VERSION_DEFAULT_VALUE: &'static str = "";
    /// Gets the field number of the 'source_context' field
    pub const SOURCE_CONTEXT_FIELD_NUMBER: i32 = 5;
    /// Gets the field number of the 'mixins' field
    pub const MIXINS_FIELD_NUMBER: i32 = 6;
    /// Gets the field number of the 'syntax' field
    pub const SYNTAX_FIELD_NUMBER: i32 = 7;
    pub const SYNTAX_DEFAULT_VALUE: crate::EnumValue<crate::wkt::r#type::Syntax> = crate::EnumValue::Defined(crate::wkt::r#type::Syntax::Proto2);
}
#[derive(Debug, PartialEq)]
pub struct Method {
    pub name: ::std::string::String,
    pub request_type_url: ::std::string::String,
    pub request_streaming: bool,
    pub response_type_url: ::std::string::String,
    pub response_streaming: bool,
    pub options: crate::collections::RepeatedField<crate::wkt::r#type::Option>,
    pub syntax: crate::EnumValue<crate::wkt::r#type::Syntax>,
    unknown_fields: crate::UnknownFieldSet
}
static METHOD_OPTIONS_CODEC: crate::Codec<crate::wkt::r#type::Option> = crate::Codec::message(50);
impl crate::CodedMessage for self::Method {
    fn merge_from(&mut self, input: &mut crate::io::CodedInput) -> crate::io::InputResult<()> {
        while let ::std::option::Option::Some(tag) = input.read_tag()? {
            match tag.get() {
                10 => self.name = input.read_string()?,
                18 => self.request_type_url = input.read_string()?,
                24 => self.request_streaming = input.read_bool()?,
                34 => self.response_type_url = input.read_string()?,
                40 => self.response_streaming = input.read_bool()?,
                50 => self.options.add_entries(tag.get(), input, &METHOD_OPTIONS_CODEC)?,
                56 => self.syntax = input.read_enum_value()?,
                tag => self.unknown_fields.merge_from(tag, input)?
            }
        }
        ::std::result::Result::Ok(())
    }
    fn calculate_size(&self) -> ::std::option::Option<i32> {
        let mut size = 0i32;
        let name = &self.name;
        if name != Self::NAME_DEFAULT_VALUE {
            size = size.checked_add(1)?;
            size = size.checked_add(crate::io::sizes::string(name)?)?;
        }
        let request_type_url = &self.request_type_url;
        if request_type_url != Self::REQUEST_TYPE_URL_DEFAULT_VALUE {
            size = size.checked_add(1)?;
            size = size.checked_add(crate::io::sizes::string(request_type_url)?)?;
        }
        let request_streaming = self.request_streaming;
        if request_streaming != Self::REQUEST_STREAMING_DEFAULT_VALUE {
            size = size.checked_add(1)?;
            size = size.checked_add(crate::io::sizes::bool(request_streaming))?;
        }
        let response_type_url = &self.response_type_url;
        if response_type_url != Self::RESPONSE_TYPE_URL_DEFAULT_VALUE {
            size = size.checked_add(1)?;
            size = size.checked_add(crate::io::sizes::string(response_type_url)?)?;
        }
        let response_streaming = self.response_streaming;
        if response_streaming != Self::RESPONSE_STREAMING_DEFAULT_VALUE {
            size = size.checked_add(1)?;
            size = size.checked_add(crate::io::sizes::bool(response_streaming))?;
        }
        size = size.checked_add(self.options.calculate_size(&METHOD_OPTIONS_CODEC)?)?;
        let syntax = self.syntax;
        if syntax != Self::SYNTAX_DEFAULT_VALUE {
            size = size.checked_add(1)?;
            size = size.checked_add(crate::io::sizes::enum_value(syntax))?;
        }
        size = size.checked_add(self.unknown_fields.calculate_size()?)?;
        ::std::option::Option::Some(size)
    }
    fn write_to(&self, output: &mut crate::io::CodedOutput) -> crate::io::OutputResult {
        let name = &self.name;
        if name != Self::NAME_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[10])?;
            output.write_string(name)?;
        }
        let request_type_url = &self.request_type_url;
        if request_type_url != Self::REQUEST_TYPE_URL_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[18])?;
            output.write_string(request_type_url)?;
        }
        let request_streaming = self.request_streaming;
        if request_streaming != Self::REQUEST_STREAMING_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[24])?;
            output.write_bool(request_streaming)?;
        }
        let response_type_url = &self.response_type_url;
        if response_type_url != Self::RESPONSE_TYPE_URL_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[34])?;
            output.write_string(response_type_url)?;
        }
        let response_streaming = self.response_streaming;
        if response_streaming != Self::RESPONSE_STREAMING_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[40])?;
            output.write_bool(response_streaming)?;
        }
        self.options.write_to(output, &METHOD_OPTIONS_CODEC)?;
        let syntax = self.syntax;
        if syntax != Self::SYNTAX_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[56])?;
            output.write_enum_value(syntax)?;
        }
        self.unknown_fields.write_to(output)?;
        ::std::result::Result::Ok(())
    }
}
impl crate::LiteMessage for self::Method {
    fn new() -> Self {
        Self {
            name: ::std::string::String::new(),
            request_type_url: ::std::string::String::new(),
            request_streaming: Self::REQUEST_STREAMING_DEFAULT_VALUE,
            response_type_url: ::std::string::String::new(),
            response_streaming: Self::RESPONSE_STREAMING_DEFAULT_VALUE,
            options: crate::collections::RepeatedField::new(),
            syntax: Self::SYNTAX_DEFAULT_VALUE,
            unknown_fields: crate::UnknownFieldSet::new()
        }
    }
}
impl ::std::clone::Clone for self::Method {
    fn clone(&self) -> Self {
        Self {
            name: self.name.clone(),
            request_type_url: self.request_type_url.clone(),
            request_streaming: self.request_streaming.clone(),
            response_type_url: self.response_type_url.clone(),
            response_streaming: self.response_streaming.clone(),
            options: self.options.clone(),
            syntax: self.syntax.clone(),
            unknown_fields: self.unknown_fields.clone()
        }
    }
    fn clone_from(&mut self, other: &Self) {
        self.name = other.name.clone();
        self.request_type_url = other.request_type_url.clone();
        self.request_streaming = other.request_streaming;
        self.response_type_url = other.response_type_url.clone();
        self.response_streaming = other.response_streaming;
        self.options.clone_from(&other.options);
        self.syntax = other.syntax;
        self.unknown_fields.clone_from(&other.unknown_fields);
    }
}
impl crate::Message for self::Method {
    fn descriptor() -> &'static crate::reflect::MessageDescriptor {
        &self::file().messages()[1]
    }
}
impl self::Method {
    /// Gets the field number of the 'name' field
    pub const NAME_FIELD_NUMBER: i32 = 1;
    pub const NAME_DEFAULT_VALUE: &'static str = "";
    /// Gets the field number of the 'request_type_url' field
    pub const REQUEST_TYPE_URL_FIELD_NUMBER: i32 = 2;
    pub const REQUEST_TYPE_URL_DEFAULT_VALUE: &'static str = "";
    /// Gets the field number of the 'request_streaming' field
    pub const REQUEST_STREAMING_FIELD_NUMBER: i32 = 3;
    pub const REQUEST_STREAMING_DEFAULT_VALUE: bool = false;
    /// Gets the field number of the 'response_type_url' field
    pub const RESPONSE_TYPE_URL_FIELD_NUMBER: i32 = 4;
    pub const RESPONSE_TYPE_URL_DEFAULT_VALUE: &'static str = "";
    /// Gets the field number of the 'response_streaming' field
    pub const RESPONSE_STREAMING_FIELD_NUMBER: i32 = 5;
    pub const RESPONSE_STREAMING_DEFAULT_VALUE: bool = false;
    /// Gets the field number of the 'options' field
    pub const OPTIONS_FIELD_NUMBER: i32 = 6;
    /// Gets the field number of the 'syntax' field
    pub const SYNTAX_FIELD_NUMBER: i32 = 7;
    pub const SYNTAX_DEFAULT_VALUE: crate::EnumValue<crate::wkt::r#type::Syntax> = crate::EnumValue::Defined(crate::wkt::r#type::Syntax::Proto2);
}
#[derive(Debug, PartialEq)]
pub struct Mixin {
    pub name: ::std::string::String,
    pub root: ::std::string::String,
    unknown_fields: crate::UnknownFieldSet
}
impl crate::CodedMessage for self::Mixin {
    fn merge_from(&mut self, input: &mut crate::io::CodedInput) -> crate::io::InputResult<()> {
        while let ::std::option::Option::Some(tag) = input.read_tag()? {
            match tag.get() {
                10 => self.name = input.read_string()?,
                18 => self.root = input.read_string()?,
                tag => self.unknown_fields.merge_from(tag, input)?
            }
        }
        ::std::result::Result::Ok(())
    }
    fn calculate_size(&self) -> ::std::option::Option<i32> {
        let mut size = 0i32;
        let name = &self.name;
        if name != Self::NAME_DEFAULT_VALUE {
            size = size.checked_add(1)?;
            size = size.checked_add(crate::io::sizes::string(name)?)?;
        }
        let root = &self.root;
        if root != Self::ROOT_DEFAULT_VALUE {
            size = size.checked_add(1)?;
            size = size.checked_add(crate::io::sizes::string(root)?)?;
        }
        size = size.checked_add(self.unknown_fields.calculate_size()?)?;
        ::std::option::Option::Some(size)
    }
    fn write_to(&self, output: &mut crate::io::CodedOutput) -> crate::io::OutputResult {
        let name = &self.name;
        if name != Self::NAME_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[10])?;
            output.write_string(name)?;
        }
        let root = &self.root;
        if root != Self::ROOT_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[18])?;
            output.write_string(root)?;
        }
        self.unknown_fields.write_to(output)?;
        ::std::result::Result::Ok(())
    }
}
impl crate::LiteMessage for self::Mixin {
    fn new() -> Self {
        Self {
            name: ::std::string::String::new(),
            root: ::std::string::String::new(),
            unknown_fields: crate::UnknownFieldSet::new()
        }
    }
}
impl ::std::clone::Clone for self::Mixin {
    fn clone(&self) -> Self {
        Self {
            name: self.name.clone(),
            root: self.root.clone(),
            unknown_fields: self.unknown_fields.clone()
        }
    }
    fn clone_from(&mut self, other: &Self) {
        self.name = other.name.clone();
        self.root = other.root.clone();
        self.unknown_fields.clone_from(&other.unknown_fields);
    }
}
impl crate::Message for self::Mixin {
    fn descriptor() -> &'static crate::reflect::MessageDescriptor {
        &self::file().messages()[2]
    }
}
impl self::Mixin {
    /// Gets the field number of the 'name' field
    pub const NAME_FIELD_NUMBER: i32 = 1;
    pub const NAME_DEFAULT_VALUE: &'static str = "";
    /// Gets the field number of the 'root' field
    pub const ROOT_FIELD_NUMBER: i32 = 2;
    pub const ROOT_DEFAULT_VALUE: &'static str = "";
}