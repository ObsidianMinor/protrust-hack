//! DO NOT EDIT!
//! Generated by protoc-gen-rust, part of the protrust crate.
//! 
//! Source: google/protobuf/wrappers.proto

#[derive(Debug, PartialEq)]
pub struct DoubleValue {
    pub value: f64,
    _unknown_fields: crate::UnknownFieldSet
}
impl crate::CodedMessage for self::DoubleValue {
    fn merge_from(&mut self, input: &mut crate::io::CodedInput) -> crate::io::InputResult<()> {
        while let std::option::Option::Some(tag) = input.read_tag()? {
            match tag.get() {
                9 => self.value = input.read_double()?,
                tag => self._unknown_fields.merge_from(tag, input)?
            }
        }
        std::result::Result::Ok(())
    }
    fn calculate_size(&self) -> std::option::Option<i32> {
        let mut size = 0i32;
        let value = self.value;
        if value != Self::VALUE_DEFAULT_VALUE {
            size = size.checked_add(1)?;
            size = size.checked_add(crate::io::sizes::double(value))?;
        }
        size = size.checked_add(self._unknown_fields.calculate_size()?)?;
        std::option::Option::Some(size)
    }
    fn write_to(&self, output: &mut crate::io::CodedOutput) -> crate::io::OutputResult {
        let value = self.value;
        if value != Self::VALUE_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[9])?;
            output.write_double(value)?;
        }
        self._unknown_fields.write_to(output)?;
        std::result::Result::Ok(())
    }
}
impl crate::LiteMessage for self::DoubleValue {
    fn new() -> Self {
        Self {
            value: Self::VALUE_DEFAULT_VALUE,
            _unknown_fields: crate::UnknownFieldSet::new()
        }
    }
}
impl std::clone::Clone for self::DoubleValue {
    fn clone(&self) -> Self {
        Self {
            value: self.value.clone(),
            _unknown_fields: self._unknown_fields.clone()
        }
    }
    fn clone_from(&mut self, other: &Self) {
        self.value = other.value;
        self._unknown_fields.clone_from(&other._unknown_fields);
    }
}
impl crate::Message for self::DoubleValue {
    fn descriptor() -> &'static crate::reflect::MessageDescriptor {
        unimplemented!()
    }
}
impl self::DoubleValue {
    /// Gets the field number of the 'value' field
    pub const VALUE_FIELD_NUMBER: i32 = 1;
    pub const VALUE_DEFAULT_VALUE: f64 = 0.0;
    pub fn value(&self) -> &f64 {
        &self.value
    }
    pub fn value_mut(&mut self) -> &mut f64 {
        &mut self.value
    }
}
#[derive(Debug, PartialEq)]
pub struct FloatValue {
    pub value: f32,
    _unknown_fields: crate::UnknownFieldSet
}
impl crate::CodedMessage for self::FloatValue {
    fn merge_from(&mut self, input: &mut crate::io::CodedInput) -> crate::io::InputResult<()> {
        while let std::option::Option::Some(tag) = input.read_tag()? {
            match tag.get() {
                13 => self.value = input.read_float()?,
                tag => self._unknown_fields.merge_from(tag, input)?
            }
        }
        std::result::Result::Ok(())
    }
    fn calculate_size(&self) -> std::option::Option<i32> {
        let mut size = 0i32;
        let value = self.value;
        if value != Self::VALUE_DEFAULT_VALUE {
            size = size.checked_add(1)?;
            size = size.checked_add(crate::io::sizes::float(value))?;
        }
        size = size.checked_add(self._unknown_fields.calculate_size()?)?;
        std::option::Option::Some(size)
    }
    fn write_to(&self, output: &mut crate::io::CodedOutput) -> crate::io::OutputResult {
        let value = self.value;
        if value != Self::VALUE_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[13])?;
            output.write_float(value)?;
        }
        self._unknown_fields.write_to(output)?;
        std::result::Result::Ok(())
    }
}
impl crate::LiteMessage for self::FloatValue {
    fn new() -> Self {
        Self {
            value: Self::VALUE_DEFAULT_VALUE,
            _unknown_fields: crate::UnknownFieldSet::new()
        }
    }
}
impl std::clone::Clone for self::FloatValue {
    fn clone(&self) -> Self {
        Self {
            value: self.value.clone(),
            _unknown_fields: self._unknown_fields.clone()
        }
    }
    fn clone_from(&mut self, other: &Self) {
        self.value = other.value;
        self._unknown_fields.clone_from(&other._unknown_fields);
    }
}
impl crate::Message for self::FloatValue {
    fn descriptor() -> &'static crate::reflect::MessageDescriptor {
        unimplemented!()
    }
}
impl self::FloatValue {
    /// Gets the field number of the 'value' field
    pub const VALUE_FIELD_NUMBER: i32 = 1;
    pub const VALUE_DEFAULT_VALUE: f32 = 0.0;
    pub fn value(&self) -> &f32 {
        &self.value
    }
    pub fn value_mut(&mut self) -> &mut f32 {
        &mut self.value
    }
}
#[derive(Debug, PartialEq)]
pub struct Int64Value {
    pub value: i64,
    _unknown_fields: crate::UnknownFieldSet
}
impl crate::CodedMessage for self::Int64Value {
    fn merge_from(&mut self, input: &mut crate::io::CodedInput) -> crate::io::InputResult<()> {
        while let std::option::Option::Some(tag) = input.read_tag()? {
            match tag.get() {
                8 => self.value = input.read_int64()?,
                tag => self._unknown_fields.merge_from(tag, input)?
            }
        }
        std::result::Result::Ok(())
    }
    fn calculate_size(&self) -> std::option::Option<i32> {
        let mut size = 0i32;
        let value = self.value;
        if value != Self::VALUE_DEFAULT_VALUE {
            size = size.checked_add(1)?;
            size = size.checked_add(crate::io::sizes::int64(value))?;
        }
        size = size.checked_add(self._unknown_fields.calculate_size()?)?;
        std::option::Option::Some(size)
    }
    fn write_to(&self, output: &mut crate::io::CodedOutput) -> crate::io::OutputResult {
        let value = self.value;
        if value != Self::VALUE_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[8])?;
            output.write_int64(value)?;
        }
        self._unknown_fields.write_to(output)?;
        std::result::Result::Ok(())
    }
}
impl crate::LiteMessage for self::Int64Value {
    fn new() -> Self {
        Self {
            value: Self::VALUE_DEFAULT_VALUE,
            _unknown_fields: crate::UnknownFieldSet::new()
        }
    }
}
impl std::clone::Clone for self::Int64Value {
    fn clone(&self) -> Self {
        Self {
            value: self.value.clone(),
            _unknown_fields: self._unknown_fields.clone()
        }
    }
    fn clone_from(&mut self, other: &Self) {
        self.value = other.value;
        self._unknown_fields.clone_from(&other._unknown_fields);
    }
}
impl crate::Message for self::Int64Value {
    fn descriptor() -> &'static crate::reflect::MessageDescriptor {
        unimplemented!()
    }
}
impl self::Int64Value {
    /// Gets the field number of the 'value' field
    pub const VALUE_FIELD_NUMBER: i32 = 1;
    pub const VALUE_DEFAULT_VALUE: i64 = 0;
    pub fn value(&self) -> &i64 {
        &self.value
    }
    pub fn value_mut(&mut self) -> &mut i64 {
        &mut self.value
    }
}
#[derive(Debug, PartialEq)]
pub struct UInt64Value {
    pub value: u64,
    _unknown_fields: crate::UnknownFieldSet
}
impl crate::CodedMessage for self::UInt64Value {
    fn merge_from(&mut self, input: &mut crate::io::CodedInput) -> crate::io::InputResult<()> {
        while let std::option::Option::Some(tag) = input.read_tag()? {
            match tag.get() {
                8 => self.value = input.read_uint64()?,
                tag => self._unknown_fields.merge_from(tag, input)?
            }
        }
        std::result::Result::Ok(())
    }
    fn calculate_size(&self) -> std::option::Option<i32> {
        let mut size = 0i32;
        let value = self.value;
        if value != Self::VALUE_DEFAULT_VALUE {
            size = size.checked_add(1)?;
            size = size.checked_add(crate::io::sizes::uint64(value))?;
        }
        size = size.checked_add(self._unknown_fields.calculate_size()?)?;
        std::option::Option::Some(size)
    }
    fn write_to(&self, output: &mut crate::io::CodedOutput) -> crate::io::OutputResult {
        let value = self.value;
        if value != Self::VALUE_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[8])?;
            output.write_uint64(value)?;
        }
        self._unknown_fields.write_to(output)?;
        std::result::Result::Ok(())
    }
}
impl crate::LiteMessage for self::UInt64Value {
    fn new() -> Self {
        Self {
            value: Self::VALUE_DEFAULT_VALUE,
            _unknown_fields: crate::UnknownFieldSet::new()
        }
    }
}
impl std::clone::Clone for self::UInt64Value {
    fn clone(&self) -> Self {
        Self {
            value: self.value.clone(),
            _unknown_fields: self._unknown_fields.clone()
        }
    }
    fn clone_from(&mut self, other: &Self) {
        self.value = other.value;
        self._unknown_fields.clone_from(&other._unknown_fields);
    }
}
impl crate::Message for self::UInt64Value {
    fn descriptor() -> &'static crate::reflect::MessageDescriptor {
        unimplemented!()
    }
}
impl self::UInt64Value {
    /// Gets the field number of the 'value' field
    pub const VALUE_FIELD_NUMBER: i32 = 1;
    pub const VALUE_DEFAULT_VALUE: u64 = 0;
    pub fn value(&self) -> &u64 {
        &self.value
    }
    pub fn value_mut(&mut self) -> &mut u64 {
        &mut self.value
    }
}
#[derive(Debug, PartialEq)]
pub struct Int32Value {
    pub value: i32,
    _unknown_fields: crate::UnknownFieldSet
}
impl crate::CodedMessage for self::Int32Value {
    fn merge_from(&mut self, input: &mut crate::io::CodedInput) -> crate::io::InputResult<()> {
        while let std::option::Option::Some(tag) = input.read_tag()? {
            match tag.get() {
                8 => self.value = input.read_int32()?,
                tag => self._unknown_fields.merge_from(tag, input)?
            }
        }
        std::result::Result::Ok(())
    }
    fn calculate_size(&self) -> std::option::Option<i32> {
        let mut size = 0i32;
        let value = self.value;
        if value != Self::VALUE_DEFAULT_VALUE {
            size = size.checked_add(1)?;
            size = size.checked_add(crate::io::sizes::int32(value))?;
        }
        size = size.checked_add(self._unknown_fields.calculate_size()?)?;
        std::option::Option::Some(size)
    }
    fn write_to(&self, output: &mut crate::io::CodedOutput) -> crate::io::OutputResult {
        let value = self.value;
        if value != Self::VALUE_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[8])?;
            output.write_int32(value)?;
        }
        self._unknown_fields.write_to(output)?;
        std::result::Result::Ok(())
    }
}
impl crate::LiteMessage for self::Int32Value {
    fn new() -> Self {
        Self {
            value: Self::VALUE_DEFAULT_VALUE,
            _unknown_fields: crate::UnknownFieldSet::new()
        }
    }
}
impl std::clone::Clone for self::Int32Value {
    fn clone(&self) -> Self {
        Self {
            value: self.value.clone(),
            _unknown_fields: self._unknown_fields.clone()
        }
    }
    fn clone_from(&mut self, other: &Self) {
        self.value = other.value;
        self._unknown_fields.clone_from(&other._unknown_fields);
    }
}
impl crate::Message for self::Int32Value {
    fn descriptor() -> &'static crate::reflect::MessageDescriptor {
        unimplemented!()
    }
}
impl self::Int32Value {
    /// Gets the field number of the 'value' field
    pub const VALUE_FIELD_NUMBER: i32 = 1;
    pub const VALUE_DEFAULT_VALUE: i32 = 0;
    pub fn value(&self) -> &i32 {
        &self.value
    }
    pub fn value_mut(&mut self) -> &mut i32 {
        &mut self.value
    }
}
#[derive(Debug, PartialEq)]
pub struct UInt32Value {
    pub value: u32,
    _unknown_fields: crate::UnknownFieldSet
}
impl crate::CodedMessage for self::UInt32Value {
    fn merge_from(&mut self, input: &mut crate::io::CodedInput) -> crate::io::InputResult<()> {
        while let std::option::Option::Some(tag) = input.read_tag()? {
            match tag.get() {
                8 => self.value = input.read_uint32()?,
                tag => self._unknown_fields.merge_from(tag, input)?
            }
        }
        std::result::Result::Ok(())
    }
    fn calculate_size(&self) -> std::option::Option<i32> {
        let mut size = 0i32;
        let value = self.value;
        if value != Self::VALUE_DEFAULT_VALUE {
            size = size.checked_add(1)?;
            size = size.checked_add(crate::io::sizes::uint32(value))?;
        }
        size = size.checked_add(self._unknown_fields.calculate_size()?)?;
        std::option::Option::Some(size)
    }
    fn write_to(&self, output: &mut crate::io::CodedOutput) -> crate::io::OutputResult {
        let value = self.value;
        if value != Self::VALUE_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[8])?;
            output.write_uint32(value)?;
        }
        self._unknown_fields.write_to(output)?;
        std::result::Result::Ok(())
    }
}
impl crate::LiteMessage for self::UInt32Value {
    fn new() -> Self {
        Self {
            value: Self::VALUE_DEFAULT_VALUE,
            _unknown_fields: crate::UnknownFieldSet::new()
        }
    }
}
impl std::clone::Clone for self::UInt32Value {
    fn clone(&self) -> Self {
        Self {
            value: self.value.clone(),
            _unknown_fields: self._unknown_fields.clone()
        }
    }
    fn clone_from(&mut self, other: &Self) {
        self.value = other.value;
        self._unknown_fields.clone_from(&other._unknown_fields);
    }
}
impl crate::Message for self::UInt32Value {
    fn descriptor() -> &'static crate::reflect::MessageDescriptor {
        unimplemented!()
    }
}
impl self::UInt32Value {
    /// Gets the field number of the 'value' field
    pub const VALUE_FIELD_NUMBER: i32 = 1;
    pub const VALUE_DEFAULT_VALUE: u32 = 0;
    pub fn value(&self) -> &u32 {
        &self.value
    }
    pub fn value_mut(&mut self) -> &mut u32 {
        &mut self.value
    }
}
#[derive(Debug, PartialEq)]
pub struct BoolValue {
    pub value: bool,
    _unknown_fields: crate::UnknownFieldSet
}
impl crate::CodedMessage for self::BoolValue {
    fn merge_from(&mut self, input: &mut crate::io::CodedInput) -> crate::io::InputResult<()> {
        while let std::option::Option::Some(tag) = input.read_tag()? {
            match tag.get() {
                8 => self.value = input.read_bool()?,
                tag => self._unknown_fields.merge_from(tag, input)?
            }
        }
        std::result::Result::Ok(())
    }
    fn calculate_size(&self) -> std::option::Option<i32> {
        let mut size = 0i32;
        let value = self.value;
        if value != Self::VALUE_DEFAULT_VALUE {
            size = size.checked_add(1)?;
            size = size.checked_add(crate::io::sizes::bool(value))?;
        }
        size = size.checked_add(self._unknown_fields.calculate_size()?)?;
        std::option::Option::Some(size)
    }
    fn write_to(&self, output: &mut crate::io::CodedOutput) -> crate::io::OutputResult {
        let value = self.value;
        if value != Self::VALUE_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[8])?;
            output.write_bool(value)?;
        }
        self._unknown_fields.write_to(output)?;
        std::result::Result::Ok(())
    }
}
impl crate::LiteMessage for self::BoolValue {
    fn new() -> Self {
        Self {
            value: Self::VALUE_DEFAULT_VALUE,
            _unknown_fields: crate::UnknownFieldSet::new()
        }
    }
}
impl std::clone::Clone for self::BoolValue {
    fn clone(&self) -> Self {
        Self {
            value: self.value.clone(),
            _unknown_fields: self._unknown_fields.clone()
        }
    }
    fn clone_from(&mut self, other: &Self) {
        self.value = other.value;
        self._unknown_fields.clone_from(&other._unknown_fields);
    }
}
impl crate::Message for self::BoolValue {
    fn descriptor() -> &'static crate::reflect::MessageDescriptor {
        unimplemented!()
    }
}
impl self::BoolValue {
    /// Gets the field number of the 'value' field
    pub const VALUE_FIELD_NUMBER: i32 = 1;
    pub const VALUE_DEFAULT_VALUE: bool = false;
    pub fn value(&self) -> &bool {
        &self.value
    }
    pub fn value_mut(&mut self) -> &mut bool {
        &mut self.value
    }
}
#[derive(Debug, PartialEq)]
pub struct StringValue {
    pub value: std::string::String,
    _unknown_fields: crate::UnknownFieldSet
}
impl crate::CodedMessage for self::StringValue {
    fn merge_from(&mut self, input: &mut crate::io::CodedInput) -> crate::io::InputResult<()> {
        while let std::option::Option::Some(tag) = input.read_tag()? {
            match tag.get() {
                10 => self.value = input.read_string()?,
                tag => self._unknown_fields.merge_from(tag, input)?
            }
        }
        std::result::Result::Ok(())
    }
    fn calculate_size(&self) -> std::option::Option<i32> {
        let mut size = 0i32;
        let value = &self.value;
        if value != Self::VALUE_DEFAULT_VALUE {
            size = size.checked_add(1)?;
            size = size.checked_add(crate::io::sizes::string(value)?)?;
        }
        size = size.checked_add(self._unknown_fields.calculate_size()?)?;
        std::option::Option::Some(size)
    }
    fn write_to(&self, output: &mut crate::io::CodedOutput) -> crate::io::OutputResult {
        let value = &self.value;
        if value != Self::VALUE_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[10])?;
            output.write_string(value)?;
        }
        self._unknown_fields.write_to(output)?;
        std::result::Result::Ok(())
    }
}
impl crate::LiteMessage for self::StringValue {
    fn new() -> Self {
        Self {
            value: std::string::String::new(),
            _unknown_fields: crate::UnknownFieldSet::new()
        }
    }
}
impl std::clone::Clone for self::StringValue {
    fn clone(&self) -> Self {
        Self {
            value: self.value.clone(),
            _unknown_fields: self._unknown_fields.clone()
        }
    }
    fn clone_from(&mut self, other: &Self) {
        self.value = other.value.clone();
        self._unknown_fields.clone_from(&other._unknown_fields);
    }
}
impl crate::Message for self::StringValue {
    fn descriptor() -> &'static crate::reflect::MessageDescriptor {
        unimplemented!()
    }
}
impl self::StringValue {
    /// Gets the field number of the 'value' field
    pub const VALUE_FIELD_NUMBER: i32 = 1;
    pub const VALUE_DEFAULT_VALUE: &'static str = "";
    pub fn value(&self) -> &std::string::String {
        &self.value
    }
    pub fn value_mut(&mut self) -> &mut std::string::String {
        &mut self.value
    }
}
#[derive(Debug, PartialEq)]
pub struct BytesValue {
    pub value: std::vec::Vec<u8>,
    _unknown_fields: crate::UnknownFieldSet
}
impl crate::CodedMessage for self::BytesValue {
    fn merge_from(&mut self, input: &mut crate::io::CodedInput) -> crate::io::InputResult<()> {
        while let std::option::Option::Some(tag) = input.read_tag()? {
            match tag.get() {
                10 => self.value = input.read_bytes()?,
                tag => self._unknown_fields.merge_from(tag, input)?
            }
        }
        std::result::Result::Ok(())
    }
    fn calculate_size(&self) -> std::option::Option<i32> {
        let mut size = 0i32;
        let value = &self.value;
        if value.as_slice() != Self::VALUE_DEFAULT_VALUE {
            size = size.checked_add(1)?;
            size = size.checked_add(crate::io::sizes::bytes(value)?)?;
        }
        size = size.checked_add(self._unknown_fields.calculate_size()?)?;
        std::option::Option::Some(size)
    }
    fn write_to(&self, output: &mut crate::io::CodedOutput) -> crate::io::OutputResult {
        let value = &self.value;
        if value.as_slice() != Self::VALUE_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[10])?;
            output.write_bytes(value)?;
        }
        self._unknown_fields.write_to(output)?;
        std::result::Result::Ok(())
    }
}
impl crate::LiteMessage for self::BytesValue {
    fn new() -> Self {
        Self {
            value: std::vec::Vec::new(),
            _unknown_fields: crate::UnknownFieldSet::new()
        }
    }
}
impl std::clone::Clone for self::BytesValue {
    fn clone(&self) -> Self {
        Self {
            value: self.value.clone(),
            _unknown_fields: self._unknown_fields.clone()
        }
    }
    fn clone_from(&mut self, other: &Self) {
        self.value = other.value.clone();
        self._unknown_fields.clone_from(&other._unknown_fields);
    }
}
impl crate::Message for self::BytesValue {
    fn descriptor() -> &'static crate::reflect::MessageDescriptor {
        unimplemented!()
    }
}
impl self::BytesValue {
    /// Gets the field number of the 'value' field
    pub const VALUE_FIELD_NUMBER: i32 = 1;
    pub const VALUE_DEFAULT_VALUE: &'static [u8] = &[];
    pub fn value(&self) -> &std::vec::Vec<u8> {
        &self.value
    }
    pub fn value_mut(&mut self) -> &mut std::vec::Vec<u8> {
        &mut self.value
    }
}