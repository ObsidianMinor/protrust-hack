//! DO NOT EDIT!
//! Generated by protoc-gen-rust, part of the protrust crate.
//!
//! Source: google/protobuf/wrappers.proto

static FILE_ONCE: ::std::sync::Once = ::std::sync::Once::new();
static mut FILE_POOL: ::std::option::Option<crate::reflect::DescriptorPool<'static>> = ::std::option::Option::None;
static mut FILE_PROTO: ::std::option::Option<[crate::descriptor::FileDescriptorProto; 1]> = ::std::option::Option::None;
static mut FILE_DESCRIPTOR: ::std::option::Option<&'static crate::reflect::FileDescriptor> = ::std::option::Option::None;
static mut FILE_DEPS: ::std::option::Option<[&'static crate::reflect::DescriptorPool<'static>; 0]> = ::std::option::Option::None;

fn file_once_init() {
    unsafe {
        FILE_PROTO = ::std::option::Option::Some([crate::LiteMessage::read_new(&mut [
            10, 30, 103, 111, 111, 103, 108, 101, 47, 112, 114, 111, 116, 111, 98, 117, 102, 47, 119, 114, 
            97, 112, 112, 101, 114, 115, 46, 112, 114, 111, 116, 111, 18, 15, 103, 111, 111, 103, 108, 101, 
            46, 112, 114, 111, 116, 111, 98, 117, 102, 34, 35, 10, 11, 68, 111, 117, 98, 108, 101, 86, 
            97, 108, 117, 101, 18, 20, 10, 5, 118, 97, 108, 117, 101, 24, 1, 32, 1, 40, 1, 82, 
            5, 118, 97, 108, 117, 101, 34, 34, 10, 10, 70, 108, 111, 97, 116, 86, 97, 108, 117, 101, 
            18, 20, 10, 5, 118, 97, 108, 117, 101, 24, 1, 32, 1, 40, 2, 82, 5, 118, 97, 108, 
            117, 101, 34, 34, 10, 10, 73, 110, 116, 54, 52, 86, 97, 108, 117, 101, 18, 20, 10, 5, 
            118, 97, 108, 117, 101, 24, 1, 32, 1, 40, 3, 82, 5, 118, 97, 108, 117, 101, 34, 35, 
            10, 11, 85, 73, 110, 116, 54, 52, 86, 97, 108, 117, 101, 18, 20, 10, 5, 118, 97, 108, 
            117, 101, 24, 1, 32, 1, 40, 4, 82, 5, 118, 97, 108, 117, 101, 34, 34, 10, 10, 73, 
            110, 116, 51, 50, 86, 97, 108, 117, 101, 18, 20, 10, 5, 118, 97, 108, 117, 101, 24, 1, 
            32, 1, 40, 5, 82, 5, 118, 97, 108, 117, 101, 34, 35, 10, 11, 85, 73, 110, 116, 51, 
            50, 86, 97, 108, 117, 101, 18, 20, 10, 5, 118, 97, 108, 117, 101, 24, 1, 32, 1, 40, 
            13, 82, 5, 118, 97, 108, 117, 101, 34, 33, 10, 9, 66, 111, 111, 108, 86, 97, 108, 117, 
            101, 18, 20, 10, 5, 118, 97, 108, 117, 101, 24, 1, 32, 1, 40, 8, 82, 5, 118, 97, 
            108, 117, 101, 34, 35, 10, 11, 83, 116, 114, 105, 110, 103, 86, 97, 108, 117, 101, 18, 20, 
            10, 5, 118, 97, 108, 117, 101, 24, 1, 32, 1, 40, 9, 82, 5, 118, 97, 108, 117, 101, 
            34, 34, 10, 10, 66, 121, 116, 101, 115, 86, 97, 108, 117, 101, 18, 20, 10, 5, 118, 97, 
            108, 117, 101, 24, 1, 32, 1, 40, 12, 82, 5, 118, 97, 108, 117, 101, 66, 124, 10, 19, 
            99, 111, 109, 46, 103, 111, 111, 103, 108, 101, 46, 112, 114, 111, 116, 111, 98, 117, 102, 66, 
            13, 87, 114, 97, 112, 112, 101, 114, 115, 80, 114, 111, 116, 111, 80, 1, 90, 42, 103, 105, 
            116, 104, 117, 98, 46, 99, 111, 109, 47, 103, 111, 108, 97, 110, 103, 47, 112, 114, 111, 116, 
            111, 98, 117, 102, 47, 112, 116, 121, 112, 101, 115, 47, 119, 114, 97, 112, 112, 101, 114, 115, 
            248, 1, 1, 162, 2, 3, 71, 80, 66, 170, 2, 30, 71, 111, 111, 103, 108, 101, 46, 80, 
            114, 111, 116, 111, 98, 117, 102, 46, 87, 101, 108, 108, 75, 110, 111, 119, 110, 84, 121, 112, 
            101, 115, 74, 181, 30, 10, 6, 18, 4, 35, 0, 117, 1, 10, 195, 14, 10, 1, 12, 18, 
            3, 35, 0, 18, 50, 193, 12, 32, 80, 114, 111, 116, 111, 99, 111, 108, 32, 66, 117, 102, 
            102, 101, 114, 115, 32, 45, 32, 71, 111, 111, 103, 108, 101, 39, 115, 32, 100, 97, 116, 97, 
            32, 105, 110, 116, 101, 114, 99, 104, 97, 110, 103, 101, 32, 102, 111, 114, 109, 97, 116, 10, 
            32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 50, 48, 48, 56, 32, 71, 111, 111, 103, 
            108, 101, 32, 73, 110, 99, 46, 32, 32, 65, 108, 108, 32, 114, 105, 103, 104, 116, 115, 32, 
            114, 101, 115, 101, 114, 118, 101, 100, 46, 10, 32, 104, 116, 116, 112, 115, 58, 47, 47, 100, 
            101, 118, 101, 108, 111, 112, 101, 114, 115, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 
            47, 112, 114, 111, 116, 111, 99, 111, 108, 45, 98, 117, 102, 102, 101, 114, 115, 47, 10, 10, 
            32, 82, 101, 100, 105, 115, 116, 114, 105, 98, 117, 116, 105, 111, 110, 32, 97, 110, 100, 32, 
            117, 115, 101, 32, 105, 110, 32, 115, 111, 117, 114, 99, 101, 32, 97, 110, 100, 32, 98, 105, 
            110, 97, 114, 121, 32, 102, 111, 114, 109, 115, 44, 32, 119, 105, 116, 104, 32, 111, 114, 32, 
            119, 105, 116, 104, 111, 117, 116, 10, 32, 109, 111, 100, 105, 102, 105, 99, 97, 116, 105, 111, 
            110, 44, 32, 97, 114, 101, 32, 112, 101, 114, 109, 105, 116, 116, 101, 100, 32, 112, 114, 111, 
            118, 105, 100, 101, 100, 32, 116, 104, 97, 116, 32, 116, 104, 101, 32, 102, 111, 108, 108, 111, 
            119, 105, 110, 103, 32, 99, 111, 110, 100, 105, 116, 105, 111, 110, 115, 32, 97, 114, 101, 10, 
            32, 109, 101, 116, 58, 10, 10, 32, 32, 32, 32, 32, 42, 32, 82, 101, 100, 105, 115, 116, 
            114, 105, 98, 117, 116, 105, 111, 110, 115, 32, 111, 102, 32, 115, 111, 117, 114, 99, 101, 32, 
            99, 111, 100, 101, 32, 109, 117, 115, 116, 32, 114, 101, 116, 97, 105, 110, 32, 116, 104, 101, 
            32, 97, 98, 111, 118, 101, 32, 99, 111, 112, 121, 114, 105, 103, 104, 116, 10, 32, 110, 111, 
            116, 105, 99, 101, 44, 32, 116, 104, 105, 115, 32, 108, 105, 115, 116, 32, 111, 102, 32, 99, 
            111, 110, 100, 105, 116, 105, 111, 110, 115, 32, 97, 110, 100, 32, 116, 104, 101, 32, 102, 111, 
            108, 108, 111, 119, 105, 110, 103, 32, 100, 105, 115, 99, 108, 97, 105, 109, 101, 114, 46, 10, 
            32, 32, 32, 32, 32, 42, 32, 82, 101, 100, 105, 115, 116, 114, 105, 98, 117, 116, 105, 111, 
            110, 115, 32, 105, 110, 32, 98, 105, 110, 97, 114, 121, 32, 102, 111, 114, 109, 32, 109, 117, 
            115, 116, 32, 114, 101, 112, 114, 111, 100, 117, 99, 101, 32, 116, 104, 101, 32, 97, 98, 111, 
            118, 101, 10, 32, 99, 111, 112, 121, 114, 105, 103, 104, 116, 32, 110, 111, 116, 105, 99, 101, 
            44, 32, 116, 104, 105, 115, 32, 108, 105, 115, 116, 32, 111, 102, 32, 99, 111, 110, 100, 105, 
            116, 105, 111, 110, 115, 32, 97, 110, 100, 32, 116, 104, 101, 32, 102, 111, 108, 108, 111, 119, 
            105, 110, 103, 32, 100, 105, 115, 99, 108, 97, 105, 109, 101, 114, 10, 32, 105, 110, 32, 116, 
            104, 101, 32, 100, 111, 99, 117, 109, 101, 110, 116, 97, 116, 105, 111, 110, 32, 97, 110, 100, 
            47, 111, 114, 32, 111, 116, 104, 101, 114, 32, 109, 97, 116, 101, 114, 105, 97, 108, 115, 32, 
            112, 114, 111, 118, 105, 100, 101, 100, 32, 119, 105, 116, 104, 32, 116, 104, 101, 10, 32, 100, 
            105, 115, 116, 114, 105, 98, 117, 116, 105, 111, 110, 46, 10, 32, 32, 32, 32, 32, 42, 32, 
            78, 101, 105, 116, 104, 101, 114, 32, 116, 104, 101, 32, 110, 97, 109, 101, 32, 111, 102, 32, 
            71, 111, 111, 103, 108, 101, 32, 73, 110, 99, 46, 32, 110, 111, 114, 32, 116, 104, 101, 32, 
            110, 97, 109, 101, 115, 32, 111, 102, 32, 105, 116, 115, 10, 32, 99, 111, 110, 116, 114, 105, 
            98, 117, 116, 111, 114, 115, 32, 109, 97, 121, 32, 98, 101, 32, 117, 115, 101, 100, 32, 116, 
            111, 32, 101, 110, 100, 111, 114, 115, 101, 32, 111, 114, 32, 112, 114, 111, 109, 111, 116, 101, 
            32, 112, 114, 111, 100, 117, 99, 116, 115, 32, 100, 101, 114, 105, 118, 101, 100, 32, 102, 114, 
            111, 109, 10, 32, 116, 104, 105, 115, 32, 115, 111, 102, 116, 119, 97, 114, 101, 32, 119, 105, 
            116, 104, 111, 117, 116, 32, 115, 112, 101, 99, 105, 102, 105, 99, 32, 112, 114, 105, 111, 114, 
            32, 119, 114, 105, 116, 116, 101, 110, 32, 112, 101, 114, 109, 105, 115, 115, 105, 111, 110, 46, 
            10, 10, 32, 84, 72, 73, 83, 32, 83, 79, 70, 84, 87, 65, 82, 69, 32, 73, 83, 32, 
            80, 82, 79, 86, 73, 68, 69, 68, 32, 66, 89, 32, 84, 72, 69, 32, 67, 79, 80, 89, 
            82, 73, 71, 72, 84, 32, 72, 79, 76, 68, 69, 82, 83, 32, 65, 78, 68, 32, 67, 79, 
            78, 84, 82, 73, 66, 85, 84, 79, 82, 83, 10, 32, 34, 65, 83, 32, 73, 83, 34, 32, 
            65, 78, 68, 32, 65, 78, 89, 32, 69, 88, 80, 82, 69, 83, 83, 32, 79, 82, 32, 73, 
            77, 80, 76, 73, 69, 68, 32, 87, 65, 82, 82, 65, 78, 84, 73, 69, 83, 44, 32, 73, 
            78, 67, 76, 85, 68, 73, 78, 71, 44, 32, 66, 85, 84, 32, 78, 79, 84, 10, 32, 76, 
            73, 77, 73, 84, 69, 68, 32, 84, 79, 44, 32, 84, 72, 69, 32, 73, 77, 80, 76, 73, 
            69, 68, 32, 87, 65, 82, 82, 65, 78, 84, 73, 69, 83, 32, 79, 70, 32, 77, 69, 82, 
            67, 72, 65, 78, 84, 65, 66, 73, 76, 73, 84, 89, 32, 65, 78, 68, 32, 70, 73, 84, 
            78, 69, 83, 83, 32, 70, 79, 82, 10, 32, 65, 32, 80, 65, 82, 84, 73, 67, 85, 76, 
            65, 82, 32, 80, 85, 82, 80, 79, 83, 69, 32, 65, 82, 69, 32, 68, 73, 83, 67, 76, 
            65, 73, 77, 69, 68, 46, 32, 73, 78, 32, 78, 79, 32, 69, 86, 69, 78, 84, 32, 83, 
            72, 65, 76, 76, 32, 84, 72, 69, 32, 67, 79, 80, 89, 82, 73, 71, 72, 84, 10, 32, 
            79, 87, 78, 69, 82, 32, 79, 82, 32, 67, 79, 78, 84, 82, 73, 66, 85, 84, 79, 82, 
            83, 32, 66, 69, 32, 76, 73, 65, 66, 76, 69, 32, 70, 79, 82, 32, 65, 78, 89, 32, 
            68, 73, 82, 69, 67, 84, 44, 32, 73, 78, 68, 73, 82, 69, 67, 84, 44, 32, 73, 78, 
            67, 73, 68, 69, 78, 84, 65, 76, 44, 10, 32, 83, 80, 69, 67, 73, 65, 76, 44, 32, 
            69, 88, 69, 77, 80, 76, 65, 82, 89, 44, 32, 79, 82, 32, 67, 79, 78, 83, 69, 81, 
            85, 69, 78, 84, 73, 65, 76, 32, 68, 65, 77, 65, 71, 69, 83, 32, 40, 73, 78, 67, 
            76, 85, 68, 73, 78, 71, 44, 32, 66, 85, 84, 32, 78, 79, 84, 10, 32, 76, 73, 77, 
            73, 84, 69, 68, 32, 84, 79, 44, 32, 80, 82, 79, 67, 85, 82, 69, 77, 69, 78, 84, 
            32, 79, 70, 32, 83, 85, 66, 83, 84, 73, 84, 85, 84, 69, 32, 71, 79, 79, 68, 83, 
            32, 79, 82, 32, 83, 69, 82, 86, 73, 67, 69, 83, 59, 32, 76, 79, 83, 83, 32, 79, 
            70, 32, 85, 83, 69, 44, 10, 32, 68, 65, 84, 65, 44, 32, 79, 82, 32, 80, 82, 79, 
            70, 73, 84, 83, 59, 32, 79, 82, 32, 66, 85, 83, 73, 78, 69, 83, 83, 32, 73, 78, 
            84, 69, 82, 82, 85, 80, 84, 73, 79, 78, 41, 32, 72, 79, 87, 69, 86, 69, 82, 32, 
            67, 65, 85, 83, 69, 68, 32, 65, 78, 68, 32, 79, 78, 32, 65, 78, 89, 10, 32, 84, 
            72, 69, 79, 82, 89, 32, 79, 70, 32, 76, 73, 65, 66, 73, 76, 73, 84, 89, 44, 32, 
            87, 72, 69, 84, 72, 69, 82, 32, 73, 78, 32, 67, 79, 78, 84, 82, 65, 67, 84, 44, 
            32, 83, 84, 82, 73, 67, 84, 32, 76, 73, 65, 66, 73, 76, 73, 84, 89, 44, 32, 79, 
            82, 32, 84, 79, 82, 84, 10, 32, 40, 73, 78, 67, 76, 85, 68, 73, 78, 71, 32, 78, 
            69, 71, 76, 73, 71, 69, 78, 67, 69, 32, 79, 82, 32, 79, 84, 72, 69, 82, 87, 73, 
            83, 69, 41, 32, 65, 82, 73, 83, 73, 78, 71, 32, 73, 78, 32, 65, 78, 89, 32, 87, 
            65, 89, 32, 79, 85, 84, 32, 79, 70, 32, 84, 72, 69, 32, 85, 83, 69, 10, 32, 79, 
            70, 32, 84, 72, 73, 83, 32, 83, 79, 70, 84, 87, 65, 82, 69, 44, 32, 69, 86, 69, 
            78, 32, 73, 70, 32, 65, 68, 86, 73, 83, 69, 68, 32, 79, 70, 32, 84, 72, 69, 32, 
            80, 79, 83, 83, 73, 66, 73, 76, 73, 84, 89, 32, 79, 70, 32, 83, 85, 67, 72, 32, 
            68, 65, 77, 65, 71, 69, 46, 10, 50, 244, 1, 32, 87, 114, 97, 112, 112, 101, 114, 115, 
            32, 102, 111, 114, 32, 112, 114, 105, 109, 105, 116, 105, 118, 101, 32, 40, 110, 111, 110, 45, 
            109, 101, 115, 115, 97, 103, 101, 41, 32, 116, 121, 112, 101, 115, 46, 32, 84, 104, 101, 115, 
            101, 32, 116, 121, 112, 101, 115, 32, 97, 114, 101, 32, 117, 115, 101, 102, 117, 108, 10, 32, 
            102, 111, 114, 32, 101, 109, 98, 101, 100, 100, 105, 110, 103, 32, 112, 114, 105, 109, 105, 116, 
            105, 118, 101, 115, 32, 105, 110, 32, 116, 104, 101, 32, 96, 103, 111, 111, 103, 108, 101, 46, 
            112, 114, 111, 116, 111, 98, 117, 102, 46, 65, 110, 121, 96, 32, 116, 121, 112, 101, 32, 97, 
            110, 100, 32, 102, 111, 114, 32, 112, 108, 97, 99, 101, 115, 10, 32, 119, 104, 101, 114, 101, 
            32, 119, 101, 32, 110, 101, 101, 100, 32, 116, 111, 32, 100, 105, 115, 116, 105, 110, 103, 117, 
            105, 115, 104, 32, 98, 101, 116, 119, 101, 101, 110, 32, 116, 104, 101, 32, 97, 98, 115, 101, 
            110, 99, 101, 32, 111, 102, 32, 97, 32, 112, 114, 105, 109, 105, 116, 105, 118, 101, 10, 32, 
            116, 121, 112, 101, 100, 32, 102, 105, 101, 108, 100, 32, 97, 110, 100, 32, 105, 116, 115, 32, 
            100, 101, 102, 97, 117, 108, 116, 32, 118, 97, 108, 117, 101, 46, 10, 10, 8, 10, 1, 2, 
            18, 3, 37, 8, 23, 10, 8, 10, 1, 8, 18, 3, 39, 0, 59, 10, 9, 10, 2, 8, 
            37, 18, 3, 39, 0, 59, 10, 8, 10, 1, 8, 18, 3, 40, 0, 31, 10, 9, 10, 2, 
            8, 31, 18, 3, 40, 0, 31, 10, 8, 10, 1, 8, 18, 3, 41, 0, 65, 10, 9, 10, 
            2, 8, 11, 18, 3, 41, 0, 65, 10, 8, 10, 1, 8, 18, 3, 42, 0, 44, 10, 9, 
            10, 2, 8, 1, 18, 3, 42, 0, 44, 10, 8, 10, 1, 8, 18, 3, 43, 0, 46, 10, 
            9, 10, 2, 8, 8, 18, 3, 43, 0, 46, 10, 8, 10, 1, 8, 18, 3, 44, 0, 34, 
            10, 9, 10, 2, 8, 10, 18, 3, 44, 0, 34, 10, 8, 10, 1, 8, 18, 3, 45, 0, 
            33, 10, 9, 10, 2, 8, 36, 18, 3, 45, 0, 33, 10, 103, 10, 2, 4, 0, 18, 4, 
            50, 0, 53, 1, 26, 91, 32, 87, 114, 97, 112, 112, 101, 114, 32, 109, 101, 115, 115, 97, 
            103, 101, 32, 102, 111, 114, 32, 96, 100, 111, 117, 98, 108, 101, 96, 46, 10, 10, 32, 84, 
            104, 101, 32, 74, 83, 79, 78, 32, 114, 101, 112, 114, 101, 115, 101, 110, 116, 97, 116, 105, 
            111, 110, 32, 102, 111, 114, 32, 96, 68, 111, 117, 98, 108, 101, 86, 97, 108, 117, 101, 96, 
            32, 105, 115, 32, 74, 83, 79, 78, 32, 110, 117, 109, 98, 101, 114, 46, 10, 10, 10, 10, 
            3, 4, 0, 1, 18, 3, 50, 8, 19, 10, 32, 10, 4, 4, 0, 2, 0, 18, 3, 52, 
            2, 19, 26, 19, 32, 84, 104, 101, 32, 100, 111, 117, 98, 108, 101, 32, 118, 97, 108, 117, 
            101, 46, 10, 10, 13, 10, 5, 4, 0, 2, 0, 4, 18, 4, 52, 2, 50, 21, 10, 12, 
            10, 5, 4, 0, 2, 0, 5, 18, 3, 52, 2, 8, 10, 12, 10, 5, 4, 0, 2, 0, 
            1, 18, 3, 52, 9, 14, 10, 12, 10, 5, 4, 0, 2, 0, 3, 18, 3, 52, 17, 18, 
            10, 101, 10, 2, 4, 1, 18, 4, 58, 0, 61, 1, 26, 89, 32, 87, 114, 97, 112, 112, 
            101, 114, 32, 109, 101, 115, 115, 97, 103, 101, 32, 102, 111, 114, 32, 96, 102, 108, 111, 97, 
            116, 96, 46, 10, 10, 32, 84, 104, 101, 32, 74, 83, 79, 78, 32, 114, 101, 112, 114, 101, 
            115, 101, 110, 116, 97, 116, 105, 111, 110, 32, 102, 111, 114, 32, 96, 70, 108, 111, 97, 116, 
            86, 97, 108, 117, 101, 96, 32, 105, 115, 32, 74, 83, 79, 78, 32, 110, 117, 109, 98, 101, 
            114, 46, 10, 10, 10, 10, 3, 4, 1, 1, 18, 3, 58, 8, 18, 10, 31, 10, 4, 4, 
            1, 2, 0, 18, 3, 60, 2, 18, 26, 18, 32, 84, 104, 101, 32, 102, 108, 111, 97, 116, 
            32, 118, 97, 108, 117, 101, 46, 10, 10, 13, 10, 5, 4, 1, 2, 0, 4, 18, 4, 60, 
            2, 58, 20, 10, 12, 10, 5, 4, 1, 2, 0, 5, 18, 3, 60, 2, 7, 10, 12, 10, 
            5, 4, 1, 2, 0, 1, 18, 3, 60, 8, 13, 10, 12, 10, 5, 4, 1, 2, 0, 3, 
            18, 3, 60, 16, 17, 10, 101, 10, 2, 4, 2, 18, 4, 66, 0, 69, 1, 26, 89, 32, 
            87, 114, 97, 112, 112, 101, 114, 32, 109, 101, 115, 115, 97, 103, 101, 32, 102, 111, 114, 32, 
            96, 105, 110, 116, 54, 52, 96, 46, 10, 10, 32, 84, 104, 101, 32, 74, 83, 79, 78, 32, 
            114, 101, 112, 114, 101, 115, 101, 110, 116, 97, 116, 105, 111, 110, 32, 102, 111, 114, 32, 96, 
            73, 110, 116, 54, 52, 86, 97, 108, 117, 101, 96, 32, 105, 115, 32, 74, 83, 79, 78, 32, 
            115, 116, 114, 105, 110, 103, 46, 10, 10, 10, 10, 3, 4, 2, 1, 18, 3, 66, 8, 18, 
            10, 31, 10, 4, 4, 2, 2, 0, 18, 3, 68, 2, 18, 26, 18, 32, 84, 104, 101, 32, 
            105, 110, 116, 54, 52, 32, 118, 97, 108, 117, 101, 46, 10, 10, 13, 10, 5, 4, 2, 2, 
            0, 4, 18, 4, 68, 2, 66, 20, 10, 12, 10, 5, 4, 2, 2, 0, 5, 18, 3, 68, 
            2, 7, 10, 12, 10, 5, 4, 2, 2, 0, 1, 18, 3, 68, 8, 13, 10, 12, 10, 5, 
            4, 2, 2, 0, 3, 18, 3, 68, 16, 17, 10, 103, 10, 2, 4, 3, 18, 4, 74, 0, 
            77, 1, 26, 91, 32, 87, 114, 97, 112, 112, 101, 114, 32, 109, 101, 115, 115, 97, 103, 101, 
            32, 102, 111, 114, 32, 96, 117, 105, 110, 116, 54, 52, 96, 46, 10, 10, 32, 84, 104, 101, 
            32, 74, 83, 79, 78, 32, 114, 101, 112, 114, 101, 115, 101, 110, 116, 97, 116, 105, 111, 110, 
            32, 102, 111, 114, 32, 96, 85, 73, 110, 116, 54, 52, 86, 97, 108, 117, 101, 96, 32, 105, 
            115, 32, 74, 83, 79, 78, 32, 115, 116, 114, 105, 110, 103, 46, 10, 10, 10, 10, 3, 4, 
            3, 1, 18, 3, 74, 8, 19, 10, 32, 10, 4, 4, 3, 2, 0, 18, 3, 76, 2, 19, 
            26, 19, 32, 84, 104, 101, 32, 117, 105, 110, 116, 54, 52, 32, 118, 97, 108, 117, 101, 46, 
            10, 10, 13, 10, 5, 4, 3, 2, 0, 4, 18, 4, 76, 2, 74, 21, 10, 12, 10, 5, 
            4, 3, 2, 0, 5, 18, 3, 76, 2, 8, 10, 12, 10, 5, 4, 3, 2, 0, 1, 18, 
            3, 76, 9, 14, 10, 12, 10, 5, 4, 3, 2, 0, 3, 18, 3, 76, 17, 18, 10, 101, 
            10, 2, 4, 4, 18, 4, 82, 0, 85, 1, 26, 89, 32, 87, 114, 97, 112, 112, 101, 114, 
            32, 109, 101, 115, 115, 97, 103, 101, 32, 102, 111, 114, 32, 96, 105, 110, 116, 51, 50, 96, 
            46, 10, 10, 32, 84, 104, 101, 32, 74, 83, 79, 78, 32, 114, 101, 112, 114, 101, 115, 101, 
            110, 116, 97, 116, 105, 111, 110, 32, 102, 111, 114, 32, 96, 73, 110, 116, 51, 50, 86, 97, 
            108, 117, 101, 96, 32, 105, 115, 32, 74, 83, 79, 78, 32, 110, 117, 109, 98, 101, 114, 46, 
            10, 10, 10, 10, 3, 4, 4, 1, 18, 3, 82, 8, 18, 10, 31, 10, 4, 4, 4, 2, 
            0, 18, 3, 84, 2, 18, 26, 18, 32, 84, 104, 101, 32, 105, 110, 116, 51, 50, 32, 118, 
            97, 108, 117, 101, 46, 10, 10, 13, 10, 5, 4, 4, 2, 0, 4, 18, 4, 84, 2, 82, 
            20, 10, 12, 10, 5, 4, 4, 2, 0, 5, 18, 3, 84, 2, 7, 10, 12, 10, 5, 4, 
            4, 2, 0, 1, 18, 3, 84, 8, 13, 10, 12, 10, 5, 4, 4, 2, 0, 3, 18, 3, 
            84, 16, 17, 10, 103, 10, 2, 4, 5, 18, 4, 90, 0, 93, 1, 26, 91, 32, 87, 114, 
            97, 112, 112, 101, 114, 32, 109, 101, 115, 115, 97, 103, 101, 32, 102, 111, 114, 32, 96, 117, 
            105, 110, 116, 51, 50, 96, 46, 10, 10, 32, 84, 104, 101, 32, 74, 83, 79, 78, 32, 114, 
            101, 112, 114, 101, 115, 101, 110, 116, 97, 116, 105, 111, 110, 32, 102, 111, 114, 32, 96, 85, 
            73, 110, 116, 51, 50, 86, 97, 108, 117, 101, 96, 32, 105, 115, 32, 74, 83, 79, 78, 32, 
            110, 117, 109, 98, 101, 114, 46, 10, 10, 10, 10, 3, 4, 5, 1, 18, 3, 90, 8, 19, 
            10, 32, 10, 4, 4, 5, 2, 0, 18, 3, 92, 2, 19, 26, 19, 32, 84, 104, 101, 32, 
            117, 105, 110, 116, 51, 50, 32, 118, 97, 108, 117, 101, 46, 10, 10, 13, 10, 5, 4, 5, 
            2, 0, 4, 18, 4, 92, 2, 90, 21, 10, 12, 10, 5, 4, 5, 2, 0, 5, 18, 3, 
            92, 2, 8, 10, 12, 10, 5, 4, 5, 2, 0, 1, 18, 3, 92, 9, 14, 10, 12, 10, 
            5, 4, 5, 2, 0, 3, 18, 3, 92, 17, 18, 10, 111, 10, 2, 4, 6, 18, 4, 98, 
            0, 101, 1, 26, 99, 32, 87, 114, 97, 112, 112, 101, 114, 32, 109, 101, 115, 115, 97, 103, 
            101, 32, 102, 111, 114, 32, 96, 98, 111, 111, 108, 96, 46, 10, 10, 32, 84, 104, 101, 32, 
            74, 83, 79, 78, 32, 114, 101, 112, 114, 101, 115, 101, 110, 116, 97, 116, 105, 111, 110, 32, 
            102, 111, 114, 32, 96, 66, 111, 111, 108, 86, 97, 108, 117, 101, 96, 32, 105, 115, 32, 74, 
            83, 79, 78, 32, 96, 116, 114, 117, 101, 96, 32, 97, 110, 100, 32, 96, 102, 97, 108, 115, 
            101, 96, 46, 10, 10, 10, 10, 3, 4, 6, 1, 18, 3, 98, 8, 17, 10, 30, 10, 4, 
            4, 6, 2, 0, 18, 3, 100, 2, 17, 26, 17, 32, 84, 104, 101, 32, 98, 111, 111, 108, 
            32, 118, 97, 108, 117, 101, 46, 10, 10, 13, 10, 5, 4, 6, 2, 0, 4, 18, 4, 100, 
            2, 98, 19, 10, 12, 10, 5, 4, 6, 2, 0, 5, 18, 3, 100, 2, 6, 10, 12, 10, 
            5, 4, 6, 2, 0, 1, 18, 3, 100, 7, 12, 10, 12, 10, 5, 4, 6, 2, 0, 3, 
            18, 3, 100, 15, 16, 10, 103, 10, 2, 4, 7, 18, 4, 106, 0, 109, 1, 26, 91, 32, 
            87, 114, 97, 112, 112, 101, 114, 32, 109, 101, 115, 115, 97, 103, 101, 32, 102, 111, 114, 32, 
            96, 115, 116, 114, 105, 110, 103, 96, 46, 10, 10, 32, 84, 104, 101, 32, 74, 83, 79, 78, 
            32, 114, 101, 112, 114, 101, 115, 101, 110, 116, 97, 116, 105, 111, 110, 32, 102, 111, 114, 32, 
            96, 83, 116, 114, 105, 110, 103, 86, 97, 108, 117, 101, 96, 32, 105, 115, 32, 74, 83, 79, 
            78, 32, 115, 116, 114, 105, 110, 103, 46, 10, 10, 10, 10, 3, 4, 7, 1, 18, 3, 106, 
            8, 19, 10, 32, 10, 4, 4, 7, 2, 0, 18, 3, 108, 2, 19, 26, 19, 32, 84, 104, 
            101, 32, 115, 116, 114, 105, 110, 103, 32, 118, 97, 108, 117, 101, 46, 10, 10, 13, 10, 5, 
            4, 7, 2, 0, 4, 18, 4, 108, 2, 106, 21, 10, 12, 10, 5, 4, 7, 2, 0, 5, 
            18, 3, 108, 2, 8, 10, 12, 10, 5, 4, 7, 2, 0, 1, 18, 3, 108, 9, 14, 10, 
            12, 10, 5, 4, 7, 2, 0, 3, 18, 3, 108, 17, 18, 10, 101, 10, 2, 4, 8, 18, 
            4, 114, 0, 117, 1, 26, 89, 32, 87, 114, 97, 112, 112, 101, 114, 32, 109, 101, 115, 115, 
            97, 103, 101, 32, 102, 111, 114, 32, 96, 98, 121, 116, 101, 115, 96, 46, 10, 10, 32, 84, 
            104, 101, 32, 74, 83, 79, 78, 32, 114, 101, 112, 114, 101, 115, 101, 110, 116, 97, 116, 105, 
            111, 110, 32, 102, 111, 114, 32, 96, 66, 121, 116, 101, 115, 86, 97, 108, 117, 101, 96, 32, 
            105, 115, 32, 74, 83, 79, 78, 32, 115, 116, 114, 105, 110, 103, 46, 10, 10, 10, 10, 3, 
            4, 8, 1, 18, 3, 114, 8, 18, 10, 31, 10, 4, 4, 8, 2, 0, 18, 3, 116, 2, 
            18, 26, 18, 32, 84, 104, 101, 32, 98, 121, 116, 101, 115, 32, 118, 97, 108, 117, 101, 46, 
            10, 10, 13, 10, 5, 4, 8, 2, 0, 4, 18, 4, 116, 2, 114, 20, 10, 12, 10, 5, 
            4, 8, 2, 0, 5, 18, 3, 116, 2, 7, 10, 12, 10, 5, 4, 8, 2, 0, 1, 18, 
            3, 116, 8, 13, 10, 12, 10, 5, 4, 8, 2, 0, 3, 18, 3, 116, 16, 17, 98, 6, 
            112, 114, 111, 116, 111, 51, 
        ].as_ref()).expect("Could not read file descriptor")]);
        FILE_DEPS = ::std::option::Option::Some([]);
        FILE_POOL = ::std::option::Option::Some(crate::reflect::DescriptorPool::build_generated_pool(
            FILE_PROTO.as_ref().unwrap(),
            FILE_DEPS.as_ref().unwrap()
        ));
        FILE_DESCRIPTOR = ::std::option::Option::Some(FILE_POOL.as_ref().unwrap().find_file_by_name("google/protobuf/wrappers.proto").unwrap());
    }
}

pub fn pool() -> &'static crate::reflect::DescriptorPool<'static> {
    unsafe {
        FILE_ONCE.call_once(file_once_init);
        FILE_POOL.as_ref().unwrap()
    }
}
pub fn file() -> &'static crate::reflect::FileDescriptor {
    unsafe {
        FILE_ONCE.call_once(file_once_init);
        FILE_DESCRIPTOR.as_ref().unwrap()
    }
}
#[derive(Debug, PartialEq)]
pub struct DoubleValue {
    pub value: f64,
    unknown_fields: crate::UnknownFieldSet
}
impl crate::CodedMessage for self::DoubleValue {
    fn merge_from(&mut self, input: &mut crate::io::CodedInput) -> crate::io::InputResult<()> {
        while let ::std::option::Option::Some(tag) = input.read_tag()? {
            match tag.get() {
                9 => self.value = input.read_double()?,
                tag => self.unknown_fields.merge_from(tag, input)?
            }
        }
        ::std::result::Result::Ok(())
    }
    fn calculate_size(&self) -> ::std::option::Option<i32> {
        let mut size = 0i32;
        let value = self.value;
        if value != Self::VALUE_DEFAULT_VALUE {
            size = size.checked_add(1)?;
            size = size.checked_add(crate::io::sizes::double(value))?;
        }
        size = size.checked_add(self.unknown_fields.calculate_size()?)?;
        ::std::option::Option::Some(size)
    }
    fn write_to(&self, output: &mut crate::io::CodedOutput) -> crate::io::OutputResult {
        let value = self.value;
        if value != Self::VALUE_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[9])?;
            output.write_double(value)?;
        }
        self.unknown_fields.write_to(output)?;
        ::std::result::Result::Ok(())
    }
}
impl crate::LiteMessage for self::DoubleValue {
    fn new() -> Self {
        Self {
            value: Self::VALUE_DEFAULT_VALUE,
            unknown_fields: crate::UnknownFieldSet::new()
        }
    }
}
impl ::std::clone::Clone for self::DoubleValue {
    fn clone(&self) -> Self {
        Self {
            value: self.value.clone(),
            unknown_fields: self.unknown_fields.clone()
        }
    }
    fn clone_from(&mut self, other: &Self) {
        self.value = other.value;
        self.unknown_fields.clone_from(&other.unknown_fields);
    }
}
impl crate::Message for self::DoubleValue {
    fn descriptor() -> &'static crate::reflect::MessageDescriptor {
        &self::file().messages()[0]
    }
}
impl self::DoubleValue {
    /// Gets the field number of the 'value' field
    pub const VALUE_FIELD_NUMBER: i32 = 1;
    pub const VALUE_DEFAULT_VALUE: f64 = 0.0;
}
#[derive(Debug, PartialEq)]
pub struct FloatValue {
    pub value: f32,
    unknown_fields: crate::UnknownFieldSet
}
impl crate::CodedMessage for self::FloatValue {
    fn merge_from(&mut self, input: &mut crate::io::CodedInput) -> crate::io::InputResult<()> {
        while let ::std::option::Option::Some(tag) = input.read_tag()? {
            match tag.get() {
                13 => self.value = input.read_float()?,
                tag => self.unknown_fields.merge_from(tag, input)?
            }
        }
        ::std::result::Result::Ok(())
    }
    fn calculate_size(&self) -> ::std::option::Option<i32> {
        let mut size = 0i32;
        let value = self.value;
        if value != Self::VALUE_DEFAULT_VALUE {
            size = size.checked_add(1)?;
            size = size.checked_add(crate::io::sizes::float(value))?;
        }
        size = size.checked_add(self.unknown_fields.calculate_size()?)?;
        ::std::option::Option::Some(size)
    }
    fn write_to(&self, output: &mut crate::io::CodedOutput) -> crate::io::OutputResult {
        let value = self.value;
        if value != Self::VALUE_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[13])?;
            output.write_float(value)?;
        }
        self.unknown_fields.write_to(output)?;
        ::std::result::Result::Ok(())
    }
}
impl crate::LiteMessage for self::FloatValue {
    fn new() -> Self {
        Self {
            value: Self::VALUE_DEFAULT_VALUE,
            unknown_fields: crate::UnknownFieldSet::new()
        }
    }
}
impl ::std::clone::Clone for self::FloatValue {
    fn clone(&self) -> Self {
        Self {
            value: self.value.clone(),
            unknown_fields: self.unknown_fields.clone()
        }
    }
    fn clone_from(&mut self, other: &Self) {
        self.value = other.value;
        self.unknown_fields.clone_from(&other.unknown_fields);
    }
}
impl crate::Message for self::FloatValue {
    fn descriptor() -> &'static crate::reflect::MessageDescriptor {
        &self::file().messages()[1]
    }
}
impl self::FloatValue {
    /// Gets the field number of the 'value' field
    pub const VALUE_FIELD_NUMBER: i32 = 1;
    pub const VALUE_DEFAULT_VALUE: f32 = 0.0;
}
#[derive(Debug, PartialEq)]
pub struct Int64Value {
    pub value: i64,
    unknown_fields: crate::UnknownFieldSet
}
impl crate::CodedMessage for self::Int64Value {
    fn merge_from(&mut self, input: &mut crate::io::CodedInput) -> crate::io::InputResult<()> {
        while let ::std::option::Option::Some(tag) = input.read_tag()? {
            match tag.get() {
                8 => self.value = input.read_int64()?,
                tag => self.unknown_fields.merge_from(tag, input)?
            }
        }
        ::std::result::Result::Ok(())
    }
    fn calculate_size(&self) -> ::std::option::Option<i32> {
        let mut size = 0i32;
        let value = self.value;
        if value != Self::VALUE_DEFAULT_VALUE {
            size = size.checked_add(1)?;
            size = size.checked_add(crate::io::sizes::int64(value))?;
        }
        size = size.checked_add(self.unknown_fields.calculate_size()?)?;
        ::std::option::Option::Some(size)
    }
    fn write_to(&self, output: &mut crate::io::CodedOutput) -> crate::io::OutputResult {
        let value = self.value;
        if value != Self::VALUE_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[8])?;
            output.write_int64(value)?;
        }
        self.unknown_fields.write_to(output)?;
        ::std::result::Result::Ok(())
    }
}
impl crate::LiteMessage for self::Int64Value {
    fn new() -> Self {
        Self {
            value: Self::VALUE_DEFAULT_VALUE,
            unknown_fields: crate::UnknownFieldSet::new()
        }
    }
}
impl ::std::clone::Clone for self::Int64Value {
    fn clone(&self) -> Self {
        Self {
            value: self.value.clone(),
            unknown_fields: self.unknown_fields.clone()
        }
    }
    fn clone_from(&mut self, other: &Self) {
        self.value = other.value;
        self.unknown_fields.clone_from(&other.unknown_fields);
    }
}
impl crate::Message for self::Int64Value {
    fn descriptor() -> &'static crate::reflect::MessageDescriptor {
        &self::file().messages()[2]
    }
}
impl self::Int64Value {
    /// Gets the field number of the 'value' field
    pub const VALUE_FIELD_NUMBER: i32 = 1;
    pub const VALUE_DEFAULT_VALUE: i64 = 0;
}
#[derive(Debug, PartialEq)]
pub struct UInt64Value {
    pub value: u64,
    unknown_fields: crate::UnknownFieldSet
}
impl crate::CodedMessage for self::UInt64Value {
    fn merge_from(&mut self, input: &mut crate::io::CodedInput) -> crate::io::InputResult<()> {
        while let ::std::option::Option::Some(tag) = input.read_tag()? {
            match tag.get() {
                8 => self.value = input.read_uint64()?,
                tag => self.unknown_fields.merge_from(tag, input)?
            }
        }
        ::std::result::Result::Ok(())
    }
    fn calculate_size(&self) -> ::std::option::Option<i32> {
        let mut size = 0i32;
        let value = self.value;
        if value != Self::VALUE_DEFAULT_VALUE {
            size = size.checked_add(1)?;
            size = size.checked_add(crate::io::sizes::uint64(value))?;
        }
        size = size.checked_add(self.unknown_fields.calculate_size()?)?;
        ::std::option::Option::Some(size)
    }
    fn write_to(&self, output: &mut crate::io::CodedOutput) -> crate::io::OutputResult {
        let value = self.value;
        if value != Self::VALUE_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[8])?;
            output.write_uint64(value)?;
        }
        self.unknown_fields.write_to(output)?;
        ::std::result::Result::Ok(())
    }
}
impl crate::LiteMessage for self::UInt64Value {
    fn new() -> Self {
        Self {
            value: Self::VALUE_DEFAULT_VALUE,
            unknown_fields: crate::UnknownFieldSet::new()
        }
    }
}
impl ::std::clone::Clone for self::UInt64Value {
    fn clone(&self) -> Self {
        Self {
            value: self.value.clone(),
            unknown_fields: self.unknown_fields.clone()
        }
    }
    fn clone_from(&mut self, other: &Self) {
        self.value = other.value;
        self.unknown_fields.clone_from(&other.unknown_fields);
    }
}
impl crate::Message for self::UInt64Value {
    fn descriptor() -> &'static crate::reflect::MessageDescriptor {
        &self::file().messages()[3]
    }
}
impl self::UInt64Value {
    /// Gets the field number of the 'value' field
    pub const VALUE_FIELD_NUMBER: i32 = 1;
    pub const VALUE_DEFAULT_VALUE: u64 = 0;
}
#[derive(Debug, PartialEq)]
pub struct Int32Value {
    pub value: i32,
    unknown_fields: crate::UnknownFieldSet
}
impl crate::CodedMessage for self::Int32Value {
    fn merge_from(&mut self, input: &mut crate::io::CodedInput) -> crate::io::InputResult<()> {
        while let ::std::option::Option::Some(tag) = input.read_tag()? {
            match tag.get() {
                8 => self.value = input.read_int32()?,
                tag => self.unknown_fields.merge_from(tag, input)?
            }
        }
        ::std::result::Result::Ok(())
    }
    fn calculate_size(&self) -> ::std::option::Option<i32> {
        let mut size = 0i32;
        let value = self.value;
        if value != Self::VALUE_DEFAULT_VALUE {
            size = size.checked_add(1)?;
            size = size.checked_add(crate::io::sizes::int32(value))?;
        }
        size = size.checked_add(self.unknown_fields.calculate_size()?)?;
        ::std::option::Option::Some(size)
    }
    fn write_to(&self, output: &mut crate::io::CodedOutput) -> crate::io::OutputResult {
        let value = self.value;
        if value != Self::VALUE_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[8])?;
            output.write_int32(value)?;
        }
        self.unknown_fields.write_to(output)?;
        ::std::result::Result::Ok(())
    }
}
impl crate::LiteMessage for self::Int32Value {
    fn new() -> Self {
        Self {
            value: Self::VALUE_DEFAULT_VALUE,
            unknown_fields: crate::UnknownFieldSet::new()
        }
    }
}
impl ::std::clone::Clone for self::Int32Value {
    fn clone(&self) -> Self {
        Self {
            value: self.value.clone(),
            unknown_fields: self.unknown_fields.clone()
        }
    }
    fn clone_from(&mut self, other: &Self) {
        self.value = other.value;
        self.unknown_fields.clone_from(&other.unknown_fields);
    }
}
impl crate::Message for self::Int32Value {
    fn descriptor() -> &'static crate::reflect::MessageDescriptor {
        &self::file().messages()[4]
    }
}
impl self::Int32Value {
    /// Gets the field number of the 'value' field
    pub const VALUE_FIELD_NUMBER: i32 = 1;
    pub const VALUE_DEFAULT_VALUE: i32 = 0;
}
#[derive(Debug, PartialEq)]
pub struct UInt32Value {
    pub value: u32,
    unknown_fields: crate::UnknownFieldSet
}
impl crate::CodedMessage for self::UInt32Value {
    fn merge_from(&mut self, input: &mut crate::io::CodedInput) -> crate::io::InputResult<()> {
        while let ::std::option::Option::Some(tag) = input.read_tag()? {
            match tag.get() {
                8 => self.value = input.read_uint32()?,
                tag => self.unknown_fields.merge_from(tag, input)?
            }
        }
        ::std::result::Result::Ok(())
    }
    fn calculate_size(&self) -> ::std::option::Option<i32> {
        let mut size = 0i32;
        let value = self.value;
        if value != Self::VALUE_DEFAULT_VALUE {
            size = size.checked_add(1)?;
            size = size.checked_add(crate::io::sizes::uint32(value))?;
        }
        size = size.checked_add(self.unknown_fields.calculate_size()?)?;
        ::std::option::Option::Some(size)
    }
    fn write_to(&self, output: &mut crate::io::CodedOutput) -> crate::io::OutputResult {
        let value = self.value;
        if value != Self::VALUE_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[8])?;
            output.write_uint32(value)?;
        }
        self.unknown_fields.write_to(output)?;
        ::std::result::Result::Ok(())
    }
}
impl crate::LiteMessage for self::UInt32Value {
    fn new() -> Self {
        Self {
            value: Self::VALUE_DEFAULT_VALUE,
            unknown_fields: crate::UnknownFieldSet::new()
        }
    }
}
impl ::std::clone::Clone for self::UInt32Value {
    fn clone(&self) -> Self {
        Self {
            value: self.value.clone(),
            unknown_fields: self.unknown_fields.clone()
        }
    }
    fn clone_from(&mut self, other: &Self) {
        self.value = other.value;
        self.unknown_fields.clone_from(&other.unknown_fields);
    }
}
impl crate::Message for self::UInt32Value {
    fn descriptor() -> &'static crate::reflect::MessageDescriptor {
        &self::file().messages()[5]
    }
}
impl self::UInt32Value {
    /// Gets the field number of the 'value' field
    pub const VALUE_FIELD_NUMBER: i32 = 1;
    pub const VALUE_DEFAULT_VALUE: u32 = 0;
}
#[derive(Debug, PartialEq)]
pub struct BoolValue {
    pub value: bool,
    unknown_fields: crate::UnknownFieldSet
}
impl crate::CodedMessage for self::BoolValue {
    fn merge_from(&mut self, input: &mut crate::io::CodedInput) -> crate::io::InputResult<()> {
        while let ::std::option::Option::Some(tag) = input.read_tag()? {
            match tag.get() {
                8 => self.value = input.read_bool()?,
                tag => self.unknown_fields.merge_from(tag, input)?
            }
        }
        ::std::result::Result::Ok(())
    }
    fn calculate_size(&self) -> ::std::option::Option<i32> {
        let mut size = 0i32;
        let value = self.value;
        if value != Self::VALUE_DEFAULT_VALUE {
            size = size.checked_add(1)?;
            size = size.checked_add(crate::io::sizes::bool(value))?;
        }
        size = size.checked_add(self.unknown_fields.calculate_size()?)?;
        ::std::option::Option::Some(size)
    }
    fn write_to(&self, output: &mut crate::io::CodedOutput) -> crate::io::OutputResult {
        let value = self.value;
        if value != Self::VALUE_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[8])?;
            output.write_bool(value)?;
        }
        self.unknown_fields.write_to(output)?;
        ::std::result::Result::Ok(())
    }
}
impl crate::LiteMessage for self::BoolValue {
    fn new() -> Self {
        Self {
            value: Self::VALUE_DEFAULT_VALUE,
            unknown_fields: crate::UnknownFieldSet::new()
        }
    }
}
impl ::std::clone::Clone for self::BoolValue {
    fn clone(&self) -> Self {
        Self {
            value: self.value.clone(),
            unknown_fields: self.unknown_fields.clone()
        }
    }
    fn clone_from(&mut self, other: &Self) {
        self.value = other.value;
        self.unknown_fields.clone_from(&other.unknown_fields);
    }
}
impl crate::Message for self::BoolValue {
    fn descriptor() -> &'static crate::reflect::MessageDescriptor {
        &self::file().messages()[6]
    }
}
impl self::BoolValue {
    /// Gets the field number of the 'value' field
    pub const VALUE_FIELD_NUMBER: i32 = 1;
    pub const VALUE_DEFAULT_VALUE: bool = false;
}
#[derive(Debug, PartialEq)]
pub struct StringValue {
    pub value: ::std::string::String,
    unknown_fields: crate::UnknownFieldSet
}
impl crate::CodedMessage for self::StringValue {
    fn merge_from(&mut self, input: &mut crate::io::CodedInput) -> crate::io::InputResult<()> {
        while let ::std::option::Option::Some(tag) = input.read_tag()? {
            match tag.get() {
                10 => self.value = input.read_string()?,
                tag => self.unknown_fields.merge_from(tag, input)?
            }
        }
        ::std::result::Result::Ok(())
    }
    fn calculate_size(&self) -> ::std::option::Option<i32> {
        let mut size = 0i32;
        let value = &self.value;
        if value != Self::VALUE_DEFAULT_VALUE {
            size = size.checked_add(1)?;
            size = size.checked_add(crate::io::sizes::string(value)?)?;
        }
        size = size.checked_add(self.unknown_fields.calculate_size()?)?;
        ::std::option::Option::Some(size)
    }
    fn write_to(&self, output: &mut crate::io::CodedOutput) -> crate::io::OutputResult {
        let value = &self.value;
        if value != Self::VALUE_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[10])?;
            output.write_string(value)?;
        }
        self.unknown_fields.write_to(output)?;
        ::std::result::Result::Ok(())
    }
}
impl crate::LiteMessage for self::StringValue {
    fn new() -> Self {
        Self {
            value: ::std::string::String::new(),
            unknown_fields: crate::UnknownFieldSet::new()
        }
    }
}
impl ::std::clone::Clone for self::StringValue {
    fn clone(&self) -> Self {
        Self {
            value: self.value.clone(),
            unknown_fields: self.unknown_fields.clone()
        }
    }
    fn clone_from(&mut self, other: &Self) {
        self.value = other.value.clone();
        self.unknown_fields.clone_from(&other.unknown_fields);
    }
}
impl crate::Message for self::StringValue {
    fn descriptor() -> &'static crate::reflect::MessageDescriptor {
        &self::file().messages()[7]
    }
}
impl self::StringValue {
    /// Gets the field number of the 'value' field
    pub const VALUE_FIELD_NUMBER: i32 = 1;
    pub const VALUE_DEFAULT_VALUE: &'static str = "";
}
#[derive(Debug, PartialEq)]
pub struct BytesValue {
    pub value: ::std::vec::Vec<u8>,
    unknown_fields: crate::UnknownFieldSet
}
impl crate::CodedMessage for self::BytesValue {
    fn merge_from(&mut self, input: &mut crate::io::CodedInput) -> crate::io::InputResult<()> {
        while let ::std::option::Option::Some(tag) = input.read_tag()? {
            match tag.get() {
                10 => self.value = input.read_bytes()?,
                tag => self.unknown_fields.merge_from(tag, input)?
            }
        }
        ::std::result::Result::Ok(())
    }
    fn calculate_size(&self) -> ::std::option::Option<i32> {
        let mut size = 0i32;
        let value = &self.value;
        if value.as_slice() != Self::VALUE_DEFAULT_VALUE {
            size = size.checked_add(1)?;
            size = size.checked_add(crate::io::sizes::bytes(value)?)?;
        }
        size = size.checked_add(self.unknown_fields.calculate_size()?)?;
        ::std::option::Option::Some(size)
    }
    fn write_to(&self, output: &mut crate::io::CodedOutput) -> crate::io::OutputResult {
        let value = &self.value;
        if value.as_slice() != Self::VALUE_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[10])?;
            output.write_bytes(value)?;
        }
        self.unknown_fields.write_to(output)?;
        ::std::result::Result::Ok(())
    }
}
impl crate::LiteMessage for self::BytesValue {
    fn new() -> Self {
        Self {
            value: ::std::vec::Vec::new(),
            unknown_fields: crate::UnknownFieldSet::new()
        }
    }
}
impl ::std::clone::Clone for self::BytesValue {
    fn clone(&self) -> Self {
        Self {
            value: self.value.clone(),
            unknown_fields: self.unknown_fields.clone()
        }
    }
    fn clone_from(&mut self, other: &Self) {
        self.value = other.value.clone();
        self.unknown_fields.clone_from(&other.unknown_fields);
    }
}
impl crate::Message for self::BytesValue {
    fn descriptor() -> &'static crate::reflect::MessageDescriptor {
        &self::file().messages()[8]
    }
}
impl self::BytesValue {
    /// Gets the field number of the 'value' field
    pub const VALUE_FIELD_NUMBER: i32 = 1;
    pub const VALUE_DEFAULT_VALUE: &'static [u8] = &[];
}