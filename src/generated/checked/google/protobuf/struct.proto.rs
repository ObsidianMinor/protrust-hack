//! DO NOT EDIT!
//! Generated by protoc-gen-rust, part of the protrust crate.
//!
//! Source: google/protobuf/struct.proto

static FILE_ONCE: ::std::sync::Once = ::std::sync::Once::new();
static mut FILE_POOL: ::std::option::Option<crate::reflect::DescriptorPool<'static>> = ::std::option::Option::None;
static mut FILE_PROTO: ::std::option::Option<[crate::descriptor::FileDescriptorProto; 1]> = ::std::option::Option::None;
static mut FILE_DESCRIPTOR: ::std::option::Option<&'static crate::reflect::FileDescriptor> = ::std::option::Option::None;
static mut FILE_DEPS: ::std::option::Option<[&'static crate::reflect::DescriptorPool<'static>; 0]> = ::std::option::Option::None;

fn file_once_init() {
    unsafe {
        FILE_PROTO = ::std::option::Option::Some([crate::LiteMessage::read_new(&mut [
            10, 28, 103, 111, 111, 103, 108, 101, 47, 112, 114, 111, 116, 111, 98, 117, 102, 47, 115, 116, 
            114, 117, 99, 116, 46, 112, 114, 111, 116, 111, 18, 15, 103, 111, 111, 103, 108, 101, 46, 112, 
            114, 111, 116, 111, 98, 117, 102, 34, 152, 1, 10, 6, 83, 116, 114, 117, 99, 116, 18, 59, 
            10, 6, 102, 105, 101, 108, 100, 115, 24, 1, 32, 3, 40, 11, 50, 35, 46, 103, 111, 111, 
            103, 108, 101, 46, 112, 114, 111, 116, 111, 98, 117, 102, 46, 83, 116, 114, 117, 99, 116, 46, 
            70, 105, 101, 108, 100, 115, 69, 110, 116, 114, 121, 82, 6, 102, 105, 101, 108, 100, 115, 26, 
            81, 10, 11, 70, 105, 101, 108, 100, 115, 69, 110, 116, 114, 121, 18, 16, 10, 3, 107, 101, 
            121, 24, 1, 32, 1, 40, 9, 82, 3, 107, 101, 121, 18, 44, 10, 5, 118, 97, 108, 117, 
            101, 24, 2, 32, 1, 40, 11, 50, 22, 46, 103, 111, 111, 103, 108, 101, 46, 112, 114, 111, 
            116, 111, 98, 117, 102, 46, 86, 97, 108, 117, 101, 82, 5, 118, 97, 108, 117, 101, 58, 2, 
            56, 1, 34, 166, 2, 10, 5, 86, 97, 108, 117, 101, 18, 57, 10, 10, 110, 117, 108, 108, 
            95, 118, 97, 108, 117, 101, 24, 1, 32, 1, 40, 14, 50, 26, 46, 103, 111, 111, 103, 108, 
            101, 46, 112, 114, 111, 116, 111, 98, 117, 102, 46, 78, 117, 108, 108, 86, 97, 108, 117, 101, 
            82, 9, 110, 117, 108, 108, 86, 97, 108, 117, 101, 18, 33, 10, 12, 110, 117, 109, 98, 101, 
            114, 95, 118, 97, 108, 117, 101, 24, 2, 32, 1, 40, 1, 82, 11, 110, 117, 109, 98, 101, 
            114, 86, 97, 108, 117, 101, 18, 33, 10, 12, 115, 116, 114, 105, 110, 103, 95, 118, 97, 108, 
            117, 101, 24, 3, 32, 1, 40, 9, 82, 11, 115, 116, 114, 105, 110, 103, 86, 97, 108, 117, 
            101, 18, 29, 10, 10, 98, 111, 111, 108, 95, 118, 97, 108, 117, 101, 24, 4, 32, 1, 40, 
            8, 82, 9, 98, 111, 111, 108, 86, 97, 108, 117, 101, 18, 58, 10, 12, 115, 116, 114, 117, 
            99, 116, 95, 118, 97, 108, 117, 101, 24, 5, 32, 1, 40, 11, 50, 23, 46, 103, 111, 111, 
            103, 108, 101, 46, 112, 114, 111, 116, 111, 98, 117, 102, 46, 83, 116, 114, 117, 99, 116, 82, 
            11, 115, 116, 114, 117, 99, 116, 86, 97, 108, 117, 101, 18, 57, 10, 10, 108, 105, 115, 116, 
            95, 118, 97, 108, 117, 101, 24, 6, 32, 1, 40, 11, 50, 26, 46, 103, 111, 111, 103, 108, 
            101, 46, 112, 114, 111, 116, 111, 98, 117, 102, 46, 76, 105, 115, 116, 86, 97, 108, 117, 101, 
            82, 9, 108, 105, 115, 116, 86, 97, 108, 117, 101, 66, 6, 10, 4, 107, 105, 110, 100, 34, 
            59, 10, 9, 76, 105, 115, 116, 86, 97, 108, 117, 101, 18, 46, 10, 6, 118, 97, 108, 117, 
            101, 115, 24, 1, 32, 3, 40, 11, 50, 22, 46, 103, 111, 111, 103, 108, 101, 46, 112, 114, 
            111, 116, 111, 98, 117, 102, 46, 86, 97, 108, 117, 101, 82, 6, 118, 97, 108, 117, 101, 115, 
            42, 25, 10, 9, 78, 117, 108, 108, 86, 97, 108, 117, 101, 18, 12, 10, 10, 78, 85, 76, 
            76, 95, 86, 65, 76, 85, 69, 66, 129, 1, 10, 19, 99, 111, 109, 46, 103, 111, 111, 103, 
            108, 101, 46, 112, 114, 111, 116, 111, 98, 117, 102, 66, 11, 83, 116, 114, 117, 99, 116, 80, 
            114, 111, 116, 111, 80, 1, 90, 49, 103, 105, 116, 104, 117, 98, 46, 99, 111, 109, 47, 103, 
            111, 108, 97, 110, 103, 47, 112, 114, 111, 116, 111, 98, 117, 102, 47, 112, 116, 121, 112, 101, 
            115, 47, 115, 116, 114, 117, 99, 116, 59, 115, 116, 114, 117, 99, 116, 112, 98, 248, 1, 1, 
            162, 2, 3, 71, 80, 66, 170, 2, 30, 71, 111, 111, 103, 108, 101, 46, 80, 114, 111, 116, 
            111, 98, 117, 102, 46, 87, 101, 108, 108, 75, 110, 111, 119, 110, 84, 121, 112, 101, 115, 74, 
            168, 29, 10, 6, 18, 4, 30, 0, 95, 1, 10, 204, 12, 10, 1, 12, 18, 3, 30, 0, 
            18, 50, 193, 12, 32, 80, 114, 111, 116, 111, 99, 111, 108, 32, 66, 117, 102, 102, 101, 114, 
            115, 32, 45, 32, 71, 111, 111, 103, 108, 101, 39, 115, 32, 100, 97, 116, 97, 32, 105, 110, 
            116, 101, 114, 99, 104, 97, 110, 103, 101, 32, 102, 111, 114, 109, 97, 116, 10, 32, 67, 111, 
            112, 121, 114, 105, 103, 104, 116, 32, 50, 48, 48, 56, 32, 71, 111, 111, 103, 108, 101, 32, 
            73, 110, 99, 46, 32, 32, 65, 108, 108, 32, 114, 105, 103, 104, 116, 115, 32, 114, 101, 115, 
            101, 114, 118, 101, 100, 46, 10, 32, 104, 116, 116, 112, 115, 58, 47, 47, 100, 101, 118, 101, 
            108, 111, 112, 101, 114, 115, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 47, 112, 114, 
            111, 116, 111, 99, 111, 108, 45, 98, 117, 102, 102, 101, 114, 115, 47, 10, 10, 32, 82, 101, 
            100, 105, 115, 116, 114, 105, 98, 117, 116, 105, 111, 110, 32, 97, 110, 100, 32, 117, 115, 101, 
            32, 105, 110, 32, 115, 111, 117, 114, 99, 101, 32, 97, 110, 100, 32, 98, 105, 110, 97, 114, 
            121, 32, 102, 111, 114, 109, 115, 44, 32, 119, 105, 116, 104, 32, 111, 114, 32, 119, 105, 116, 
            104, 111, 117, 116, 10, 32, 109, 111, 100, 105, 102, 105, 99, 97, 116, 105, 111, 110, 44, 32, 
            97, 114, 101, 32, 112, 101, 114, 109, 105, 116, 116, 101, 100, 32, 112, 114, 111, 118, 105, 100, 
            101, 100, 32, 116, 104, 97, 116, 32, 116, 104, 101, 32, 102, 111, 108, 108, 111, 119, 105, 110, 
            103, 32, 99, 111, 110, 100, 105, 116, 105, 111, 110, 115, 32, 97, 114, 101, 10, 32, 109, 101, 
            116, 58, 10, 10, 32, 32, 32, 32, 32, 42, 32, 82, 101, 100, 105, 115, 116, 114, 105, 98, 
            117, 116, 105, 111, 110, 115, 32, 111, 102, 32, 115, 111, 117, 114, 99, 101, 32, 99, 111, 100, 
            101, 32, 109, 117, 115, 116, 32, 114, 101, 116, 97, 105, 110, 32, 116, 104, 101, 32, 97, 98, 
            111, 118, 101, 32, 99, 111, 112, 121, 114, 105, 103, 104, 116, 10, 32, 110, 111, 116, 105, 99, 
            101, 44, 32, 116, 104, 105, 115, 32, 108, 105, 115, 116, 32, 111, 102, 32, 99, 111, 110, 100, 
            105, 116, 105, 111, 110, 115, 32, 97, 110, 100, 32, 116, 104, 101, 32, 102, 111, 108, 108, 111, 
            119, 105, 110, 103, 32, 100, 105, 115, 99, 108, 97, 105, 109, 101, 114, 46, 10, 32, 32, 32, 
            32, 32, 42, 32, 82, 101, 100, 105, 115, 116, 114, 105, 98, 117, 116, 105, 111, 110, 115, 32, 
            105, 110, 32, 98, 105, 110, 97, 114, 121, 32, 102, 111, 114, 109, 32, 109, 117, 115, 116, 32, 
            114, 101, 112, 114, 111, 100, 117, 99, 101, 32, 116, 104, 101, 32, 97, 98, 111, 118, 101, 10, 
            32, 99, 111, 112, 121, 114, 105, 103, 104, 116, 32, 110, 111, 116, 105, 99, 101, 44, 32, 116, 
            104, 105, 115, 32, 108, 105, 115, 116, 32, 111, 102, 32, 99, 111, 110, 100, 105, 116, 105, 111, 
            110, 115, 32, 97, 110, 100, 32, 116, 104, 101, 32, 102, 111, 108, 108, 111, 119, 105, 110, 103, 
            32, 100, 105, 115, 99, 108, 97, 105, 109, 101, 114, 10, 32, 105, 110, 32, 116, 104, 101, 32, 
            100, 111, 99, 117, 109, 101, 110, 116, 97, 116, 105, 111, 110, 32, 97, 110, 100, 47, 111, 114, 
            32, 111, 116, 104, 101, 114, 32, 109, 97, 116, 101, 114, 105, 97, 108, 115, 32, 112, 114, 111, 
            118, 105, 100, 101, 100, 32, 119, 105, 116, 104, 32, 116, 104, 101, 10, 32, 100, 105, 115, 116, 
            114, 105, 98, 117, 116, 105, 111, 110, 46, 10, 32, 32, 32, 32, 32, 42, 32, 78, 101, 105, 
            116, 104, 101, 114, 32, 116, 104, 101, 32, 110, 97, 109, 101, 32, 111, 102, 32, 71, 111, 111, 
            103, 108, 101, 32, 73, 110, 99, 46, 32, 110, 111, 114, 32, 116, 104, 101, 32, 110, 97, 109, 
            101, 115, 32, 111, 102, 32, 105, 116, 115, 10, 32, 99, 111, 110, 116, 114, 105, 98, 117, 116, 
            111, 114, 115, 32, 109, 97, 121, 32, 98, 101, 32, 117, 115, 101, 100, 32, 116, 111, 32, 101, 
            110, 100, 111, 114, 115, 101, 32, 111, 114, 32, 112, 114, 111, 109, 111, 116, 101, 32, 112, 114, 
            111, 100, 117, 99, 116, 115, 32, 100, 101, 114, 105, 118, 101, 100, 32, 102, 114, 111, 109, 10, 
            32, 116, 104, 105, 115, 32, 115, 111, 102, 116, 119, 97, 114, 101, 32, 119, 105, 116, 104, 111, 
            117, 116, 32, 115, 112, 101, 99, 105, 102, 105, 99, 32, 112, 114, 105, 111, 114, 32, 119, 114, 
            105, 116, 116, 101, 110, 32, 112, 101, 114, 109, 105, 115, 115, 105, 111, 110, 46, 10, 10, 32, 
            84, 72, 73, 83, 32, 83, 79, 70, 84, 87, 65, 82, 69, 32, 73, 83, 32, 80, 82, 79, 
            86, 73, 68, 69, 68, 32, 66, 89, 32, 84, 72, 69, 32, 67, 79, 80, 89, 82, 73, 71, 
            72, 84, 32, 72, 79, 76, 68, 69, 82, 83, 32, 65, 78, 68, 32, 67, 79, 78, 84, 82, 
            73, 66, 85, 84, 79, 82, 83, 10, 32, 34, 65, 83, 32, 73, 83, 34, 32, 65, 78, 68, 
            32, 65, 78, 89, 32, 69, 88, 80, 82, 69, 83, 83, 32, 79, 82, 32, 73, 77, 80, 76, 
            73, 69, 68, 32, 87, 65, 82, 82, 65, 78, 84, 73, 69, 83, 44, 32, 73, 78, 67, 76, 
            85, 68, 73, 78, 71, 44, 32, 66, 85, 84, 32, 78, 79, 84, 10, 32, 76, 73, 77, 73, 
            84, 69, 68, 32, 84, 79, 44, 32, 84, 72, 69, 32, 73, 77, 80, 76, 73, 69, 68, 32, 
            87, 65, 82, 82, 65, 78, 84, 73, 69, 83, 32, 79, 70, 32, 77, 69, 82, 67, 72, 65, 
            78, 84, 65, 66, 73, 76, 73, 84, 89, 32, 65, 78, 68, 32, 70, 73, 84, 78, 69, 83, 
            83, 32, 70, 79, 82, 10, 32, 65, 32, 80, 65, 82, 84, 73, 67, 85, 76, 65, 82, 32, 
            80, 85, 82, 80, 79, 83, 69, 32, 65, 82, 69, 32, 68, 73, 83, 67, 76, 65, 73, 77, 
            69, 68, 46, 32, 73, 78, 32, 78, 79, 32, 69, 86, 69, 78, 84, 32, 83, 72, 65, 76, 
            76, 32, 84, 72, 69, 32, 67, 79, 80, 89, 82, 73, 71, 72, 84, 10, 32, 79, 87, 78, 
            69, 82, 32, 79, 82, 32, 67, 79, 78, 84, 82, 73, 66, 85, 84, 79, 82, 83, 32, 66, 
            69, 32, 76, 73, 65, 66, 76, 69, 32, 70, 79, 82, 32, 65, 78, 89, 32, 68, 73, 82, 
            69, 67, 84, 44, 32, 73, 78, 68, 73, 82, 69, 67, 84, 44, 32, 73, 78, 67, 73, 68, 
            69, 78, 84, 65, 76, 44, 10, 32, 83, 80, 69, 67, 73, 65, 76, 44, 32, 69, 88, 69, 
            77, 80, 76, 65, 82, 89, 44, 32, 79, 82, 32, 67, 79, 78, 83, 69, 81, 85, 69, 78, 
            84, 73, 65, 76, 32, 68, 65, 77, 65, 71, 69, 83, 32, 40, 73, 78, 67, 76, 85, 68, 
            73, 78, 71, 44, 32, 66, 85, 84, 32, 78, 79, 84, 10, 32, 76, 73, 77, 73, 84, 69, 
            68, 32, 84, 79, 44, 32, 80, 82, 79, 67, 85, 82, 69, 77, 69, 78, 84, 32, 79, 70, 
            32, 83, 85, 66, 83, 84, 73, 84, 85, 84, 69, 32, 71, 79, 79, 68, 83, 32, 79, 82, 
            32, 83, 69, 82, 86, 73, 67, 69, 83, 59, 32, 76, 79, 83, 83, 32, 79, 70, 32, 85, 
            83, 69, 44, 10, 32, 68, 65, 84, 65, 44, 32, 79, 82, 32, 80, 82, 79, 70, 73, 84, 
            83, 59, 32, 79, 82, 32, 66, 85, 83, 73, 78, 69, 83, 83, 32, 73, 78, 84, 69, 82, 
            82, 85, 80, 84, 73, 79, 78, 41, 32, 72, 79, 87, 69, 86, 69, 82, 32, 67, 65, 85, 
            83, 69, 68, 32, 65, 78, 68, 32, 79, 78, 32, 65, 78, 89, 10, 32, 84, 72, 69, 79, 
            82, 89, 32, 79, 70, 32, 76, 73, 65, 66, 73, 76, 73, 84, 89, 44, 32, 87, 72, 69, 
            84, 72, 69, 82, 32, 73, 78, 32, 67, 79, 78, 84, 82, 65, 67, 84, 44, 32, 83, 84, 
            82, 73, 67, 84, 32, 76, 73, 65, 66, 73, 76, 73, 84, 89, 44, 32, 79, 82, 32, 84, 
            79, 82, 84, 10, 32, 40, 73, 78, 67, 76, 85, 68, 73, 78, 71, 32, 78, 69, 71, 76, 
            73, 71, 69, 78, 67, 69, 32, 79, 82, 32, 79, 84, 72, 69, 82, 87, 73, 83, 69, 41, 
            32, 65, 82, 73, 83, 73, 78, 71, 32, 73, 78, 32, 65, 78, 89, 32, 87, 65, 89, 32, 
            79, 85, 84, 32, 79, 70, 32, 84, 72, 69, 32, 85, 83, 69, 10, 32, 79, 70, 32, 84, 
            72, 73, 83, 32, 83, 79, 70, 84, 87, 65, 82, 69, 44, 32, 69, 86, 69, 78, 32, 73, 
            70, 32, 65, 68, 86, 73, 83, 69, 68, 32, 79, 70, 32, 84, 72, 69, 32, 80, 79, 83, 
            83, 73, 66, 73, 76, 73, 84, 89, 32, 79, 70, 32, 83, 85, 67, 72, 32, 68, 65, 77, 
            65, 71, 69, 46, 10, 10, 8, 10, 1, 2, 18, 3, 32, 8, 23, 10, 8, 10, 1, 8, 
            18, 3, 34, 0, 59, 10, 9, 10, 2, 8, 37, 18, 3, 34, 0, 59, 10, 8, 10, 1, 
            8, 18, 3, 35, 0, 31, 10, 9, 10, 2, 8, 31, 18, 3, 35, 0, 31, 10, 8, 10, 
            1, 8, 18, 3, 36, 0, 72, 10, 9, 10, 2, 8, 11, 18, 3, 36, 0, 72, 10, 8, 
            10, 1, 8, 18, 3, 37, 0, 44, 10, 9, 10, 2, 8, 1, 18, 3, 37, 0, 44, 10, 
            8, 10, 1, 8, 18, 3, 38, 0, 44, 10, 9, 10, 2, 8, 8, 18, 3, 38, 0, 44, 
            10, 8, 10, 1, 8, 18, 3, 39, 0, 34, 10, 9, 10, 2, 8, 10, 18, 3, 39, 0, 
            34, 10, 8, 10, 1, 8, 18, 3, 40, 0, 33, 10, 9, 10, 2, 8, 36, 18, 3, 40, 
            0, 33, 10, 179, 3, 10, 2, 4, 0, 18, 4, 51, 0, 54, 1, 26, 166, 3, 32, 96, 
            83, 116, 114, 117, 99, 116, 96, 32, 114, 101, 112, 114, 101, 115, 101, 110, 116, 115, 32, 97, 
            32, 115, 116, 114, 117, 99, 116, 117, 114, 101, 100, 32, 100, 97, 116, 97, 32, 118, 97, 108, 
            117, 101, 44, 32, 99, 111, 110, 115, 105, 115, 116, 105, 110, 103, 32, 111, 102, 32, 102, 105, 
            101, 108, 100, 115, 10, 32, 119, 104, 105, 99, 104, 32, 109, 97, 112, 32, 116, 111, 32, 100, 
            121, 110, 97, 109, 105, 99, 97, 108, 108, 121, 32, 116, 121, 112, 101, 100, 32, 118, 97, 108, 
            117, 101, 115, 46, 32, 73, 110, 32, 115, 111, 109, 101, 32, 108, 97, 110, 103, 117, 97, 103, 
            101, 115, 44, 32, 96, 83, 116, 114, 117, 99, 116, 96, 10, 32, 109, 105, 103, 104, 116, 32, 
            98, 101, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 32, 98, 121, 32, 97, 32, 110, 97, 
            116, 105, 118, 101, 32, 114, 101, 112, 114, 101, 115, 101, 110, 116, 97, 116, 105, 111, 110, 46, 
            32, 70, 111, 114, 32, 101, 120, 97, 109, 112, 108, 101, 44, 32, 105, 110, 10, 32, 115, 99, 
            114, 105, 112, 116, 105, 110, 103, 32, 108, 97, 110, 103, 117, 97, 103, 101, 115, 32, 108, 105, 
            107, 101, 32, 74, 83, 32, 97, 32, 115, 116, 114, 117, 99, 116, 32, 105, 115, 32, 114, 101, 
            112, 114, 101, 115, 101, 110, 116, 101, 100, 32, 97, 115, 32, 97, 110, 10, 32, 111, 98, 106, 
            101, 99, 116, 46, 32, 84, 104, 101, 32, 100, 101, 116, 97, 105, 108, 115, 32, 111, 102, 32, 
            116, 104, 97, 116, 32, 114, 101, 112, 114, 101, 115, 101, 110, 116, 97, 116, 105, 111, 110, 32, 
            97, 114, 101, 32, 100, 101, 115, 99, 114, 105, 98, 101, 100, 32, 116, 111, 103, 101, 116, 104, 
            101, 114, 10, 32, 119, 105, 116, 104, 32, 116, 104, 101, 32, 112, 114, 111, 116, 111, 32, 115, 
            117, 112, 112, 111, 114, 116, 32, 102, 111, 114, 32, 116, 104, 101, 32, 108, 97, 110, 103, 117, 
            97, 103, 101, 46, 10, 10, 32, 84, 104, 101, 32, 74, 83, 79, 78, 32, 114, 101, 112, 114, 
            101, 115, 101, 110, 116, 97, 116, 105, 111, 110, 32, 102, 111, 114, 32, 96, 83, 116, 114, 117, 
            99, 116, 96, 32, 105, 115, 32, 74, 83, 79, 78, 32, 111, 98, 106, 101, 99, 116, 46, 10, 
            10, 10, 10, 3, 4, 0, 1, 18, 3, 51, 8, 14, 10, 57, 10, 4, 4, 0, 2, 0, 
            18, 3, 53, 2, 32, 26, 44, 32, 85, 110, 111, 114, 100, 101, 114, 101, 100, 32, 109, 97, 
            112, 32, 111, 102, 32, 100, 121, 110, 97, 109, 105, 99, 97, 108, 108, 121, 32, 116, 121, 112, 
            101, 100, 32, 118, 97, 108, 117, 101, 115, 46, 10, 10, 13, 10, 5, 4, 0, 2, 0, 4, 
            18, 4, 53, 2, 51, 16, 10, 12, 10, 5, 4, 0, 2, 0, 6, 18, 3, 53, 2, 20, 
            10, 12, 10, 5, 4, 0, 2, 0, 1, 18, 3, 53, 21, 27, 10, 12, 10, 5, 4, 0, 
            2, 0, 3, 18, 3, 53, 30, 31, 10, 195, 2, 10, 2, 4, 1, 18, 4, 62, 0, 78, 
            1, 26, 182, 2, 32, 96, 86, 97, 108, 117, 101, 96, 32, 114, 101, 112, 114, 101, 115, 101, 
            110, 116, 115, 32, 97, 32, 100, 121, 110, 97, 109, 105, 99, 97, 108, 108, 121, 32, 116, 121, 
            112, 101, 100, 32, 118, 97, 108, 117, 101, 32, 119, 104, 105, 99, 104, 32, 99, 97, 110, 32, 
            98, 101, 32, 101, 105, 116, 104, 101, 114, 10, 32, 110, 117, 108, 108, 44, 32, 97, 32, 110, 
            117, 109, 98, 101, 114, 44, 32, 97, 32, 115, 116, 114, 105, 110, 103, 44, 32, 97, 32, 98, 
            111, 111, 108, 101, 97, 110, 44, 32, 97, 32, 114, 101, 99, 117, 114, 115, 105, 118, 101, 32, 
            115, 116, 114, 117, 99, 116, 32, 118, 97, 108, 117, 101, 44, 32, 111, 114, 32, 97, 10, 32, 
            108, 105, 115, 116, 32, 111, 102, 32, 118, 97, 108, 117, 101, 115, 46, 32, 65, 32, 112, 114, 
            111, 100, 117, 99, 101, 114, 32, 111, 102, 32, 118, 97, 108, 117, 101, 32, 105, 115, 32, 101, 
            120, 112, 101, 99, 116, 101, 100, 32, 116, 111, 32, 115, 101, 116, 32, 111, 110, 101, 32, 111, 
            102, 32, 116, 104, 97, 116, 10, 32, 118, 97, 114, 105, 97, 110, 116, 115, 44, 32, 97, 98, 
            115, 101, 110, 99, 101, 32, 111, 102, 32, 97, 110, 121, 32, 118, 97, 114, 105, 97, 110, 116, 
            32, 105, 110, 100, 105, 99, 97, 116, 101, 115, 32, 97, 110, 32, 101, 114, 114, 111, 114, 46, 
            10, 10, 32, 84, 104, 101, 32, 74, 83, 79, 78, 32, 114, 101, 112, 114, 101, 115, 101, 110, 
            116, 97, 116, 105, 111, 110, 32, 102, 111, 114, 32, 96, 86, 97, 108, 117, 101, 96, 32, 105, 
            115, 32, 74, 83, 79, 78, 32, 118, 97, 108, 117, 101, 46, 10, 10, 10, 10, 3, 4, 1, 
            1, 18, 3, 62, 8, 13, 10, 34, 10, 4, 4, 1, 8, 0, 18, 4, 64, 2, 77, 3, 
            26, 20, 32, 84, 104, 101, 32, 107, 105, 110, 100, 32, 111, 102, 32, 118, 97, 108, 117, 101, 
            46, 10, 10, 12, 10, 5, 4, 1, 8, 0, 1, 18, 3, 64, 8, 12, 10, 39, 10, 4, 
            4, 1, 2, 0, 18, 3, 66, 4, 29, 26, 26, 32, 82, 101, 112, 114, 101, 115, 101, 110, 
            116, 115, 32, 97, 32, 110, 117, 108, 108, 32, 118, 97, 108, 117, 101, 46, 10, 10, 12, 10, 
            5, 4, 1, 2, 0, 6, 18, 3, 66, 4, 13, 10, 12, 10, 5, 4, 1, 2, 0, 1, 
            18, 3, 66, 14, 24, 10, 12, 10, 5, 4, 1, 2, 0, 3, 18, 3, 66, 27, 28, 10, 
            41, 10, 4, 4, 1, 2, 1, 18, 3, 68, 4, 28, 26, 28, 32, 82, 101, 112, 114, 101, 
            115, 101, 110, 116, 115, 32, 97, 32, 100, 111, 117, 98, 108, 101, 32, 118, 97, 108, 117, 101, 
            46, 10, 10, 12, 10, 5, 4, 1, 2, 1, 5, 18, 3, 68, 4, 10, 10, 12, 10, 5, 
            4, 1, 2, 1, 1, 18, 3, 68, 11, 23, 10, 12, 10, 5, 4, 1, 2, 1, 3, 18, 
            3, 68, 26, 27, 10, 41, 10, 4, 4, 1, 2, 2, 18, 3, 70, 4, 28, 26, 28, 32, 
            82, 101, 112, 114, 101, 115, 101, 110, 116, 115, 32, 97, 32, 115, 116, 114, 105, 110, 103, 32, 
            118, 97, 108, 117, 101, 46, 10, 10, 12, 10, 5, 4, 1, 2, 2, 5, 18, 3, 70, 4, 
            10, 10, 12, 10, 5, 4, 1, 2, 2, 1, 18, 3, 70, 11, 23, 10, 12, 10, 5, 4, 
            1, 2, 2, 3, 18, 3, 70, 26, 27, 10, 42, 10, 4, 4, 1, 2, 3, 18, 3, 72, 
            4, 24, 26, 29, 32, 82, 101, 112, 114, 101, 115, 101, 110, 116, 115, 32, 97, 32, 98, 111, 
            111, 108, 101, 97, 110, 32, 118, 97, 108, 117, 101, 46, 10, 10, 12, 10, 5, 4, 1, 2, 
            3, 5, 18, 3, 72, 4, 8, 10, 12, 10, 5, 4, 1, 2, 3, 1, 18, 3, 72, 9, 
            19, 10, 12, 10, 5, 4, 1, 2, 3, 3, 18, 3, 72, 22, 23, 10, 45, 10, 4, 4, 
            1, 2, 4, 18, 3, 74, 4, 28, 26, 32, 32, 82, 101, 112, 114, 101, 115, 101, 110, 116, 
            115, 32, 97, 32, 115, 116, 114, 117, 99, 116, 117, 114, 101, 100, 32, 118, 97, 108, 117, 101, 
            46, 10, 10, 12, 10, 5, 4, 1, 2, 4, 6, 18, 3, 74, 4, 10, 10, 12, 10, 5, 
            4, 1, 2, 4, 1, 18, 3, 74, 11, 23, 10, 12, 10, 5, 4, 1, 2, 4, 3, 18, 
            3, 74, 26, 27, 10, 45, 10, 4, 4, 1, 2, 5, 18, 3, 76, 4, 29, 26, 32, 32, 
            82, 101, 112, 114, 101, 115, 101, 110, 116, 115, 32, 97, 32, 114, 101, 112, 101, 97, 116, 101, 
            100, 32, 96, 86, 97, 108, 117, 101, 96, 46, 10, 10, 12, 10, 5, 4, 1, 2, 5, 6, 
            18, 3, 76, 4, 13, 10, 12, 10, 5, 4, 1, 2, 5, 1, 18, 3, 76, 14, 24, 10, 
            12, 10, 5, 4, 1, 2, 5, 3, 18, 3, 76, 27, 28, 10, 169, 1, 10, 2, 5, 0, 
            18, 4, 84, 0, 87, 1, 26, 156, 1, 32, 96, 78, 117, 108, 108, 86, 97, 108, 117, 101, 
            96, 32, 105, 115, 32, 97, 32, 115, 105, 110, 103, 108, 101, 116, 111, 110, 32, 101, 110, 117, 
            109, 101, 114, 97, 116, 105, 111, 110, 32, 116, 111, 32, 114, 101, 112, 114, 101, 115, 101, 110, 
            116, 32, 116, 104, 101, 32, 110, 117, 108, 108, 32, 118, 97, 108, 117, 101, 32, 102, 111, 114, 
            32, 116, 104, 101, 10, 32, 96, 86, 97, 108, 117, 101, 96, 32, 116, 121, 112, 101, 32, 117, 
            110, 105, 111, 110, 46, 10, 10, 32, 32, 84, 104, 101, 32, 74, 83, 79, 78, 32, 114, 101, 
            112, 114, 101, 115, 101, 110, 116, 97, 116, 105, 111, 110, 32, 102, 111, 114, 32, 96, 78, 117, 
            108, 108, 86, 97, 108, 117, 101, 96, 32, 105, 115, 32, 74, 83, 79, 78, 32, 96, 110, 117, 
            108, 108, 96, 46, 10, 10, 10, 10, 3, 5, 0, 1, 18, 3, 84, 5, 14, 10, 26, 10, 
            4, 5, 0, 2, 0, 18, 3, 86, 2, 17, 26, 13, 32, 78, 117, 108, 108, 32, 118, 97, 
            108, 117, 101, 46, 10, 10, 12, 10, 5, 5, 0, 2, 0, 1, 18, 3, 86, 2, 12, 10, 
            12, 10, 5, 5, 0, 2, 0, 2, 18, 3, 86, 15, 16, 10, 130, 1, 10, 2, 4, 2, 
            18, 4, 92, 0, 95, 1, 26, 118, 32, 96, 76, 105, 115, 116, 86, 97, 108, 117, 101, 96, 
            32, 105, 115, 32, 97, 32, 119, 114, 97, 112, 112, 101, 114, 32, 97, 114, 111, 117, 110, 100, 
            32, 97, 32, 114, 101, 112, 101, 97, 116, 101, 100, 32, 102, 105, 101, 108, 100, 32, 111, 102, 
            32, 118, 97, 108, 117, 101, 115, 46, 10, 10, 32, 84, 104, 101, 32, 74, 83, 79, 78, 32, 
            114, 101, 112, 114, 101, 115, 101, 110, 116, 97, 116, 105, 111, 110, 32, 102, 111, 114, 32, 96, 
            76, 105, 115, 116, 86, 97, 108, 117, 101, 96, 32, 105, 115, 32, 74, 83, 79, 78, 32, 97, 
            114, 114, 97, 121, 46, 10, 10, 10, 10, 3, 4, 2, 1, 18, 3, 92, 8, 17, 10, 58, 
            10, 4, 4, 2, 2, 0, 18, 3, 94, 2, 28, 26, 45, 32, 82, 101, 112, 101, 97, 116, 
            101, 100, 32, 102, 105, 101, 108, 100, 32, 111, 102, 32, 100, 121, 110, 97, 109, 105, 99, 97, 
            108, 108, 121, 32, 116, 121, 112, 101, 100, 32, 118, 97, 108, 117, 101, 115, 46, 10, 10, 12, 
            10, 5, 4, 2, 2, 0, 4, 18, 3, 94, 2, 10, 10, 12, 10, 5, 4, 2, 2, 0, 
            6, 18, 3, 94, 11, 16, 10, 12, 10, 5, 4, 2, 2, 0, 1, 18, 3, 94, 17, 23, 
            10, 12, 10, 5, 4, 2, 2, 0, 3, 18, 3, 94, 26, 27, 98, 6, 112, 114, 111, 116, 
            111, 51, 
        ].as_ref()).expect("Could not read file descriptor")]);
        FILE_DEPS = ::std::option::Option::Some([]);
        FILE_POOL = ::std::option::Option::Some(crate::reflect::DescriptorPool::build_generated_pool(
            FILE_PROTO.as_ref().unwrap(),
            FILE_DEPS.as_ref().unwrap()
        ));
        FILE_DESCRIPTOR = ::std::option::Option::Some(FILE_POOL.as_ref().unwrap().find_file_by_name("google/protobuf/struct.proto").unwrap());
    }
}

pub fn pool() -> &'static crate::reflect::DescriptorPool<'static> {
    unsafe {
        FILE_ONCE.call_once(file_once_init);
        FILE_POOL.as_ref().unwrap()
    }
}
pub fn file() -> &'static crate::reflect::FileDescriptor {
    unsafe {
        FILE_ONCE.call_once(file_once_init);
        FILE_DESCRIPTOR.as_ref().unwrap()
    }
}
#[derive(Debug, PartialEq)]
pub struct Struct {
    pub fields: crate::collections::MapField<::std::string::String, self::Value>,
    unknown_fields: crate::UnknownFieldSet
}
static STRUCT_FIELDS_CODEC: crate::collections::MapCodec<::std::string::String, self::Value> = crate::collections::MapCodec::new(crate::Codec::string(10), crate::Codec::message(18), 10);
impl crate::CodedMessage for self::Struct {
    fn merge_from(&mut self, input: &mut crate::io::CodedInput) -> crate::io::InputResult<()> {
        while let ::std::option::Option::Some(tag) = input.read_tag()? {
            match tag.get() {
                10 => self.fields.add_entries(input, &STRUCT_FIELDS_CODEC)?,
                tag => self.unknown_fields.merge_from(tag, input)?
            }
        }
        ::std::result::Result::Ok(())
    }
    fn calculate_size(&self) -> ::std::option::Option<i32> {
        let mut size = 0i32;
        size = size.checked_add(self.fields.calculate_size(&STRUCT_FIELDS_CODEC)?)?;
        size = size.checked_add(self.unknown_fields.calculate_size()?)?;
        ::std::option::Option::Some(size)
    }
    fn write_to(&self, output: &mut crate::io::CodedOutput) -> crate::io::OutputResult {
        self.fields.write_to(output, &STRUCT_FIELDS_CODEC)?;
        self.unknown_fields.write_to(output)?;
        ::std::result::Result::Ok(())
    }
}
impl crate::LiteMessage for self::Struct {
    fn new() -> Self {
        Self {
            fields: crate::collections::MapField::new(),
            unknown_fields: crate::UnknownFieldSet::new()
        }
    }
}
impl ::std::clone::Clone for self::Struct {
    fn clone(&self) -> Self {
        Self {
            fields: self.fields.clone(),
            unknown_fields: self.unknown_fields.clone()
        }
    }
    fn clone_from(&mut self, other: &Self) {
        self.fields.clone_from(&other.fields);
        self.unknown_fields.clone_from(&other.unknown_fields);
    }
}
impl crate::Message for self::Struct {
    fn descriptor() -> &'static crate::reflect::MessageDescriptor {
        &self::file().messages()[0]
    }
}
impl self::Struct {
    /// Gets the field number of the 'fields' field
    pub const FIELDS_FIELD_NUMBER: i32 = 1;
}
#[derive(Debug, PartialEq)]
pub struct Value {
    pub kind: Value_Kind,
    unknown_fields: crate::UnknownFieldSet
}
#[derive(Clone, Debug, PartialEq)]
pub enum Value_Kind {
    None,
    NullValue(crate::EnumValue<self::NullValue>),
    NumberValue(f64),
    StringValue(::std::string::String),
    BoolValue(bool),
    StructValue(::std::boxed::Box<self::Struct>),
    ListValue(::std::boxed::Box<self::ListValue>),
}
impl crate::CodedMessage for self::Value {
    fn merge_from(&mut self, input: &mut crate::io::CodedInput) -> crate::io::InputResult<()> {
        while let ::std::option::Option::Some(tag) = input.read_tag()? {
            match tag.get() {
                8 => self.kind = self::Value_Kind::NullValue(input.read_enum_value()?),
                17 => self.kind = self::Value_Kind::NumberValue(input.read_double()?),
                26 => self.kind = self::Value_Kind::StringValue(input.read_string()?),
                32 => self.kind = self::Value_Kind::BoolValue(input.read_bool()?),
                42 => 
                    if let self::Value_Kind::StructValue(kind) = &mut self.kind {
                        kind.merge_from(input)?;
                    } else {
                        let mut kind = ::std::boxed::Box::new(<self::Struct as crate::LiteMessage>::new());
                        kind.merge_from(input)?;
                        self.kind = self::Value_Kind::StructValue(kind)
                    },
                50 => 
                    if let self::Value_Kind::ListValue(kind) = &mut self.kind {
                        kind.merge_from(input)?;
                    } else {
                        let mut kind = ::std::boxed::Box::new(<self::ListValue as crate::LiteMessage>::new());
                        kind.merge_from(input)?;
                        self.kind = self::Value_Kind::ListValue(kind)
                    },
                tag => self.unknown_fields.merge_from(tag, input)?
            }
        }
        ::std::result::Result::Ok(())
    }
    fn calculate_size(&self) -> ::std::option::Option<i32> {
        let mut size = 0i32;
        if let self::Value_Kind::NullValue(kind) = self.kind {
            size = size.checked_add(1)?;
            size = size.checked_add(crate::io::sizes::enum_value(kind))?;
        }
        if let self::Value_Kind::NumberValue(kind) = self.kind {
            size = size.checked_add(1)?;
            size = size.checked_add(crate::io::sizes::double(kind))?;
        }
        if let self::Value_Kind::StringValue(kind) = &self.kind {
            size = size.checked_add(1)?;
            size = size.checked_add(crate::io::sizes::string(kind)?)?;
        }
        if let self::Value_Kind::BoolValue(kind) = self.kind {
            size = size.checked_add(1)?;
            size = size.checked_add(crate::io::sizes::bool(kind))?;
        }
        if let self::Value_Kind::StructValue(kind) = &self.kind {
            size = size.checked_add(1)?;
            size = size.checked_add(crate::io::sizes::message(kind)?)?;
        }
        if let self::Value_Kind::ListValue(kind) = &self.kind {
            size = size.checked_add(1)?;
            size = size.checked_add(crate::io::sizes::message(kind)?)?;
        }
        size = size.checked_add(self.unknown_fields.calculate_size()?)?;
        ::std::option::Option::Some(size)
    }
    fn write_to(&self, output: &mut crate::io::CodedOutput) -> crate::io::OutputResult {
        if let self::Value_Kind::NullValue(kind) = self.kind {
            output.write_raw_tag_bytes(&[8])?;
            output.write_enum_value(kind)?;
        }
        if let self::Value_Kind::NumberValue(kind) = self.kind {
            output.write_raw_tag_bytes(&[17])?;
            output.write_double(kind)?;
        }
        if let self::Value_Kind::StringValue(kind) = &self.kind {
            output.write_raw_tag_bytes(&[26])?;
            output.write_string(kind)?;
        }
        if let self::Value_Kind::BoolValue(kind) = self.kind {
            output.write_raw_tag_bytes(&[32])?;
            output.write_bool(kind)?;
        }
        if let self::Value_Kind::StructValue(kind) = &self.kind {
            output.write_raw_tag_bytes(&[42])?;
            output.write_message(kind)?;
        }
        if let self::Value_Kind::ListValue(kind) = &self.kind {
            output.write_raw_tag_bytes(&[50])?;
            output.write_message(kind)?;
        }
        self.unknown_fields.write_to(output)?;
        ::std::result::Result::Ok(())
    }
}
impl crate::LiteMessage for self::Value {
    fn new() -> Self {
        Self {
            kind: self::Value_Kind::None,
            unknown_fields: crate::UnknownFieldSet::new()
        }
    }
}
impl ::std::clone::Clone for self::Value {
    fn clone(&self) -> Self {
        Self {
            kind: self.kind.clone(),
            unknown_fields: self.unknown_fields.clone()
        }
    }
    fn clone_from(&mut self, other: &Self) {
        if let self::Value_Kind::NullValue(kind) = other.kind {
            self.kind = self::Value_Kind::NullValue(kind);
        }
        if let self::Value_Kind::NumberValue(kind) = other.kind {
            self.kind = self::Value_Kind::NumberValue(kind);
        }
        if let self::Value_Kind::StringValue(kind) = &other.kind {
            self.kind = self::Value_Kind::StringValue(kind.clone());
        }
        if let self::Value_Kind::BoolValue(kind) = other.kind {
            self.kind = self::Value_Kind::BoolValue(kind);
        }
        if let self::Value_Kind::StructValue(kind) = &other.kind {
            if let self::Value_Kind::StructValue(existing) = &mut self.kind {
                existing.clone_from(kind);
            } else {
                self.kind = self::Value_Kind::StructValue(kind.clone());
            }
        }
        if let self::Value_Kind::ListValue(kind) = &other.kind {
            if let self::Value_Kind::ListValue(existing) = &mut self.kind {
                existing.clone_from(kind);
            } else {
                self.kind = self::Value_Kind::ListValue(kind.clone());
            }
        }
        self.unknown_fields.clone_from(&other.unknown_fields);
    }
}
impl crate::Message for self::Value {
    fn descriptor() -> &'static crate::reflect::MessageDescriptor {
        &self::file().messages()[1]
    }
}
impl self::Value {
    pub fn kind(&self) -> &Value_Kind {
        &self.kind
    }
    pub fn kind_mut(&mut self) -> &mut Value_Kind {
        &mut self.kind
    }
}
#[derive(Debug, PartialEq)]
pub struct ListValue {
    pub values: crate::collections::RepeatedField<self::Value>,
    unknown_fields: crate::UnknownFieldSet
}
static LIST_VALUE_VALUES_CODEC: crate::Codec<self::Value> = crate::Codec::message(10);
impl crate::CodedMessage for self::ListValue {
    fn merge_from(&mut self, input: &mut crate::io::CodedInput) -> crate::io::InputResult<()> {
        while let ::std::option::Option::Some(tag) = input.read_tag()? {
            match tag.get() {
                10 => self.values.add_entries(tag.get(), input, &LIST_VALUE_VALUES_CODEC)?,
                tag => self.unknown_fields.merge_from(tag, input)?
            }
        }
        ::std::result::Result::Ok(())
    }
    fn calculate_size(&self) -> ::std::option::Option<i32> {
        let mut size = 0i32;
        size = size.checked_add(self.values.calculate_size(&LIST_VALUE_VALUES_CODEC)?)?;
        size = size.checked_add(self.unknown_fields.calculate_size()?)?;
        ::std::option::Option::Some(size)
    }
    fn write_to(&self, output: &mut crate::io::CodedOutput) -> crate::io::OutputResult {
        self.values.write_to(output, &LIST_VALUE_VALUES_CODEC)?;
        self.unknown_fields.write_to(output)?;
        ::std::result::Result::Ok(())
    }
}
impl crate::LiteMessage for self::ListValue {
    fn new() -> Self {
        Self {
            values: crate::collections::RepeatedField::new(),
            unknown_fields: crate::UnknownFieldSet::new()
        }
    }
}
impl ::std::clone::Clone for self::ListValue {
    fn clone(&self) -> Self {
        Self {
            values: self.values.clone(),
            unknown_fields: self.unknown_fields.clone()
        }
    }
    fn clone_from(&mut self, other: &Self) {
        self.values.clone_from(&other.values);
        self.unknown_fields.clone_from(&other.unknown_fields);
    }
}
impl crate::Message for self::ListValue {
    fn descriptor() -> &'static crate::reflect::MessageDescriptor {
        &self::file().messages()[2]
    }
}
impl self::ListValue {
    /// Gets the field number of the 'values' field
    pub const VALUES_FIELD_NUMBER: i32 = 1;
}
#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]
pub enum NullValue {
    NullValue = 0,
}
impl ::std::convert::TryFrom<i32> for self::NullValue {
    type Error = crate::VariantUndefinedError;
    fn try_from(value: i32) -> ::std::result::Result<Self, crate::VariantUndefinedError> {
        match value {
            0 => ::std::result::Result::Ok(self::NullValue::NullValue),
            _ => ::std::result::Result::Err(crate::VariantUndefinedError)
        }
    }
}
impl ::std::convert::From<self::NullValue> for i32 {
    fn from(value: self::NullValue) -> i32 {
        value as i32
    }
}