// DO NOT EDIT!
// Generated by protoc-gen-rust, part of the protrust crate.
//
// Source: google/protobuf/struct.proto


pub fn file() -> &'static crate::reflect::FileDescriptor {
    super::pool().find_file_by_name("google/protobuf/struct.proto").unwrap()
}

///  `Struct` represents a structured data value, consisting of fields
///  which map to dynamically typed values. In some languages, `Struct`
///  might be supported by a native representation. For example, in
///  scripting languages like JS a struct is represented as an
///  object. The details of that representation are described together
///  with the proto support for the language.
/// 
///  The JSON representation for `Struct` is JSON object.
#[derive(Clone, Debug, PartialEq, Default)]
pub struct Struct {
    fields: crate::collections::MapField<::std::string::String, self::Value>,
    unknown_fields: crate::UnknownFieldSet,
}
static STRUCT_FIELDS_CODEC: crate::collections::MapCodec<::std::string::String, self::Value> = crate::collections::MapCodec::new(crate::Codec::string(10), crate::Codec::message(18), 10);
impl crate::CodedMessage for self::Struct {
    fn merge_from(&mut self, input: &mut crate::io::CodedInput) -> crate::io::InputResult<()> {
        while let ::std::option::Option::Some(tag) = input.read_tag()? {
            match tag.get() {
                10 => self.fields.add_entries(input, &STRUCT_FIELDS_CODEC)?,
                _ => self.unknown_fields.merge_from(tag, input)?
            }
        }
        ::std::result::Result::Ok(())
    }
    fn calculate_size(&self) -> ::std::option::Option<i32> {
        let mut size = 0i32;
        size = size.checked_add(self.fields.calculate_size(&STRUCT_FIELDS_CODEC)?)?;
        size = size.checked_add(self.unknown_fields.calculate_size()?)?;
        ::std::option::Option::Some(size)
    }
    fn write_to(&self, output: &mut crate::io::CodedOutput) -> crate::io::OutputResult {
        self.fields.write_to(output, &STRUCT_FIELDS_CODEC)?;
        self.unknown_fields.write_to(output)?;
        ::std::result::Result::Ok(())
    }
}
impl crate::LiteMessage for self::Struct {
    fn new() -> Self {
        Self {
            fields: crate::collections::MapField::new(),
            unknown_fields: crate::UnknownFieldSet::new(),
        }
    }
    fn merge(&mut self, other: &Self) {
        self.fields.merge(&other.fields);
        self.unknown_fields.merge(&other.unknown_fields);
    }
}
impl crate::Message for self::Struct {
    fn descriptor() -> &'static crate::reflect::MessageDescriptor {
        &self::file().messages()[0]
    }
}
impl self::Struct {
    /// Gets the field number of the [`fields`] field
    ///
    /// [`fields`]: #method.fields
    pub const FIELDS_FIELD_NUMBER: i32 = 1;
    ///  Unordered map of dynamically typed values.
    pub fn fields(&self) -> &crate::collections::MapField<::std::string::String, self::Value> {
        &self.fields
    }
    /// Returns a unique reference to the [`fields`] field
    ///
    /// [`fields`]: #method.fields
    pub fn fields_mut(&mut self) -> &mut crate::collections::MapField<::std::string::String, self::Value> {
        &mut self.fields
    }
}
///  `Value` represents a dynamically typed value which can be either
///  null, a number, a string, a boolean, a recursive struct value, or a
///  list of values. A producer of value is expected to set one of that
///  variants, absence of any variant indicates an error.
/// 
///  The JSON representation for `Value` is JSON value.
#[derive(Clone, Debug, PartialEq, Default)]
pub struct Value {
    kind: self::value::Kind,
    unknown_fields: crate::UnknownFieldSet,
}
impl crate::CodedMessage for self::Value {
    fn merge_from(&mut self, input: &mut crate::io::CodedInput) -> crate::io::InputResult<()> {
        while let ::std::option::Option::Some(tag) = input.read_tag()? {
            match tag.get() {
                8 | 10 => self.kind = self::value::Kind::NullValue(input.read_enum_value()?),
                17 | 18 => self.kind = self::value::Kind::NumberValue(input.read_double()?),
                26 => self.kind = self::value::Kind::StringValue(input.read_string()?),
                32 | 34 => self.kind = self::value::Kind::BoolValue(input.read_bool()?),
                42 => 
                    if let self::value::Kind::StructValue(kind) = &mut self.kind {
                        input.read_message(&mut **kind)?;
                    } else {
                        let mut kind = ::std::boxed::Box::new(<self::Struct as crate::LiteMessage>::new());
                        input.read_message(&mut *kind)?;
                        self.kind = self::value::Kind::StructValue(kind)
                    },
                50 => 
                    if let self::value::Kind::ListValue(kind) = &mut self.kind {
                        input.read_message(&mut **kind)?;
                    } else {
                        let mut kind = ::std::boxed::Box::new(<self::ListValue as crate::LiteMessage>::new());
                        input.read_message(&mut *kind)?;
                        self.kind = self::value::Kind::ListValue(kind)
                    },
                _ => self.unknown_fields.merge_from(tag, input)?
            }
        }
        ::std::result::Result::Ok(())
    }
    fn calculate_size(&self) -> ::std::option::Option<i32> {
        let mut size = 0i32;
        if let self::value::Kind::NullValue(kind) = self.kind {
            size = size.checked_add(1)?;
            size = size.checked_add(crate::io::sizes::enum_value(kind));
        }
        if let self::value::Kind::NumberValue(kind) = self.kind {
            size = size.checked_add(1)?;
            size = size.checked_add(crate::io::sizes::double(kind));
        }
        if let self::value::Kind::StringValue(kind) = &self.kind {
            size = size.checked_add(1)?;
            size = size.checked_add(crate::io::sizes::string(kind));
        }
        if let self::value::Kind::BoolValue(kind) = self.kind {
            size = size.checked_add(1)?;
            size = size.checked_add(crate::io::sizes::bool(kind));
        }
        if let self::value::Kind::StructValue(kind) = &self.kind {
            size = size.checked_add(1)?;
            size = size.checked_add(crate::io::sizes::message(&**kind));
        }
        if let self::value::Kind::ListValue(kind) = &self.kind {
            size = size.checked_add(1)?;
            size = size.checked_add(crate::io::sizes::message(&**kind));
        }
        size = size.checked_add(self.unknown_fields.calculate_size()?)?;
        ::std::option::Option::Some(size)
    }
    fn write_to(&self, output: &mut crate::io::CodedOutput) -> crate::io::OutputResult {
        if let self::value::Kind::NullValue(kind) = self.kind {
            output.write_raw_tag_bytes(&[8])?;
            output.write_enum_value(kind)?;
        }
        if let self::value::Kind::NumberValue(kind) = self.kind {
            output.write_raw_tag_bytes(&[17])?;
            output.write_double(kind)?;
        }
        if let self::value::Kind::StringValue(kind) = &self.kind {
            output.write_raw_tag_bytes(&[26])?;
            output.write_string(kind)?;
        }
        if let self::value::Kind::BoolValue(kind) = self.kind {
            output.write_raw_tag_bytes(&[32])?;
            output.write_bool(kind)?;
        }
        if let self::value::Kind::StructValue(kind) = &self.kind {
            output.write_raw_tag_bytes(&[42])?;
            output.write_message(&**kind)?;
        }
        if let self::value::Kind::ListValue(kind) = &self.kind {
            output.write_raw_tag_bytes(&[50])?;
            output.write_message(&**kind)?;
        }
        self.unknown_fields.write_to(output)?;
        ::std::result::Result::Ok(())
    }
}
impl crate::LiteMessage for self::Value {
    fn new() -> Self {
        Self {
            kind: self::value::Kind::None,
            unknown_fields: crate::UnknownFieldSet::new(),
        }
    }
    fn merge(&mut self, other: &Self) {
        if let self::value::Kind::NullValue(kind) = other.kind {
            self.kind = self::value::Kind::NullValue(kind);
        }
        if let self::value::Kind::NumberValue(kind) = other.kind {
            self.kind = self::value::Kind::NumberValue(kind);
        }
        if let self::value::Kind::StringValue(kind) = &other.kind {
            self.kind = self::value::Kind::StringValue(kind.clone());
        }
        if let self::value::Kind::BoolValue(kind) = other.kind {
            self.kind = self::value::Kind::BoolValue(kind);
        }
        if let self::value::Kind::StructValue(kind) = &other.kind {
            if let self::value::Kind::StructValue(existing) = &mut self.kind {
                existing.merge(kind);
            } else {
                self.kind = self::value::Kind::StructValue(kind.clone());
            }
        }
        if let self::value::Kind::ListValue(kind) = &other.kind {
            if let self::value::Kind::ListValue(existing) = &mut self.kind {
                existing.merge(kind);
            } else {
                self.kind = self::value::Kind::ListValue(kind.clone());
            }
        }
        self.unknown_fields.merge(&other.unknown_fields);
    }
}
impl crate::Message for self::Value {
    fn descriptor() -> &'static crate::reflect::MessageDescriptor {
        &self::file().messages()[1]
    }
}
impl self::Value {
    /// Gets the field number of the [`null_value`] field
    ///
    /// [`null_value`]: #method.null_value
    pub const NULL_VALUE_FIELD_NUMBER: i32 = 1;
    /// A constant value representing the default value of the [`null_value`] field
    ///
    /// [`null_value`]: #method.null_value
    pub const NULL_VALUE_DEFAULT_VALUE: crate::EnumValue<self::NullValue> = crate::EnumValue::Defined(self::NullValue::NullValue);
    ///  Represents a null value.
    pub fn null_value(&self) -> ::std::option::Option<&crate::EnumValue<self::NullValue>> {
        match &self.kind {
            self::value::Kind::NullValue(ref kind) => ::std::option::Option::Some(kind),
            _ => ::std::option::Option::None
        }
    }
    /// Returns a unique reference to the ['null_value'] field
    ///
    /// [`null_value`]: #method.null_value
    pub fn null_value_mut(&mut self) -> &mut crate::EnumValue<self::NullValue> {
        match self.kind {
            self::value::Kind::NullValue(ref mut value) => value,
            _ => {
                self.set_null_value(::std::default::Default::default());
                self.null_value_mut()
            }
        }
    }
    pub fn has_null_value(&self) -> bool {
        match &self.kind {
            self::value::Kind::NullValue(_) => true,
            _ => false
        }
    }
    pub fn set_null_value(&mut self, value: crate::EnumValue<self::NullValue>) {
        self.kind = self::value::Kind::NullValue(value)
    }
    pub fn take_null_value(&mut self) -> ::std::option::Option<crate::EnumValue<self::NullValue>> {
        match ::std::mem::replace(&mut self.kind, self::value::Kind::None) {
            self::value::Kind::NullValue(value) => {
                ::std::option::Option::Some(value)
            }
            value => {
                self.kind = value;
                ::std::option::Option::None
            }
        }
    }
    pub fn clear_null_value(&mut self) {
        self.kind = self::value::Kind::None
    }
    /// Gets the field number of the [`number_value`] field
    ///
    /// [`number_value`]: #method.number_value
    pub const NUMBER_VALUE_FIELD_NUMBER: i32 = 2;
    /// A constant value representing the default value of the [`number_value`] field
    ///
    /// [`number_value`]: #method.number_value
    pub const NUMBER_VALUE_DEFAULT_VALUE: f64 = 0.0;
    ///  Represents a double value.
    pub fn number_value(&self) -> ::std::option::Option<&f64> {
        match &self.kind {
            self::value::Kind::NumberValue(ref kind) => ::std::option::Option::Some(kind),
            _ => ::std::option::Option::None
        }
    }
    /// Returns a unique reference to the ['number_value'] field
    ///
    /// [`number_value`]: #method.number_value
    pub fn number_value_mut(&mut self) -> &mut f64 {
        match self.kind {
            self::value::Kind::NumberValue(ref mut value) => value,
            _ => {
                self.set_number_value(::std::default::Default::default());
                self.number_value_mut()
            }
        }
    }
    pub fn has_number_value(&self) -> bool {
        match &self.kind {
            self::value::Kind::NumberValue(_) => true,
            _ => false
        }
    }
    pub fn set_number_value(&mut self, value: f64) {
        self.kind = self::value::Kind::NumberValue(value)
    }
    pub fn take_number_value(&mut self) -> ::std::option::Option<f64> {
        match ::std::mem::replace(&mut self.kind, self::value::Kind::None) {
            self::value::Kind::NumberValue(value) => {
                ::std::option::Option::Some(value)
            }
            value => {
                self.kind = value;
                ::std::option::Option::None
            }
        }
    }
    pub fn clear_number_value(&mut self) {
        self.kind = self::value::Kind::None
    }
    /// Gets the field number of the [`string_value`] field
    ///
    /// [`string_value`]: #method.string_value
    pub const STRING_VALUE_FIELD_NUMBER: i32 = 3;
    /// A constant value representing the default value of the [`string_value`] field
    ///
    /// [`string_value`]: #method.string_value
    pub const STRING_VALUE_DEFAULT_VALUE: &'static str = "";
    ///  Represents a string value.
    pub fn string_value(&self) -> ::std::option::Option<&::std::string::String> {
        match &self.kind {
            self::value::Kind::StringValue(ref kind) => ::std::option::Option::Some(kind),
            _ => ::std::option::Option::None
        }
    }
    /// Returns a unique reference to the ['string_value'] field
    ///
    /// [`string_value`]: #method.string_value
    pub fn string_value_mut(&mut self) -> &mut ::std::string::String {
        match self.kind {
            self::value::Kind::StringValue(ref mut value) => value,
            _ => {
                self.set_string_value(::std::default::Default::default());
                self.string_value_mut()
            }
        }
    }
    pub fn has_string_value(&self) -> bool {
        match &self.kind {
            self::value::Kind::StringValue(_) => true,
            _ => false
        }
    }
    pub fn set_string_value(&mut self, value: ::std::string::String) {
        self.kind = self::value::Kind::StringValue(value)
    }
    pub fn take_string_value(&mut self) -> ::std::option::Option<::std::string::String> {
        match ::std::mem::replace(&mut self.kind, self::value::Kind::None) {
            self::value::Kind::StringValue(value) => {
                ::std::option::Option::Some(value)
            }
            value => {
                self.kind = value;
                ::std::option::Option::None
            }
        }
    }
    pub fn clear_string_value(&mut self) {
        self.kind = self::value::Kind::None
    }
    /// Gets the field number of the [`bool_value`] field
    ///
    /// [`bool_value`]: #method.bool_value
    pub const BOOL_VALUE_FIELD_NUMBER: i32 = 4;
    /// A constant value representing the default value of the [`bool_value`] field
    ///
    /// [`bool_value`]: #method.bool_value
    pub const BOOL_VALUE_DEFAULT_VALUE: bool = false;
    ///  Represents a boolean value.
    pub fn bool_value(&self) -> ::std::option::Option<&bool> {
        match &self.kind {
            self::value::Kind::BoolValue(ref kind) => ::std::option::Option::Some(kind),
            _ => ::std::option::Option::None
        }
    }
    /// Returns a unique reference to the ['bool_value'] field
    ///
    /// [`bool_value`]: #method.bool_value
    pub fn bool_value_mut(&mut self) -> &mut bool {
        match self.kind {
            self::value::Kind::BoolValue(ref mut value) => value,
            _ => {
                self.set_bool_value(::std::default::Default::default());
                self.bool_value_mut()
            }
        }
    }
    pub fn has_bool_value(&self) -> bool {
        match &self.kind {
            self::value::Kind::BoolValue(_) => true,
            _ => false
        }
    }
    pub fn set_bool_value(&mut self, value: bool) {
        self.kind = self::value::Kind::BoolValue(value)
    }
    pub fn take_bool_value(&mut self) -> ::std::option::Option<bool> {
        match ::std::mem::replace(&mut self.kind, self::value::Kind::None) {
            self::value::Kind::BoolValue(value) => {
                ::std::option::Option::Some(value)
            }
            value => {
                self.kind = value;
                ::std::option::Option::None
            }
        }
    }
    pub fn clear_bool_value(&mut self) {
        self.kind = self::value::Kind::None
    }
    /// Gets the field number of the [`struct_value`] field
    ///
    /// [`struct_value`]: #method.struct_value
    pub const STRUCT_VALUE_FIELD_NUMBER: i32 = 5;
    ///  Represents a structured value.
    pub fn struct_value(&self) -> ::std::option::Option<&self::Struct> {
        match &self.kind {
            self::value::Kind::StructValue(ref kind) => ::std::option::Option::Some(&**kind),
            _ => ::std::option::Option::None
        }
    }
    /// Returns a unique reference to the ['struct_value'] field
    ///
    /// [`struct_value`]: #method.struct_value
    pub fn struct_value_mut(&mut self) -> &mut self::Struct {
        match self.kind {
            self::value::Kind::StructValue(ref mut value) => value,
            _ => {
                self.set_struct_value(::std::default::Default::default());
                self.struct_value_mut()
            }
        }
    }
    pub fn has_struct_value(&self) -> bool {
        match &self.kind {
            self::value::Kind::StructValue(_) => true,
            _ => false
        }
    }
    pub fn set_struct_value(&mut self, value: self::Struct) {
        self.kind = self::value::Kind::StructValue(::std::boxed::Box::new(value))
    }
    pub fn take_struct_value(&mut self) -> ::std::option::Option<self::Struct> {
        match ::std::mem::replace(&mut self.kind, self::value::Kind::None) {
            self::value::Kind::StructValue(value) => {
                ::std::option::Option::Some(*value)
            }
            value => {
                self.kind = value;
                ::std::option::Option::None
            }
        }
    }
    pub fn clear_struct_value(&mut self) {
        self.kind = self::value::Kind::None
    }
    /// Gets the field number of the [`list_value`] field
    ///
    /// [`list_value`]: #method.list_value
    pub const LIST_VALUE_FIELD_NUMBER: i32 = 6;
    ///  Represents a repeated `Value`.
    pub fn list_value(&self) -> ::std::option::Option<&self::ListValue> {
        match &self.kind {
            self::value::Kind::ListValue(ref kind) => ::std::option::Option::Some(&**kind),
            _ => ::std::option::Option::None
        }
    }
    /// Returns a unique reference to the ['list_value'] field
    ///
    /// [`list_value`]: #method.list_value
    pub fn list_value_mut(&mut self) -> &mut self::ListValue {
        match self.kind {
            self::value::Kind::ListValue(ref mut value) => value,
            _ => {
                self.set_list_value(::std::default::Default::default());
                self.list_value_mut()
            }
        }
    }
    pub fn has_list_value(&self) -> bool {
        match &self.kind {
            self::value::Kind::ListValue(_) => true,
            _ => false
        }
    }
    pub fn set_list_value(&mut self, value: self::ListValue) {
        self.kind = self::value::Kind::ListValue(::std::boxed::Box::new(value))
    }
    pub fn take_list_value(&mut self) -> ::std::option::Option<self::ListValue> {
        match ::std::mem::replace(&mut self.kind, self::value::Kind::None) {
            self::value::Kind::ListValue(value) => {
                ::std::option::Option::Some(*value)
            }
            value => {
                self.kind = value;
                ::std::option::Option::None
            }
        }
    }
    pub fn clear_list_value(&mut self) {
        self.kind = self::value::Kind::None
    }
    /// Gets a shared reference to the [`kind`] oneof field
    ///
    /// [`kind`]: enum.Kind.html
    pub fn kind(&self) -> &self::value::Kind {
        &self.kind
    }
    /// Gets a unique reference to the [`kind`] oneof field
    ///
    /// [`kind`]: enum.Kind.html
    pub fn kind_mut(&mut self) -> &mut self::value::Kind {
        &mut self.kind
    }
}
///  `Value` represents a dynamically typed value which can be either
///  null, a number, a string, a boolean, a recursive struct value, or a
///  list of values. A producer of value is expected to set one of that
///  variants, absence of any variant indicates an error.
/// 
///  The JSON representation for `Value` is JSON value.
pub mod value {
    ///  The kind of value.
    #[derive(Clone, Debug, PartialEq)]
    pub enum Kind {
        /// No value
        None,
        ///  Represents a null value.
        NullValue(crate::EnumValue<self::super::NullValue>),
        ///  Represents a double value.
        NumberValue(f64),
        ///  Represents a string value.
        StringValue(::std::string::String),
        ///  Represents a boolean value.
        BoolValue(bool),
        ///  Represents a structured value.
        StructValue(::std::boxed::Box<self::super::Struct>),
        ///  Represents a repeated `Value`.
        ListValue(::std::boxed::Box<self::super::ListValue>),
    }
    impl ::std::default::Default for self::Kind {
        fn default() -> Self {
            self::Kind::None
        }
    }
}
///  `ListValue` is a wrapper around a repeated field of values.
/// 
///  The JSON representation for `ListValue` is JSON array.
#[derive(Clone, Debug, PartialEq, Default)]
pub struct ListValue {
    values: crate::collections::RepeatedField<self::Value>,
    unknown_fields: crate::UnknownFieldSet,
}
static LIST_VALUE_VALUES_CODEC: crate::Codec<self::Value> = crate::Codec::message(10);
impl crate::CodedMessage for self::ListValue {
    fn merge_from(&mut self, input: &mut crate::io::CodedInput) -> crate::io::InputResult<()> {
        while let ::std::option::Option::Some(tag) = input.read_tag()? {
            match tag.get() {
                10 => self.values.add_entries(input, &LIST_VALUE_VALUES_CODEC)?,
                _ => self.unknown_fields.merge_from(tag, input)?
            }
        }
        ::std::result::Result::Ok(())
    }
    fn calculate_size(&self) -> ::std::option::Option<i32> {
        let mut size = 0i32;
        size = size.checked_add(self.values.calculate_size(&LIST_VALUE_VALUES_CODEC)?)?;
        size = size.checked_add(self.unknown_fields.calculate_size()?)?;
        ::std::option::Option::Some(size)
    }
    fn write_to(&self, output: &mut crate::io::CodedOutput) -> crate::io::OutputResult {
        self.values.write_to(output, &LIST_VALUE_VALUES_CODEC)?;
        self.unknown_fields.write_to(output)?;
        ::std::result::Result::Ok(())
    }
}
impl crate::LiteMessage for self::ListValue {
    fn new() -> Self {
        Self {
            values: crate::collections::RepeatedField::new(),
            unknown_fields: crate::UnknownFieldSet::new(),
        }
    }
    fn merge(&mut self, other: &Self) {
        self.values.merge(&other.values);
        self.unknown_fields.merge(&other.unknown_fields);
    }
}
impl crate::Message for self::ListValue {
    fn descriptor() -> &'static crate::reflect::MessageDescriptor {
        &self::file().messages()[2]
    }
}
impl self::ListValue {
    /// Gets the field number of the [`values`] field
    ///
    /// [`values`]: #method.values
    pub const VALUES_FIELD_NUMBER: i32 = 1;
    ///  Repeated field of dynamically typed values.
    pub fn values(&self) -> &crate::collections::RepeatedField<self::Value> {
        &self.values
    }
    /// Returns a unique reference to the [`values`] field
    ///
    /// [`values`]: #method.values
    pub fn values_mut(&mut self) -> &mut crate::collections::RepeatedField<self::Value> {
        &mut self.values
    }
}
///  `NullValue` is a singleton enumeration to represent the null value for the
///  `Value` type union.
/// 
///   The JSON representation for `NullValue` is JSON `null`.
#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]
pub enum NullValue {
    ///  Null value.
    NullValue,
}
impl crate::Enum for self::NullValue {
    fn descriptor() -> &'static crate::reflect::EnumDescriptor {
        &self::file().enums()[0]
    }
}
impl ::std::convert::TryFrom<i32> for self::NullValue {
    type Error = crate::VariantUndefinedError;
    fn try_from(value: i32) -> ::std::result::Result<Self, crate::VariantUndefinedError> {
        #[allow(unreachable_patterns)]
        match value {
            0 => ::std::result::Result::Ok(self::NullValue::NullValue),
            _ => ::std::result::Result::Err(crate::VariantUndefinedError)
        }
    }
}
impl ::std::convert::From<self::NullValue> for i32 {
    fn from(value: self::NullValue) -> i32 {
        match value {
            NullValue::NullValue => 0,
        }
    }
}