//! DO NOT EDIT!
//! Generated by protoc-gen-rust, part of the protrust crate.
//!
//! Source: google/protobuf/compiler/plugin.proto

static FILE_ONCE: ::std::sync::Once = ::std::sync::Once::new();
static mut FILE_POOL: ::std::option::Option<crate::reflect::DescriptorPool<'static>> = ::std::option::Option::None;
static mut FILE_PROTO: ::std::option::Option<[crate::descriptor::FileDescriptorProto; 1]> = ::std::option::Option::None;
static mut FILE_DESCRIPTOR: ::std::option::Option<&'static crate::reflect::FileDescriptor> = ::std::option::Option::None;
static mut FILE_DEPS: ::std::option::Option<[&'static crate::reflect::DescriptorPool<'static>; 1]> = ::std::option::Option::None;

fn file_once_init() {
    unsafe {
        FILE_PROTO = ::std::option::Option::Some([crate::LiteMessage::read_new(&mut [
            10, 37, 103, 111, 111, 103, 108, 101, 47, 112, 114, 111, 116, 111, 98, 117, 102, 47, 99, 111, 
            109, 112, 105, 108, 101, 114, 47, 112, 108, 117, 103, 105, 110, 46, 112, 114, 111, 116, 111, 18, 
            24, 103, 111, 111, 103, 108, 101, 46, 112, 114, 111, 116, 111, 98, 117, 102, 46, 99, 111, 109, 
            112, 105, 108, 101, 114, 26, 32, 103, 111, 111, 103, 108, 101, 47, 112, 114, 111, 116, 111, 98, 
            117, 102, 47, 100, 101, 115, 99, 114, 105, 112, 116, 111, 114, 46, 112, 114, 111, 116, 111, 34, 
            99, 10, 7, 86, 101, 114, 115, 105, 111, 110, 18, 20, 10, 5, 109, 97, 106, 111, 114, 24, 
            1, 32, 1, 40, 5, 82, 5, 109, 97, 106, 111, 114, 18, 20, 10, 5, 109, 105, 110, 111, 
            114, 24, 2, 32, 1, 40, 5, 82, 5, 109, 105, 110, 111, 114, 18, 20, 10, 5, 112, 97, 
            116, 99, 104, 24, 3, 32, 1, 40, 5, 82, 5, 112, 97, 116, 99, 104, 18, 22, 10, 6, 
            115, 117, 102, 102, 105, 120, 24, 4, 32, 1, 40, 9, 82, 6, 115, 117, 102, 102, 105, 120, 
            34, 241, 1, 10, 20, 67, 111, 100, 101, 71, 101, 110, 101, 114, 97, 116, 111, 114, 82, 101, 
            113, 117, 101, 115, 116, 18, 40, 10, 16, 102, 105, 108, 101, 95, 116, 111, 95, 103, 101, 110, 
            101, 114, 97, 116, 101, 24, 1, 32, 3, 40, 9, 82, 14, 102, 105, 108, 101, 84, 111, 71, 
            101, 110, 101, 114, 97, 116, 101, 18, 28, 10, 9, 112, 97, 114, 97, 109, 101, 116, 101, 114, 
            24, 2, 32, 1, 40, 9, 82, 9, 112, 97, 114, 97, 109, 101, 116, 101, 114, 18, 67, 10, 
            10, 112, 114, 111, 116, 111, 95, 102, 105, 108, 101, 24, 15, 32, 3, 40, 11, 50, 36, 46, 
            103, 111, 111, 103, 108, 101, 46, 112, 114, 111, 116, 111, 98, 117, 102, 46, 70, 105, 108, 101, 
            68, 101, 115, 99, 114, 105, 112, 116, 111, 114, 80, 114, 111, 116, 111, 82, 9, 112, 114, 111, 
            116, 111, 70, 105, 108, 101, 18, 76, 10, 16, 99, 111, 109, 112, 105, 108, 101, 114, 95, 118, 
            101, 114, 115, 105, 111, 110, 24, 3, 32, 1, 40, 11, 50, 33, 46, 103, 111, 111, 103, 108, 
            101, 46, 112, 114, 111, 116, 111, 98, 117, 102, 46, 99, 111, 109, 112, 105, 108, 101, 114, 46, 
            86, 101, 114, 115, 105, 111, 110, 82, 15, 99, 111, 109, 112, 105, 108, 101, 114, 86, 101, 114, 
            115, 105, 111, 110, 34, 214, 1, 10, 21, 67, 111, 100, 101, 71, 101, 110, 101, 114, 97, 116, 
            111, 114, 82, 101, 115, 112, 111, 110, 115, 101, 18, 20, 10, 5, 101, 114, 114, 111, 114, 24, 
            1, 32, 1, 40, 9, 82, 5, 101, 114, 114, 111, 114, 18, 72, 10, 4, 102, 105, 108, 101, 
            24, 15, 32, 3, 40, 11, 50, 52, 46, 103, 111, 111, 103, 108, 101, 46, 112, 114, 111, 116, 
            111, 98, 117, 102, 46, 99, 111, 109, 112, 105, 108, 101, 114, 46, 67, 111, 100, 101, 71, 101, 
            110, 101, 114, 97, 116, 111, 114, 82, 101, 115, 112, 111, 110, 115, 101, 46, 70, 105, 108, 101, 
            82, 4, 102, 105, 108, 101, 26, 93, 10, 4, 70, 105, 108, 101, 18, 18, 10, 4, 110, 97, 
            109, 101, 24, 1, 32, 1, 40, 9, 82, 4, 110, 97, 109, 101, 18, 39, 10, 15, 105, 110, 
            115, 101, 114, 116, 105, 111, 110, 95, 112, 111, 105, 110, 116, 24, 2, 32, 1, 40, 9, 82, 
            14, 105, 110, 115, 101, 114, 116, 105, 111, 110, 80, 111, 105, 110, 116, 18, 24, 10, 7, 99, 
            111, 110, 116, 101, 110, 116, 24, 15, 32, 1, 40, 9, 82, 7, 99, 111, 110, 116, 101, 110, 
            116, 66, 103, 10, 28, 99, 111, 109, 46, 103, 111, 111, 103, 108, 101, 46, 112, 114, 111, 116, 
            111, 98, 117, 102, 46, 99, 111, 109, 112, 105, 108, 101, 114, 66, 12, 80, 108, 117, 103, 105, 
            110, 80, 114, 111, 116, 111, 115, 90, 57, 103, 105, 116, 104, 117, 98, 46, 99, 111, 109, 47, 
            103, 111, 108, 97, 110, 103, 47, 112, 114, 111, 116, 111, 98, 117, 102, 47, 112, 114, 111, 116, 
            111, 99, 45, 103, 101, 110, 45, 103, 111, 47, 112, 108, 117, 103, 105, 110, 59, 112, 108, 117, 
            103, 105, 110, 95, 103, 111, 
        ].as_ref()).expect("Could not read file descriptor")]);
        FILE_DEPS = ::std::option::Option::Some([crate::descriptor::pool(), ]);
        FILE_POOL = ::std::option::Option::Some(crate::reflect::DescriptorPool::build_generated_pool(
            FILE_PROTO.as_ref().unwrap(),
            FILE_DEPS.as_ref().unwrap()
        ));
        FILE_DESCRIPTOR = ::std::option::Option::Some(FILE_POOL.as_ref().unwrap().find_file_by_name("google/protobuf/compiler/plugin.proto").unwrap());
    }
}

pub fn pool() -> &'static crate::reflect::DescriptorPool<'static> {
    unsafe {
        FILE_ONCE.call_once(file_once_init);
        FILE_POOL.as_ref().unwrap()
    }
}
pub fn file() -> &'static crate::reflect::FileDescriptor {
    unsafe {
        FILE_ONCE.call_once(file_once_init);
        FILE_DESCRIPTOR.as_ref().unwrap()
    }
}
#[derive(Debug, PartialEq)]
pub struct Version {
    pub major: ::std::option::Option<i32>,
    pub minor: ::std::option::Option<i32>,
    pub patch: ::std::option::Option<i32>,
    pub suffix: ::std::option::Option<::std::string::String>,
    unknown_fields: crate::UnknownFieldSet
}
impl crate::CodedMessage for self::Version {
    fn merge_from(&mut self, input: &mut crate::io::CodedInput) -> crate::io::InputResult<()> {
        while let ::std::option::Option::Some(tag) = input.read_tag()? {
            match tag.get() {
                8 => self.major = ::std::option::Option::Some(input.read_int32()?),
                16 => self.minor = ::std::option::Option::Some(input.read_int32()?),
                24 => self.patch = ::std::option::Option::Some(input.read_int32()?),
                34 => self.suffix = ::std::option::Option::Some(input.read_string()?),
                tag => self.unknown_fields.merge_from(tag, input)?
            }
        }
        ::std::result::Result::Ok(())
    }
    fn calculate_size(&self) -> ::std::option::Option<i32> {
        let mut size = 0i32;
        let major = self.major;
        if let ::std::option::Option::Some(major) = major {
            if major != Self::MAJOR_DEFAULT_VALUE {
                size = size.checked_add(1)?;
                size = size.checked_add(crate::io::sizes::int32(major))?;
            }
        }
        let minor = self.minor;
        if let ::std::option::Option::Some(minor) = minor {
            if minor != Self::MINOR_DEFAULT_VALUE {
                size = size.checked_add(1)?;
                size = size.checked_add(crate::io::sizes::int32(minor))?;
            }
        }
        let patch = self.patch;
        if let ::std::option::Option::Some(patch) = patch {
            if patch != Self::PATCH_DEFAULT_VALUE {
                size = size.checked_add(1)?;
                size = size.checked_add(crate::io::sizes::int32(patch))?;
            }
        }
        let suffix = &self.suffix;
        if let ::std::option::Option::Some(suffix) = suffix {
            if suffix != Self::SUFFIX_DEFAULT_VALUE {
                size = size.checked_add(1)?;
                size = size.checked_add(crate::io::sizes::string(suffix)?)?;
            }
        }
        size = size.checked_add(self.unknown_fields.calculate_size()?)?;
        ::std::option::Option::Some(size)
    }
    fn write_to(&self, output: &mut crate::io::CodedOutput) -> crate::io::OutputResult {
        let major = self.major;
        if let ::std::option::Option::Some(major) = major {
            if major != Self::MAJOR_DEFAULT_VALUE {
                output.write_raw_tag_bytes(&[8])?;
                output.write_int32(major)?;
            }
        }
        let minor = self.minor;
        if let ::std::option::Option::Some(minor) = minor {
            if minor != Self::MINOR_DEFAULT_VALUE {
                output.write_raw_tag_bytes(&[16])?;
                output.write_int32(minor)?;
            }
        }
        let patch = self.patch;
        if let ::std::option::Option::Some(patch) = patch {
            if patch != Self::PATCH_DEFAULT_VALUE {
                output.write_raw_tag_bytes(&[24])?;
                output.write_int32(patch)?;
            }
        }
        let suffix = &self.suffix;
        if let ::std::option::Option::Some(suffix) = suffix {
            if suffix != Self::SUFFIX_DEFAULT_VALUE {
                output.write_raw_tag_bytes(&[34])?;
                output.write_string(suffix)?;
            }
        }
        self.unknown_fields.write_to(output)?;
        ::std::result::Result::Ok(())
    }
}
impl crate::LiteMessage for self::Version {
    fn new() -> Self {
        Self {
            major: ::std::option::Option::None,
            minor: ::std::option::Option::None,
            patch: ::std::option::Option::None,
            suffix: ::std::option::Option::None,
            unknown_fields: crate::UnknownFieldSet::new()
        }
    }
}
impl ::std::clone::Clone for self::Version {
    fn clone(&self) -> Self {
        Self {
            major: self.major.clone(),
            minor: self.minor.clone(),
            patch: self.patch.clone(),
            suffix: self.suffix.clone(),
            unknown_fields: self.unknown_fields.clone()
        }
    }
    fn clone_from(&mut self, other: &Self) {
        self.major = other.major;
        self.minor = other.minor;
        self.patch = other.patch;
        self.suffix = other.suffix.clone();
        self.unknown_fields.clone_from(&other.unknown_fields);
    }
}
impl crate::Message for self::Version {
    fn descriptor() -> &'static crate::reflect::MessageDescriptor {
        &self::file().messages()[0]
    }
}
impl self::Version {
    /// Gets the field number of the 'major' field
    pub const MAJOR_FIELD_NUMBER: i32 = 1;
    pub const MAJOR_DEFAULT_VALUE: i32 = 0;
    /// Gets the field number of the 'minor' field
    pub const MINOR_FIELD_NUMBER: i32 = 2;
    pub const MINOR_DEFAULT_VALUE: i32 = 0;
    /// Gets the field number of the 'patch' field
    pub const PATCH_FIELD_NUMBER: i32 = 3;
    pub const PATCH_DEFAULT_VALUE: i32 = 0;
    /// Gets the field number of the 'suffix' field
    pub const SUFFIX_FIELD_NUMBER: i32 = 4;
    pub const SUFFIX_DEFAULT_VALUE: &'static str = "";
}
#[derive(Debug, PartialEq)]
pub struct CodeGeneratorRequest {
    pub file_to_generate: crate::collections::RepeatedField<::std::string::String>,
    pub parameter: ::std::option::Option<::std::string::String>,
    pub proto_file: crate::collections::RepeatedField<crate::descriptor::FileDescriptorProto>,
    pub compiler_version: ::std::option::Option<::std::boxed::Box<self::Version>>,
    unknown_fields: crate::UnknownFieldSet
}
static CODE_GENERATOR_REQUEST_FILE_TO_GENERATE_CODEC: crate::Codec<::std::string::String> = crate::Codec::string(10);
static CODE_GENERATOR_REQUEST_PROTO_FILE_CODEC: crate::Codec<crate::descriptor::FileDescriptorProto> = crate::Codec::message(122);
impl crate::CodedMessage for self::CodeGeneratorRequest {
    fn merge_from(&mut self, input: &mut crate::io::CodedInput) -> crate::io::InputResult<()> {
        while let ::std::option::Option::Some(tag) = input.read_tag()? {
            match tag.get() {
                10 => self.file_to_generate.add_entries(tag.get(), input, &CODE_GENERATOR_REQUEST_FILE_TO_GENERATE_CODEC)?,
                18 => self.parameter = ::std::option::Option::Some(input.read_string()?),
                122 => self.proto_file.add_entries(tag.get(), input, &CODE_GENERATOR_REQUEST_PROTO_FILE_CODEC)?,
                26 => input.read_message(self.compiler_version.get_or_insert_with(crate::LiteMessage::new))?,
                tag => self.unknown_fields.merge_from(tag, input)?
            }
        }
        ::std::result::Result::Ok(())
    }
    fn calculate_size(&self) -> ::std::option::Option<i32> {
        let mut size = 0i32;
        size = size.checked_add(self.file_to_generate.calculate_size(&CODE_GENERATOR_REQUEST_FILE_TO_GENERATE_CODEC)?)?;
        let parameter = &self.parameter;
        if let ::std::option::Option::Some(parameter) = parameter {
            if parameter != Self::PARAMETER_DEFAULT_VALUE {
                size = size.checked_add(1)?;
                size = size.checked_add(crate::io::sizes::string(parameter)?)?;
            }
        }
        size = size.checked_add(self.proto_file.calculate_size(&CODE_GENERATOR_REQUEST_PROTO_FILE_CODEC)?)?;
        let compiler_version = &self.compiler_version;
        if let ::std::option::Option::Some(compiler_version) = compiler_version {
            size = size.checked_add(1)?;
            size = size.checked_add(crate::io::sizes::message(compiler_version)?)?;
        }
        size = size.checked_add(self.unknown_fields.calculate_size()?)?;
        ::std::option::Option::Some(size)
    }
    fn write_to(&self, output: &mut crate::io::CodedOutput) -> crate::io::OutputResult {
        self.file_to_generate.write_to(output, &CODE_GENERATOR_REQUEST_FILE_TO_GENERATE_CODEC)?;
        let parameter = &self.parameter;
        if let ::std::option::Option::Some(parameter) = parameter {
            if parameter != Self::PARAMETER_DEFAULT_VALUE {
                output.write_raw_tag_bytes(&[18])?;
                output.write_string(parameter)?;
            }
        }
        self.proto_file.write_to(output, &CODE_GENERATOR_REQUEST_PROTO_FILE_CODEC)?;
        let compiler_version = &self.compiler_version;
        if let ::std::option::Option::Some(compiler_version) = compiler_version {
            output.write_raw_tag_bytes(&[26])?;
            output.write_message(compiler_version)?;
        }
        self.unknown_fields.write_to(output)?;
        ::std::result::Result::Ok(())
    }
}
impl crate::LiteMessage for self::CodeGeneratorRequest {
    fn new() -> Self {
        Self {
            file_to_generate: crate::collections::RepeatedField::new(),
            parameter: ::std::option::Option::None,
            proto_file: crate::collections::RepeatedField::new(),
            compiler_version: ::std::option::Option::None,
            unknown_fields: crate::UnknownFieldSet::new()
        }
    }
}
impl ::std::clone::Clone for self::CodeGeneratorRequest {
    fn clone(&self) -> Self {
        Self {
            file_to_generate: self.file_to_generate.clone(),
            parameter: self.parameter.clone(),
            proto_file: self.proto_file.clone(),
            compiler_version: self.compiler_version.clone(),
            unknown_fields: self.unknown_fields.clone()
        }
    }
    fn clone_from(&mut self, other: &Self) {
        self.file_to_generate.clone_from(&other.file_to_generate);
        self.parameter = other.parameter.clone();
        self.proto_file.clone_from(&other.proto_file);
        if let ::std::option::Option::Some(compiler_version) = &other.compiler_version {
            self.compiler_version.get_or_insert_with(crate::LiteMessage::new).clone_from(compiler_version);
        }
        self.unknown_fields.clone_from(&other.unknown_fields);
    }
}
impl crate::Message for self::CodeGeneratorRequest {
    fn descriptor() -> &'static crate::reflect::MessageDescriptor {
        &self::file().messages()[1]
    }
}
impl self::CodeGeneratorRequest {
    /// Gets the field number of the 'file_to_generate' field
    pub const FILE_TO_GENERATE_FIELD_NUMBER: i32 = 1;
    /// Gets the field number of the 'parameter' field
    pub const PARAMETER_FIELD_NUMBER: i32 = 2;
    pub const PARAMETER_DEFAULT_VALUE: &'static str = "";
    /// Gets the field number of the 'proto_file' field
    pub const PROTO_FILE_FIELD_NUMBER: i32 = 15;
    /// Gets the field number of the 'compiler_version' field
    pub const COMPILER_VERSION_FIELD_NUMBER: i32 = 3;
}
#[derive(Debug, PartialEq)]
pub struct CodeGeneratorResponse {
    pub error: ::std::option::Option<::std::string::String>,
    pub file: crate::collections::RepeatedField<self::CodeGeneratorResponse_File>,
    unknown_fields: crate::UnknownFieldSet
}
static CODE_GENERATOR_RESPONSE_FILE_CODEC: crate::Codec<self::CodeGeneratorResponse_File> = crate::Codec::message(122);
impl crate::CodedMessage for self::CodeGeneratorResponse {
    fn merge_from(&mut self, input: &mut crate::io::CodedInput) -> crate::io::InputResult<()> {
        while let ::std::option::Option::Some(tag) = input.read_tag()? {
            match tag.get() {
                10 => self.error = ::std::option::Option::Some(input.read_string()?),
                122 => self.file.add_entries(tag.get(), input, &CODE_GENERATOR_RESPONSE_FILE_CODEC)?,
                tag => self.unknown_fields.merge_from(tag, input)?
            }
        }
        ::std::result::Result::Ok(())
    }
    fn calculate_size(&self) -> ::std::option::Option<i32> {
        let mut size = 0i32;
        let error = &self.error;
        if let ::std::option::Option::Some(error) = error {
            if error != Self::ERROR_DEFAULT_VALUE {
                size = size.checked_add(1)?;
                size = size.checked_add(crate::io::sizes::string(error)?)?;
            }
        }
        size = size.checked_add(self.file.calculate_size(&CODE_GENERATOR_RESPONSE_FILE_CODEC)?)?;
        size = size.checked_add(self.unknown_fields.calculate_size()?)?;
        ::std::option::Option::Some(size)
    }
    fn write_to(&self, output: &mut crate::io::CodedOutput) -> crate::io::OutputResult {
        let error = &self.error;
        if let ::std::option::Option::Some(error) = error {
            if error != Self::ERROR_DEFAULT_VALUE {
                output.write_raw_tag_bytes(&[10])?;
                output.write_string(error)?;
            }
        }
        self.file.write_to(output, &CODE_GENERATOR_RESPONSE_FILE_CODEC)?;
        self.unknown_fields.write_to(output)?;
        ::std::result::Result::Ok(())
    }
}
impl crate::LiteMessage for self::CodeGeneratorResponse {
    fn new() -> Self {
        Self {
            error: ::std::option::Option::None,
            file: crate::collections::RepeatedField::new(),
            unknown_fields: crate::UnknownFieldSet::new()
        }
    }
}
impl ::std::clone::Clone for self::CodeGeneratorResponse {
    fn clone(&self) -> Self {
        Self {
            error: self.error.clone(),
            file: self.file.clone(),
            unknown_fields: self.unknown_fields.clone()
        }
    }
    fn clone_from(&mut self, other: &Self) {
        self.error = other.error.clone();
        self.file.clone_from(&other.file);
        self.unknown_fields.clone_from(&other.unknown_fields);
    }
}
impl crate::Message for self::CodeGeneratorResponse {
    fn descriptor() -> &'static crate::reflect::MessageDescriptor {
        &self::file().messages()[2]
    }
}
impl self::CodeGeneratorResponse {
    /// Gets the field number of the 'error' field
    pub const ERROR_FIELD_NUMBER: i32 = 1;
    pub const ERROR_DEFAULT_VALUE: &'static str = "";
    /// Gets the field number of the 'file' field
    pub const FILE_FIELD_NUMBER: i32 = 15;
}
#[derive(Debug, PartialEq)]
pub struct CodeGeneratorResponse_File {
    pub name: ::std::option::Option<::std::string::String>,
    pub insertion_point: ::std::option::Option<::std::string::String>,
    pub content: ::std::option::Option<::std::string::String>,
    unknown_fields: crate::UnknownFieldSet
}
impl crate::CodedMessage for self::CodeGeneratorResponse_File {
    fn merge_from(&mut self, input: &mut crate::io::CodedInput) -> crate::io::InputResult<()> {
        while let ::std::option::Option::Some(tag) = input.read_tag()? {
            match tag.get() {
                10 => self.name = ::std::option::Option::Some(input.read_string()?),
                18 => self.insertion_point = ::std::option::Option::Some(input.read_string()?),
                122 => self.content = ::std::option::Option::Some(input.read_string()?),
                tag => self.unknown_fields.merge_from(tag, input)?
            }
        }
        ::std::result::Result::Ok(())
    }
    fn calculate_size(&self) -> ::std::option::Option<i32> {
        let mut size = 0i32;
        let name = &self.name;
        if let ::std::option::Option::Some(name) = name {
            if name != Self::NAME_DEFAULT_VALUE {
                size = size.checked_add(1)?;
                size = size.checked_add(crate::io::sizes::string(name)?)?;
            }
        }
        let insertion_point = &self.insertion_point;
        if let ::std::option::Option::Some(insertion_point) = insertion_point {
            if insertion_point != Self::INSERTION_POINT_DEFAULT_VALUE {
                size = size.checked_add(1)?;
                size = size.checked_add(crate::io::sizes::string(insertion_point)?)?;
            }
        }
        let content = &self.content;
        if let ::std::option::Option::Some(content) = content {
            if content != Self::CONTENT_DEFAULT_VALUE {
                size = size.checked_add(1)?;
                size = size.checked_add(crate::io::sizes::string(content)?)?;
            }
        }
        size = size.checked_add(self.unknown_fields.calculate_size()?)?;
        ::std::option::Option::Some(size)
    }
    fn write_to(&self, output: &mut crate::io::CodedOutput) -> crate::io::OutputResult {
        let name = &self.name;
        if let ::std::option::Option::Some(name) = name {
            if name != Self::NAME_DEFAULT_VALUE {
                output.write_raw_tag_bytes(&[10])?;
                output.write_string(name)?;
            }
        }
        let insertion_point = &self.insertion_point;
        if let ::std::option::Option::Some(insertion_point) = insertion_point {
            if insertion_point != Self::INSERTION_POINT_DEFAULT_VALUE {
                output.write_raw_tag_bytes(&[18])?;
                output.write_string(insertion_point)?;
            }
        }
        let content = &self.content;
        if let ::std::option::Option::Some(content) = content {
            if content != Self::CONTENT_DEFAULT_VALUE {
                output.write_raw_tag_bytes(&[122])?;
                output.write_string(content)?;
            }
        }
        self.unknown_fields.write_to(output)?;
        ::std::result::Result::Ok(())
    }
}
impl crate::LiteMessage for self::CodeGeneratorResponse_File {
    fn new() -> Self {
        Self {
            name: ::std::option::Option::None,
            insertion_point: ::std::option::Option::None,
            content: ::std::option::Option::None,
            unknown_fields: crate::UnknownFieldSet::new()
        }
    }
}
impl ::std::clone::Clone for self::CodeGeneratorResponse_File {
    fn clone(&self) -> Self {
        Self {
            name: self.name.clone(),
            insertion_point: self.insertion_point.clone(),
            content: self.content.clone(),
            unknown_fields: self.unknown_fields.clone()
        }
    }
    fn clone_from(&mut self, other: &Self) {
        self.name = other.name.clone();
        self.insertion_point = other.insertion_point.clone();
        self.content = other.content.clone();
        self.unknown_fields.clone_from(&other.unknown_fields);
    }
}
impl crate::Message for self::CodeGeneratorResponse_File {
    fn descriptor() -> &'static crate::reflect::MessageDescriptor {
        &self::file().messages()[2].messages()[0]
    }
}
impl self::CodeGeneratorResponse_File {
    /// Gets the field number of the 'name' field
    pub const NAME_FIELD_NUMBER: i32 = 1;
    pub const NAME_DEFAULT_VALUE: &'static str = "";
    /// Gets the field number of the 'insertion_point' field
    pub const INSERTION_POINT_FIELD_NUMBER: i32 = 2;
    pub const INSERTION_POINT_DEFAULT_VALUE: &'static str = "";
    /// Gets the field number of the 'content' field
    pub const CONTENT_FIELD_NUMBER: i32 = 15;
    pub const CONTENT_DEFAULT_VALUE: &'static str = "";
}