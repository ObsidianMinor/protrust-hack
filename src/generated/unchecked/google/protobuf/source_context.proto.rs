// DO NOT EDIT!
// Generated by protoc-gen-rust, part of the protrust crate.
//
// Source: google/protobuf/source_context.proto

static FILE_ONCE: ::std::sync::Once = ::std::sync::Once::new();
static mut FILE_POOL: ::std::option::Option<crate::reflect::DescriptorPool<'static>> = ::std::option::Option::None;
static mut FILE_PROTO: ::std::option::Option<[crate::descriptor::FileDescriptorProto; 1]> = ::std::option::Option::None;
static mut FILE_DESCRIPTOR: ::std::option::Option<&'static crate::reflect::FileDescriptor> = ::std::option::Option::None;
static mut FILE_DEPS: ::std::option::Option<[&'static crate::reflect::DescriptorPool<'static>; 0]> = ::std::option::Option::None;

fn file_once_init() {
    unsafe {
        FILE_PROTO = ::std::option::Option::Some([crate::LiteMessage::read_new(&mut [
            10, 36, 103, 111, 111, 103, 108, 101, 47, 112, 114, 111, 116, 111, 98, 117, 102, 47, 115, 111, 
            117, 114, 99, 101, 95, 99, 111, 110, 116, 101, 120, 116, 46, 112, 114, 111, 116, 111, 18, 15, 
            103, 111, 111, 103, 108, 101, 46, 112, 114, 111, 116, 111, 98, 117, 102, 34, 44, 10, 13, 83, 
            111, 117, 114, 99, 101, 67, 111, 110, 116, 101, 120, 116, 18, 27, 10, 9, 102, 105, 108, 101, 
            95, 110, 97, 109, 101, 24, 1, 32, 1, 40, 9, 82, 8, 102, 105, 108, 101, 78, 97, 109, 
            101, 66, 149, 1, 10, 19, 99, 111, 109, 46, 103, 111, 111, 103, 108, 101, 46, 112, 114, 111, 
            116, 111, 98, 117, 102, 66, 18, 83, 111, 117, 114, 99, 101, 67, 111, 110, 116, 101, 120, 116, 
            80, 114, 111, 116, 111, 80, 1, 90, 65, 103, 111, 111, 103, 108, 101, 46, 103, 111, 108, 97, 
            110, 103, 46, 111, 114, 103, 47, 103, 101, 110, 112, 114, 111, 116, 111, 47, 112, 114, 111, 116, 
            111, 98, 117, 102, 47, 115, 111, 117, 114, 99, 101, 95, 99, 111, 110, 116, 101, 120, 116, 59, 
            115, 111, 117, 114, 99, 101, 95, 99, 111, 110, 116, 101, 120, 116, 162, 2, 3, 71, 80, 66, 
            170, 2, 30, 71, 111, 111, 103, 108, 101, 46, 80, 114, 111, 116, 111, 98, 117, 102, 46, 87, 
            101, 108, 108, 75, 110, 111, 119, 110, 84, 121, 112, 101, 115, 98, 6, 112, 114, 111, 116, 111, 
            51, 
        ].as_ref()).expect("Could not read file descriptor")]);
        FILE_DEPS = ::std::option::Option::Some([]);
        FILE_POOL = ::std::option::Option::Some(crate::reflect::DescriptorPool::build_generated_pool(
            FILE_PROTO.as_ref().unwrap(),
            FILE_DEPS.as_ref().unwrap()
        ));
        FILE_DESCRIPTOR = ::std::option::Option::Some(FILE_POOL.as_ref().unwrap().find_file_by_name("google/protobuf/source_context.proto").unwrap());
    }
}

/// Gets the pool containing all the symbols in this proto file and its dependencies
pub fn pool() -> &'static crate::reflect::DescriptorPool<'static> {
    unsafe {
        FILE_ONCE.call_once(file_once_init);
        FILE_POOL.as_ref().unwrap()
    }
}
/// Gets the file descriptor representing the proto that created this generated file
pub fn file() -> &'static crate::reflect::FileDescriptor {
    unsafe {
        FILE_ONCE.call_once(file_once_init);
        FILE_DESCRIPTOR.as_ref().unwrap()
    }
}
/// `SourceContext` represents information about the source of a
/// protobuf element, like the file in which it is defined.
#[derive(Debug, PartialEq)]
pub struct SourceContext {
    pub file_name: ::std::string::String,
    unknown_fields: crate::UnknownFieldSet
}
impl crate::CodedMessage for self::SourceContext {
    fn merge_from(&mut self, input: &mut crate::io::CodedInput) -> crate::io::InputResult<()> {
        while let ::std::option::Option::Some(tag) = input.read_tag()? {
            match tag.get() {
                10 => self.file_name = input.read_string()?,
                tag => self.unknown_fields.merge_from(tag, input)?
            }
        }
        ::std::result::Result::Ok(())
    }
    fn calculate_size(&self) -> i32 {
        let mut size = 0i32;
        let file_name = &self.file_name;
        if file_name != Self::FILE_NAME_DEFAULT_VALUE {
            size += 1;
            size += crate::io::sizes::string(file_name);
        }
        size += self.unknown_fields.calculate_size();
        size
    }
    fn write_to(&self, output: &mut crate::io::CodedOutput) -> crate::io::OutputResult {
        let file_name = &self.file_name;
        if file_name != Self::FILE_NAME_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[10])?;
            output.write_string(file_name)?;
        }
        self.unknown_fields.write_to(output)?;
        ::std::result::Result::Ok(())
    }
}
impl crate::LiteMessage for self::SourceContext {
    fn new() -> Self {
        Self {
            file_name: ::std::string::String::new(),
            unknown_fields: crate::UnknownFieldSet::new()
        }
    }
}
impl ::std::clone::Clone for self::SourceContext {
    fn clone(&self) -> Self {
        Self {
            file_name: self.file_name.clone(),
            unknown_fields: self.unknown_fields.clone()
        }
    }
    fn clone_from(&mut self, other: &Self) {
        self.file_name = other.file_name.clone();
        self.unknown_fields.clone_from(&other.unknown_fields);
    }
}
impl crate::Message for self::SourceContext {
    fn descriptor() -> &'static crate::reflect::MessageDescriptor {
        &self::file().messages()[0]
    }
}
impl self::SourceContext {
    /// Gets the field number of the [`file_name`] field
    ///
    /// [`file_name`]: #method.file_name
    pub const FILE_NAME_FIELD_NUMBER: i32 = 1;
    /// A constant value representing the default value of the [`file_name`] field
    ///
    /// [`file_name`]: #method.file_name
    pub const FILE_NAME_DEFAULT_VALUE: &'static str = "";
    /// The path-qualified name of the .proto file that contained the associated
    /// protobuf element.  For example: `"google/protobuf/source_context.proto"`.
    pub fn file_name(&self) -> &::std::string::String {
        &self.file_name
    }
    /// Returns a unique reference to the [`file_name`] field
    ///
    /// [`file_name`]: #method.file_name
    pub fn file_name_mut(&mut self) -> &mut ::std::string::String {
        &mut self.file_name
    }
}