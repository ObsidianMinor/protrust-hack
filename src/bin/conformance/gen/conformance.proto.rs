//! DO NOT EDIT!
//! Generated by protoc-gen-rust, part of the protrust crate.
//!
//! Source: conformance.proto

static FILE_ONCE: ::std::sync::Once = ::std::sync::Once::new();
static mut FILE_POOL: ::std::option::Option<::protrust::reflect::DescriptorPool<'static>> = ::std::option::Option::None;
static mut FILE_PROTO: ::std::option::Option<[::protrust::descriptor::FileDescriptorProto; 1]> = ::std::option::Option::None;
static mut FILE_DESCRIPTOR: ::std::option::Option<&'static ::protrust::reflect::FileDescriptor> = ::std::option::Option::None;
static mut FILE_DEPS: ::std::option::Option<[&'static ::protrust::reflect::DescriptorPool<'static>; 0]> = ::std::option::Option::None;

fn file_once_init() {
    unsafe {
        FILE_PROTO = ::std::option::Option::Some([::protrust::LiteMessage::read_new(&mut [
            10, 17, 99, 111, 110, 102, 111, 114, 109, 97, 110, 99, 101, 46, 112, 114, 111, 116, 111, 18, 
            11, 99, 111, 110, 102, 111, 114, 109, 97, 110, 99, 101, 34, 153, 3, 10, 18, 67, 111, 110, 
            102, 111, 114, 109, 97, 110, 99, 101, 82, 101, 113, 117, 101, 115, 116, 18, 41, 10, 16, 112, 
            114, 111, 116, 111, 98, 117, 102, 95, 112, 97, 121, 108, 111, 97, 100, 24, 1, 32, 1, 40, 
            12, 82, 15, 112, 114, 111, 116, 111, 98, 117, 102, 80, 97, 121, 108, 111, 97, 100, 18, 33, 
            10, 12, 106, 115, 111, 110, 95, 112, 97, 121, 108, 111, 97, 100, 24, 2, 32, 1, 40, 9, 
            82, 11, 106, 115, 111, 110, 80, 97, 121, 108, 111, 97, 100, 18, 33, 10, 12, 106, 115, 112, 
            98, 95, 112, 97, 121, 108, 111, 97, 100, 24, 7, 32, 1, 40, 9, 82, 11, 106, 115, 112, 
            98, 80, 97, 121, 108, 111, 97, 100, 18, 79, 10, 23, 114, 101, 113, 117, 101, 115, 116, 101, 
            100, 95, 111, 117, 116, 112, 117, 116, 95, 102, 111, 114, 109, 97, 116, 24, 3, 32, 1, 40, 
            14, 50, 23, 46, 99, 111, 110, 102, 111, 114, 109, 97, 110, 99, 101, 46, 87, 105, 114, 101, 
            70, 111, 114, 109, 97, 116, 82, 21, 114, 101, 113, 117, 101, 115, 116, 101, 100, 79, 117, 116, 
            112, 117, 116, 70, 111, 114, 109, 97, 116, 18, 33, 10, 12, 109, 101, 115, 115, 97, 103, 101, 
            95, 116, 121, 112, 101, 24, 4, 32, 1, 40, 9, 82, 11, 109, 101, 115, 115, 97, 103, 101, 
            84, 121, 112, 101, 18, 62, 10, 13, 116, 101, 115, 116, 95, 99, 97, 116, 101, 103, 111, 114, 
            121, 24, 5, 32, 1, 40, 14, 50, 25, 46, 99, 111, 110, 102, 111, 114, 109, 97, 110, 99, 
            101, 46, 84, 101, 115, 116, 67, 97, 116, 101, 103, 111, 114, 121, 82, 12, 116, 101, 115, 116, 
            67, 97, 116, 101, 103, 111, 114, 121, 18, 83, 10, 21, 106, 115, 112, 98, 95, 101, 110, 99, 
            111, 100, 105, 110, 103, 95, 111, 112, 116, 105, 111, 110, 115, 24, 6, 32, 1, 40, 11, 50, 
            31, 46, 99, 111, 110, 102, 111, 114, 109, 97, 110, 99, 101, 46, 74, 115, 112, 98, 69, 110, 
            99, 111, 100, 105, 110, 103, 67, 111, 110, 102, 105, 103, 82, 19, 106, 115, 112, 98, 69, 110, 
            99, 111, 100, 105, 110, 103, 79, 112, 116, 105, 111, 110, 115, 66, 9, 10, 7, 112, 97, 121, 
            108, 111, 97, 100, 34, 153, 2, 10, 19, 67, 111, 110, 102, 111, 114, 109, 97, 110, 99, 101, 
            82, 101, 115, 112, 111, 110, 115, 101, 18, 31, 10, 11, 112, 97, 114, 115, 101, 95, 101, 114, 
            114, 111, 114, 24, 1, 32, 1, 40, 9, 82, 10, 112, 97, 114, 115, 101, 69, 114, 114, 111, 
            114, 18, 39, 10, 15, 115, 101, 114, 105, 97, 108, 105, 122, 101, 95, 101, 114, 114, 111, 114, 
            24, 6, 32, 1, 40, 9, 82, 14, 115, 101, 114, 105, 97, 108, 105, 122, 101, 69, 114, 114, 
            111, 114, 18, 35, 10, 13, 114, 117, 110, 116, 105, 109, 101, 95, 101, 114, 114, 111, 114, 24, 
            2, 32, 1, 40, 9, 82, 12, 114, 117, 110, 116, 105, 109, 101, 69, 114, 114, 111, 114, 18, 
            41, 10, 16, 112, 114, 111, 116, 111, 98, 117, 102, 95, 112, 97, 121, 108, 111, 97, 100, 24, 
            3, 32, 1, 40, 12, 82, 15, 112, 114, 111, 116, 111, 98, 117, 102, 80, 97, 121, 108, 111, 
            97, 100, 18, 33, 10, 12, 106, 115, 111, 110, 95, 112, 97, 121, 108, 111, 97, 100, 24, 4, 
            32, 1, 40, 9, 82, 11, 106, 115, 111, 110, 80, 97, 121, 108, 111, 97, 100, 18, 24, 10, 
            7, 115, 107, 105, 112, 112, 101, 100, 24, 5, 32, 1, 40, 9, 82, 7, 115, 107, 105, 112, 
            112, 101, 100, 18, 33, 10, 12, 106, 115, 112, 98, 95, 112, 97, 121, 108, 111, 97, 100, 24, 
            7, 32, 1, 40, 9, 82, 11, 106, 115, 112, 98, 80, 97, 121, 108, 111, 97, 100, 66, 8, 
            10, 6, 114, 101, 115, 117, 108, 116, 34, 78, 10, 18, 74, 115, 112, 98, 69, 110, 99, 111, 
            100, 105, 110, 103, 67, 111, 110, 102, 105, 103, 18, 56, 10, 25, 117, 115, 101, 95, 106, 115, 
            112, 98, 95, 97, 114, 114, 97, 121, 95, 97, 110, 121, 95, 102, 111, 114, 109, 97, 116, 24, 
            1, 32, 1, 40, 8, 82, 21, 117, 115, 101, 74, 115, 112, 98, 65, 114, 114, 97, 121, 65, 
            110, 121, 70, 111, 114, 109, 97, 116, 42, 61, 10, 10, 87, 105, 114, 101, 70, 111, 114, 109, 
            97, 116, 18, 13, 10, 11, 85, 78, 83, 80, 69, 67, 73, 70, 73, 69, 68, 18, 12, 10, 
            8, 80, 82, 79, 84, 79, 66, 85, 70, 16, 1, 18, 8, 10, 4, 74, 83, 79, 78, 16, 
            2, 18, 8, 10, 4, 74, 83, 80, 66, 16, 3, 42, 119, 10, 12, 84, 101, 115, 116, 67, 
            97, 116, 101, 103, 111, 114, 121, 18, 18, 10, 16, 85, 78, 83, 80, 69, 67, 73, 70, 73, 
            69, 68, 95, 84, 69, 83, 84, 18, 15, 10, 11, 66, 73, 78, 65, 82, 89, 95, 84, 69, 
            83, 84, 16, 1, 18, 13, 10, 9, 74, 83, 79, 78, 95, 84, 69, 83, 84, 16, 2, 18, 
            36, 10, 32, 74, 83, 79, 78, 95, 73, 71, 78, 79, 82, 69, 95, 85, 78, 75, 78, 79, 
            87, 78, 95, 80, 65, 82, 83, 73, 78, 71, 95, 84, 69, 83, 84, 16, 3, 18, 13, 10, 
            9, 74, 83, 80, 66, 95, 84, 69, 83, 84, 16, 4, 66, 33, 10, 31, 99, 111, 109, 46, 
            103, 111, 111, 103, 108, 101, 46, 112, 114, 111, 116, 111, 98, 117, 102, 46, 99, 111, 110, 102, 
            111, 114, 109, 97, 110, 99, 101, 74, 225, 52, 10, 7, 18, 5, 30, 0, 154, 1, 1, 10, 
            204, 12, 10, 1, 12, 18, 3, 30, 0, 18, 50, 193, 12, 32, 80, 114, 111, 116, 111, 99, 
            111, 108, 32, 66, 117, 102, 102, 101, 114, 115, 32, 45, 32, 71, 111, 111, 103, 108, 101, 39, 
            115, 32, 100, 97, 116, 97, 32, 105, 110, 116, 101, 114, 99, 104, 97, 110, 103, 101, 32, 102, 
            111, 114, 109, 97, 116, 10, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 50, 48, 48, 
            56, 32, 71, 111, 111, 103, 108, 101, 32, 73, 110, 99, 46, 32, 32, 65, 108, 108, 32, 114, 
            105, 103, 104, 116, 115, 32, 114, 101, 115, 101, 114, 118, 101, 100, 46, 10, 32, 104, 116, 116, 
            112, 115, 58, 47, 47, 100, 101, 118, 101, 108, 111, 112, 101, 114, 115, 46, 103, 111, 111, 103, 
            108, 101, 46, 99, 111, 109, 47, 112, 114, 111, 116, 111, 99, 111, 108, 45, 98, 117, 102, 102, 
            101, 114, 115, 47, 10, 10, 32, 82, 101, 100, 105, 115, 116, 114, 105, 98, 117, 116, 105, 111, 
            110, 32, 97, 110, 100, 32, 117, 115, 101, 32, 105, 110, 32, 115, 111, 117, 114, 99, 101, 32, 
            97, 110, 100, 32, 98, 105, 110, 97, 114, 121, 32, 102, 111, 114, 109, 115, 44, 32, 119, 105, 
            116, 104, 32, 111, 114, 32, 119, 105, 116, 104, 111, 117, 116, 10, 32, 109, 111, 100, 105, 102, 
            105, 99, 97, 116, 105, 111, 110, 44, 32, 97, 114, 101, 32, 112, 101, 114, 109, 105, 116, 116, 
            101, 100, 32, 112, 114, 111, 118, 105, 100, 101, 100, 32, 116, 104, 97, 116, 32, 116, 104, 101, 
            32, 102, 111, 108, 108, 111, 119, 105, 110, 103, 32, 99, 111, 110, 100, 105, 116, 105, 111, 110, 
            115, 32, 97, 114, 101, 10, 32, 109, 101, 116, 58, 10, 10, 32, 32, 32, 32, 32, 42, 32, 
            82, 101, 100, 105, 115, 116, 114, 105, 98, 117, 116, 105, 111, 110, 115, 32, 111, 102, 32, 115, 
            111, 117, 114, 99, 101, 32, 99, 111, 100, 101, 32, 109, 117, 115, 116, 32, 114, 101, 116, 97, 
            105, 110, 32, 116, 104, 101, 32, 97, 98, 111, 118, 101, 32, 99, 111, 112, 121, 114, 105, 103, 
            104, 116, 10, 32, 110, 111, 116, 105, 99, 101, 44, 32, 116, 104, 105, 115, 32, 108, 105, 115, 
            116, 32, 111, 102, 32, 99, 111, 110, 100, 105, 116, 105, 111, 110, 115, 32, 97, 110, 100, 32, 
            116, 104, 101, 32, 102, 111, 108, 108, 111, 119, 105, 110, 103, 32, 100, 105, 115, 99, 108, 97, 
            105, 109, 101, 114, 46, 10, 32, 32, 32, 32, 32, 42, 32, 82, 101, 100, 105, 115, 116, 114, 
            105, 98, 117, 116, 105, 111, 110, 115, 32, 105, 110, 32, 98, 105, 110, 97, 114, 121, 32, 102, 
            111, 114, 109, 32, 109, 117, 115, 116, 32, 114, 101, 112, 114, 111, 100, 117, 99, 101, 32, 116, 
            104, 101, 32, 97, 98, 111, 118, 101, 10, 32, 99, 111, 112, 121, 114, 105, 103, 104, 116, 32, 
            110, 111, 116, 105, 99, 101, 44, 32, 116, 104, 105, 115, 32, 108, 105, 115, 116, 32, 111, 102, 
            32, 99, 111, 110, 100, 105, 116, 105, 111, 110, 115, 32, 97, 110, 100, 32, 116, 104, 101, 32, 
            102, 111, 108, 108, 111, 119, 105, 110, 103, 32, 100, 105, 115, 99, 108, 97, 105, 109, 101, 114, 
            10, 32, 105, 110, 32, 116, 104, 101, 32, 100, 111, 99, 117, 109, 101, 110, 116, 97, 116, 105, 
            111, 110, 32, 97, 110, 100, 47, 111, 114, 32, 111, 116, 104, 101, 114, 32, 109, 97, 116, 101, 
            114, 105, 97, 108, 115, 32, 112, 114, 111, 118, 105, 100, 101, 100, 32, 119, 105, 116, 104, 32, 
            116, 104, 101, 10, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 105, 111, 110, 46, 10, 32, 
            32, 32, 32, 32, 42, 32, 78, 101, 105, 116, 104, 101, 114, 32, 116, 104, 101, 32, 110, 97, 
            109, 101, 32, 111, 102, 32, 71, 111, 111, 103, 108, 101, 32, 73, 110, 99, 46, 32, 110, 111, 
            114, 32, 116, 104, 101, 32, 110, 97, 109, 101, 115, 32, 111, 102, 32, 105, 116, 115, 10, 32, 
            99, 111, 110, 116, 114, 105, 98, 117, 116, 111, 114, 115, 32, 109, 97, 121, 32, 98, 101, 32, 
            117, 115, 101, 100, 32, 116, 111, 32, 101, 110, 100, 111, 114, 115, 101, 32, 111, 114, 32, 112, 
            114, 111, 109, 111, 116, 101, 32, 112, 114, 111, 100, 117, 99, 116, 115, 32, 100, 101, 114, 105, 
            118, 101, 100, 32, 102, 114, 111, 109, 10, 32, 116, 104, 105, 115, 32, 115, 111, 102, 116, 119, 
            97, 114, 101, 32, 119, 105, 116, 104, 111, 117, 116, 32, 115, 112, 101, 99, 105, 102, 105, 99, 
            32, 112, 114, 105, 111, 114, 32, 119, 114, 105, 116, 116, 101, 110, 32, 112, 101, 114, 109, 105, 
            115, 115, 105, 111, 110, 46, 10, 10, 32, 84, 72, 73, 83, 32, 83, 79, 70, 84, 87, 65, 
            82, 69, 32, 73, 83, 32, 80, 82, 79, 86, 73, 68, 69, 68, 32, 66, 89, 32, 84, 72, 
            69, 32, 67, 79, 80, 89, 82, 73, 71, 72, 84, 32, 72, 79, 76, 68, 69, 82, 83, 32, 
            65, 78, 68, 32, 67, 79, 78, 84, 82, 73, 66, 85, 84, 79, 82, 83, 10, 32, 34, 65, 
            83, 32, 73, 83, 34, 32, 65, 78, 68, 32, 65, 78, 89, 32, 69, 88, 80, 82, 69, 83, 
            83, 32, 79, 82, 32, 73, 77, 80, 76, 73, 69, 68, 32, 87, 65, 82, 82, 65, 78, 84, 
            73, 69, 83, 44, 32, 73, 78, 67, 76, 85, 68, 73, 78, 71, 44, 32, 66, 85, 84, 32, 
            78, 79, 84, 10, 32, 76, 73, 77, 73, 84, 69, 68, 32, 84, 79, 44, 32, 84, 72, 69, 
            32, 73, 77, 80, 76, 73, 69, 68, 32, 87, 65, 82, 82, 65, 78, 84, 73, 69, 83, 32, 
            79, 70, 32, 77, 69, 82, 67, 72, 65, 78, 84, 65, 66, 73, 76, 73, 84, 89, 32, 65, 
            78, 68, 32, 70, 73, 84, 78, 69, 83, 83, 32, 70, 79, 82, 10, 32, 65, 32, 80, 65, 
            82, 84, 73, 67, 85, 76, 65, 82, 32, 80, 85, 82, 80, 79, 83, 69, 32, 65, 82, 69, 
            32, 68, 73, 83, 67, 76, 65, 73, 77, 69, 68, 46, 32, 73, 78, 32, 78, 79, 32, 69, 
            86, 69, 78, 84, 32, 83, 72, 65, 76, 76, 32, 84, 72, 69, 32, 67, 79, 80, 89, 82, 
            73, 71, 72, 84, 10, 32, 79, 87, 78, 69, 82, 32, 79, 82, 32, 67, 79, 78, 84, 82, 
            73, 66, 85, 84, 79, 82, 83, 32, 66, 69, 32, 76, 73, 65, 66, 76, 69, 32, 70, 79, 
            82, 32, 65, 78, 89, 32, 68, 73, 82, 69, 67, 84, 44, 32, 73, 78, 68, 73, 82, 69, 
            67, 84, 44, 32, 73, 78, 67, 73, 68, 69, 78, 84, 65, 76, 44, 10, 32, 83, 80, 69, 
            67, 73, 65, 76, 44, 32, 69, 88, 69, 77, 80, 76, 65, 82, 89, 44, 32, 79, 82, 32, 
            67, 79, 78, 83, 69, 81, 85, 69, 78, 84, 73, 65, 76, 32, 68, 65, 77, 65, 71, 69, 
            83, 32, 40, 73, 78, 67, 76, 85, 68, 73, 78, 71, 44, 32, 66, 85, 84, 32, 78, 79, 
            84, 10, 32, 76, 73, 77, 73, 84, 69, 68, 32, 84, 79, 44, 32, 80, 82, 79, 67, 85, 
            82, 69, 77, 69, 78, 84, 32, 79, 70, 32, 83, 85, 66, 83, 84, 73, 84, 85, 84, 69, 
            32, 71, 79, 79, 68, 83, 32, 79, 82, 32, 83, 69, 82, 86, 73, 67, 69, 83, 59, 32, 
            76, 79, 83, 83, 32, 79, 70, 32, 85, 83, 69, 44, 10, 32, 68, 65, 84, 65, 44, 32, 
            79, 82, 32, 80, 82, 79, 70, 73, 84, 83, 59, 32, 79, 82, 32, 66, 85, 83, 73, 78, 
            69, 83, 83, 32, 73, 78, 84, 69, 82, 82, 85, 80, 84, 73, 79, 78, 41, 32, 72, 79, 
            87, 69, 86, 69, 82, 32, 67, 65, 85, 83, 69, 68, 32, 65, 78, 68, 32, 79, 78, 32, 
            65, 78, 89, 10, 32, 84, 72, 69, 79, 82, 89, 32, 79, 70, 32, 76, 73, 65, 66, 73, 
            76, 73, 84, 89, 44, 32, 87, 72, 69, 84, 72, 69, 82, 32, 73, 78, 32, 67, 79, 78, 
            84, 82, 65, 67, 84, 44, 32, 83, 84, 82, 73, 67, 84, 32, 76, 73, 65, 66, 73, 76, 
            73, 84, 89, 44, 32, 79, 82, 32, 84, 79, 82, 84, 10, 32, 40, 73, 78, 67, 76, 85, 
            68, 73, 78, 71, 32, 78, 69, 71, 76, 73, 71, 69, 78, 67, 69, 32, 79, 82, 32, 79, 
            84, 72, 69, 82, 87, 73, 83, 69, 41, 32, 65, 82, 73, 83, 73, 78, 71, 32, 73, 78, 
            32, 65, 78, 89, 32, 87, 65, 89, 32, 79, 85, 84, 32, 79, 70, 32, 84, 72, 69, 32, 
            85, 83, 69, 10, 32, 79, 70, 32, 84, 72, 73, 83, 32, 83, 79, 70, 84, 87, 65, 82, 
            69, 44, 32, 69, 86, 69, 78, 32, 73, 70, 32, 65, 68, 86, 73, 83, 69, 68, 32, 79, 
            70, 32, 84, 72, 69, 32, 80, 79, 83, 83, 73, 66, 73, 76, 73, 84, 89, 32, 79, 70, 
            32, 83, 85, 67, 72, 32, 68, 65, 77, 65, 71, 69, 46, 10, 10, 8, 10, 1, 2, 18, 
            3, 31, 8, 19, 10, 8, 10, 1, 8, 18, 3, 32, 0, 56, 10, 9, 10, 2, 8, 1, 
            18, 3, 32, 0, 56, 10, 243, 5, 10, 2, 5, 0, 18, 4, 53, 0, 58, 1, 50, 230, 
            5, 32, 84, 104, 105, 115, 32, 100, 101, 102, 105, 110, 101, 115, 32, 116, 104, 101, 32, 99, 
            111, 110, 102, 111, 114, 109, 97, 110, 99, 101, 32, 116, 101, 115, 116, 105, 110, 103, 32, 112, 
            114, 111, 116, 111, 99, 111, 108, 46, 32, 32, 84, 104, 105, 115, 32, 112, 114, 111, 116, 111, 
            99, 111, 108, 32, 101, 120, 105, 115, 116, 115, 32, 98, 101, 116, 119, 101, 101, 110, 10, 32, 
            116, 104, 101, 32, 99, 111, 110, 102, 111, 114, 109, 97, 110, 99, 101, 32, 116, 101, 115, 116, 
            32, 115, 117, 105, 116, 101, 32, 105, 116, 115, 101, 108, 102, 32, 97, 110, 100, 32, 116, 104, 
            101, 32, 99, 111, 100, 101, 32, 98, 101, 105, 110, 103, 32, 116, 101, 115, 116, 101, 100, 46, 
            32, 32, 70, 111, 114, 32, 101, 97, 99, 104, 32, 116, 101, 115, 116, 44, 10, 32, 116, 104, 
            101, 32, 115, 117, 105, 116, 101, 32, 119, 105, 108, 108, 32, 115, 101, 110, 100, 32, 97, 32, 
            67, 111, 110, 102, 111, 114, 109, 97, 110, 99, 101, 82, 101, 113, 117, 101, 115, 116, 32, 109, 
            101, 115, 115, 97, 103, 101, 32, 97, 110, 100, 32, 101, 120, 112, 101, 99, 116, 32, 97, 10, 
            32, 67, 111, 110, 102, 111, 114, 109, 97, 110, 99, 101, 82, 101, 115, 112, 111, 110, 115, 101, 
            32, 109, 101, 115, 115, 97, 103, 101, 46, 10, 10, 32, 89, 111, 117, 32, 99, 97, 110, 32, 
            101, 105, 116, 104, 101, 114, 32, 114, 117, 110, 32, 116, 104, 101, 32, 116, 101, 115, 116, 115, 
            32, 105, 110, 32, 116, 119, 111, 32, 100, 105, 102, 102, 101, 114, 101, 110, 116, 32, 119, 97, 
            121, 115, 58, 10, 10, 32, 32, 32, 49, 46, 32, 105, 110, 45, 112, 114, 111, 99, 101, 115, 
            115, 32, 40, 117, 115, 105, 110, 103, 32, 116, 104, 101, 32, 105, 110, 116, 101, 114, 102, 97, 
            99, 101, 32, 105, 110, 32, 99, 111, 110, 102, 111, 114, 109, 97, 110, 99, 101, 95, 116, 101, 
            115, 116, 46, 104, 41, 46, 10, 10, 32, 32, 32, 50, 46, 32, 97, 115, 32, 97, 32, 115, 
            117, 98, 45, 112, 114, 111, 99, 101, 115, 115, 32, 99, 111, 109, 109, 117, 110, 105, 99, 97, 
            116, 105, 110, 103, 32, 111, 118, 101, 114, 32, 97, 32, 112, 105, 112, 101, 46, 32, 32, 73, 
            110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 32, 97, 98, 111, 117, 116, 32, 104, 111, 119, 
            32, 116, 111, 10, 32, 32, 32, 32, 32, 32, 100, 111, 32, 116, 104, 105, 115, 32, 105, 115, 
            32, 105, 110, 32, 99, 111, 110, 102, 111, 114, 109, 97, 110, 99, 101, 95, 116, 101, 115, 116, 
            95, 114, 117, 110, 110, 101, 114, 46, 99, 99, 46, 10, 10, 32, 80, 114, 111, 115, 47, 99, 
            111, 110, 115, 32, 111, 102, 32, 116, 104, 101, 32, 116, 119, 111, 32, 97, 112, 112, 114, 111, 
            97, 99, 104, 101, 115, 58, 10, 10, 32, 32, 32, 45, 32, 114, 117, 110, 110, 105, 110, 103, 
            32, 97, 115, 32, 97, 32, 115, 117, 98, 45, 112, 114, 111, 99, 101, 115, 115, 32, 105, 115, 
            32, 109, 117, 99, 104, 32, 115, 105, 109, 112, 108, 101, 114, 32, 102, 111, 114, 32, 108, 97, 
            110, 103, 117, 97, 103, 101, 115, 32, 111, 116, 104, 101, 114, 32, 116, 104, 97, 110, 32, 67, 
            47, 67, 43, 43, 46, 10, 10, 32, 32, 32, 45, 32, 114, 117, 110, 110, 105, 110, 103, 32, 
            97, 115, 32, 97, 32, 115, 117, 98, 45, 112, 114, 111, 99, 101, 115, 115, 32, 109, 97, 121, 
            32, 98, 101, 32, 109, 111, 114, 101, 32, 116, 114, 105, 99, 107, 121, 32, 105, 110, 32, 117, 
            110, 117, 115, 117, 97, 108, 32, 101, 110, 118, 105, 114, 111, 110, 109, 101, 110, 116, 115, 32, 
            108, 105, 107, 101, 10, 32, 32, 32, 32, 32, 105, 79, 83, 32, 97, 112, 112, 115, 44, 32, 
            119, 104, 101, 114, 101, 32, 102, 111, 114, 107, 47, 115, 116, 100, 105, 110, 47, 115, 116, 100, 
            111, 117, 116, 32, 97, 114, 101, 32, 110, 111, 116, 32, 97, 118, 97, 105, 108, 97, 98, 108, 
            101, 46, 10, 10, 10, 10, 3, 5, 0, 1, 18, 3, 53, 5, 15, 10, 11, 10, 4, 5, 
            0, 2, 0, 18, 3, 54, 2, 18, 10, 12, 10, 5, 5, 0, 2, 0, 1, 18, 3, 54, 
            2, 13, 10, 12, 10, 5, 5, 0, 2, 0, 2, 18, 3, 54, 16, 17, 10, 11, 10, 4, 
            5, 0, 2, 1, 18, 3, 55, 2, 15, 10, 12, 10, 5, 5, 0, 2, 1, 1, 18, 3, 
            55, 2, 10, 10, 12, 10, 5, 5, 0, 2, 1, 2, 18, 3, 55, 13, 14, 10, 11, 10, 
            4, 5, 0, 2, 2, 18, 3, 56, 2, 11, 10, 12, 10, 5, 5, 0, 2, 2, 1, 18, 
            3, 56, 2, 6, 10, 12, 10, 5, 5, 0, 2, 2, 2, 18, 3, 56, 9, 10, 10, 69, 
            10, 4, 5, 0, 2, 3, 18, 3, 57, 2, 11, 34, 56, 32, 71, 111, 111, 103, 108, 101, 
            32, 105, 110, 116, 101, 114, 110, 97, 108, 32, 111, 110, 108, 121, 46, 32, 79, 112, 101, 110, 
            115, 111, 117, 114, 99, 101, 32, 116, 101, 115, 116, 101, 101, 115, 32, 106, 117, 115, 116, 32, 
            115, 107, 105, 112, 32, 105, 116, 46, 10, 10, 12, 10, 5, 5, 0, 2, 3, 1, 18, 3, 
            57, 2, 6, 10, 12, 10, 5, 5, 0, 2, 3, 2, 18, 3, 57, 9, 10, 10, 10, 10, 
            2, 5, 1, 18, 4, 60, 0, 72, 1, 10, 10, 10, 3, 5, 1, 1, 18, 3, 60, 5, 
            17, 10, 11, 10, 4, 5, 1, 2, 0, 18, 3, 61, 2, 23, 10, 12, 10, 5, 5, 1, 
            2, 0, 1, 18, 3, 61, 2, 18, 10, 12, 10, 5, 5, 1, 2, 0, 2, 18, 3, 61, 
            21, 22, 10, 39, 10, 4, 5, 1, 2, 1, 18, 3, 62, 2, 18, 34, 26, 32, 84, 101, 
            115, 116, 32, 98, 105, 110, 97, 114, 121, 32, 119, 105, 114, 101, 32, 102, 111, 114, 109, 97, 
            116, 46, 10, 10, 12, 10, 5, 5, 1, 2, 1, 1, 18, 3, 62, 2, 13, 10, 12, 10, 
            5, 5, 1, 2, 1, 2, 18, 3, 62, 16, 17, 10, 37, 10, 4, 5, 1, 2, 2, 18, 
            3, 63, 2, 16, 34, 24, 32, 84, 101, 115, 116, 32, 106, 115, 111, 110, 32, 119, 105, 114, 
            101, 32, 102, 111, 114, 109, 97, 116, 46, 10, 10, 12, 10, 5, 5, 1, 2, 2, 1, 18, 
            3, 63, 2, 11, 10, 12, 10, 5, 5, 1, 2, 2, 2, 18, 3, 63, 14, 15, 10, 155, 
            2, 10, 4, 5, 1, 2, 3, 18, 3, 69, 2, 39, 26, 141, 2, 32, 83, 105, 109, 105, 
            108, 97, 114, 32, 116, 111, 32, 74, 83, 79, 78, 95, 84, 69, 83, 84, 46, 32, 72, 111, 
            119, 101, 118, 101, 114, 44, 32, 100, 117, 114, 105, 110, 103, 32, 112, 97, 114, 115, 105, 110, 
            103, 32, 106, 115, 111, 110, 44, 32, 116, 101, 115, 116, 101, 101, 32, 115, 104, 111, 117, 108, 
            100, 32, 105, 103, 110, 111, 114, 101, 10, 32, 117, 110, 107, 110, 111, 119, 110, 32, 102, 105, 
            101, 108, 100, 115, 46, 32, 84, 104, 105, 115, 32, 102, 101, 97, 116, 117, 114, 101, 32, 105, 
            115, 32, 111, 112, 116, 105, 111, 110, 97, 108, 46, 32, 69, 97, 99, 104, 32, 105, 109, 112, 
            108, 101, 109, 101, 110, 116, 97, 116, 105, 111, 110, 32, 99, 97, 110, 32, 100, 101, 115, 99, 
            105, 100, 101, 10, 32, 119, 104, 101, 116, 104, 101, 114, 32, 116, 111, 32, 115, 117, 112, 112, 
            111, 114, 116, 32, 105, 116, 46, 32, 32, 83, 101, 101, 10, 32, 104, 116, 116, 112, 115, 58, 
            47, 47, 100, 101, 118, 101, 108, 111, 112, 101, 114, 115, 46, 103, 111, 111, 103, 108, 101, 46, 
            99, 111, 109, 47, 112, 114, 111, 116, 111, 99, 111, 108, 45, 98, 117, 102, 102, 101, 114, 115, 
            47, 100, 111, 99, 115, 47, 112, 114, 111, 116, 111, 51, 35, 106, 115, 111, 110, 95, 111, 112, 
            116, 105, 111, 110, 115, 10, 32, 102, 111, 114, 32, 109, 111, 114, 101, 32, 100, 101, 116, 97, 
            105, 108, 46, 10, 10, 12, 10, 5, 5, 1, 2, 3, 1, 18, 3, 69, 2, 34, 10, 12, 
            10, 5, 5, 1, 2, 3, 2, 18, 3, 69, 37, 38, 10, 59, 10, 4, 5, 1, 2, 4, 
            18, 3, 70, 2, 16, 34, 46, 32, 84, 101, 115, 116, 32, 106, 115, 112, 98, 32, 119, 105, 
            114, 101, 32, 102, 111, 114, 109, 97, 116, 46, 32, 71, 111, 111, 103, 108, 101, 32, 105, 110, 
            116, 101, 114, 110, 97, 108, 32, 111, 110, 108, 121, 46, 10, 10, 12, 10, 5, 5, 1, 2, 
            4, 1, 18, 3, 70, 2, 11, 10, 12, 10, 5, 5, 1, 2, 4, 2, 18, 3, 70, 14, 
            15, 10, 147, 2, 10, 2, 4, 0, 18, 4, 79, 0, 109, 1, 26, 134, 2, 32, 82, 101, 
            112, 114, 101, 115, 101, 110, 116, 115, 32, 97, 32, 115, 105, 110, 103, 108, 101, 32, 116, 101, 
            115, 116, 32, 99, 97, 115, 101, 39, 115, 32, 105, 110, 112, 117, 116, 46, 32, 32, 84, 104, 
            101, 32, 116, 101, 115, 116, 101, 101, 32, 115, 104, 111, 117, 108, 100, 58, 10, 10, 32, 32, 
            32, 49, 46, 32, 112, 97, 114, 115, 101, 32, 116, 104, 105, 115, 32, 112, 114, 111, 116, 111, 
            32, 40, 119, 104, 105, 99, 104, 32, 115, 104, 111, 117, 108, 100, 32, 97, 108, 119, 97, 121, 
            115, 32, 115, 117, 99, 99, 101, 101, 100, 41, 10, 32, 32, 32, 50, 46, 32, 112, 97, 114, 
            115, 101, 32, 116, 104, 101, 32, 112, 114, 111, 116, 111, 98, 117, 102, 32, 111, 114, 32, 74, 
            83, 79, 78, 32, 112, 97, 121, 108, 111, 97, 100, 32, 105, 110, 32, 34, 112, 97, 121, 108, 
            111, 97, 100, 34, 32, 40, 119, 104, 105, 99, 104, 32, 109, 97, 121, 32, 102, 97, 105, 108, 
            41, 10, 32, 32, 32, 51, 46, 32, 105, 102, 32, 116, 104, 101, 32, 112, 97, 114, 115, 101, 
            32, 115, 117, 99, 99, 101, 101, 100, 101, 100, 44, 32, 115, 101, 114, 105, 97, 108, 105, 122, 
            101, 32, 116, 104, 101, 32, 109, 101, 115, 115, 97, 103, 101, 32, 105, 110, 32, 116, 104, 101, 
            32, 114, 101, 113, 117, 101, 115, 116, 101, 100, 32, 102, 111, 114, 109, 97, 116, 46, 10, 10, 
            10, 10, 3, 4, 0, 1, 18, 3, 79, 8, 26, 10, 137, 3, 10, 4, 4, 0, 8, 0, 
            18, 4, 87, 2, 92, 3, 26, 250, 2, 32, 84, 104, 101, 32, 112, 97, 121, 108, 111, 97, 
            100, 32, 40, 119, 104, 101, 116, 104, 101, 114, 32, 112, 114, 111, 116, 111, 98, 117, 102, 32, 
            111, 102, 32, 74, 83, 79, 78, 41, 32, 105, 115, 32, 97, 108, 119, 97, 121, 115, 32, 102, 
            111, 114, 32, 97, 10, 32, 112, 114, 111, 116, 111, 98, 117, 102, 95, 116, 101, 115, 116, 95, 
            109, 101, 115, 115, 97, 103, 101, 115, 46, 112, 114, 111, 116, 111, 51, 46, 84, 101, 115, 116, 
            65, 108, 108, 84, 121, 112, 101, 115, 32, 112, 114, 111, 116, 111, 32, 40, 97, 115, 32, 100, 
            101, 102, 105, 110, 101, 100, 32, 105, 110, 10, 32, 115, 114, 99, 47, 103, 111, 111, 103, 108, 
            101, 47, 112, 114, 111, 116, 111, 98, 117, 102, 47, 112, 114, 111, 116, 111, 51, 95, 116, 101, 
            115, 116, 95, 109, 101, 115, 115, 97, 103, 101, 115, 46, 112, 114, 111, 116, 111, 41, 46, 10, 
            10, 32, 84, 79, 68, 79, 40, 104, 97, 98, 101, 114, 109, 97, 110, 41, 58, 32, 105, 102, 
            47, 119, 104, 101, 110, 32, 119, 101, 32, 101, 120, 112, 97, 110, 100, 32, 116, 104, 101, 32, 
            99, 111, 110, 102, 111, 114, 109, 97, 110, 99, 101, 32, 116, 101, 115, 116, 115, 32, 116, 111, 
            32, 115, 117, 112, 112, 111, 114, 116, 32, 112, 114, 111, 116, 111, 50, 44, 10, 32, 119, 101, 
            32, 119, 105, 108, 108, 32, 119, 97, 110, 116, 32, 116, 111, 32, 105, 110, 99, 108, 117, 100, 
            101, 32, 97, 32, 102, 105, 101, 108, 100, 32, 116, 104, 97, 116, 32, 108, 101, 116, 115, 32, 
            116, 104, 101, 32, 112, 97, 121, 108, 111, 97, 100, 47, 114, 101, 115, 112, 111, 110, 115, 101, 
            32, 98, 101, 32, 97, 10, 32, 112, 114, 111, 116, 111, 98, 117, 102, 95, 116, 101, 115, 116, 
            95, 109, 101, 115, 115, 97, 103, 101, 115, 46, 112, 114, 111, 116, 111, 50, 46, 84, 101, 115, 
            116, 65, 108, 108, 84, 121, 112, 101, 115, 32, 109, 101, 115, 115, 97, 103, 101, 32, 105, 110, 
            115, 116, 101, 97, 100, 46, 10, 10, 12, 10, 5, 4, 0, 8, 0, 1, 18, 3, 87, 8, 
            15, 10, 11, 10, 4, 4, 0, 2, 0, 18, 3, 88, 4, 31, 10, 12, 10, 5, 4, 0, 
            2, 0, 5, 18, 3, 88, 4, 9, 10, 12, 10, 5, 4, 0, 2, 0, 1, 18, 3, 88, 
            10, 26, 10, 12, 10, 5, 4, 0, 2, 0, 3, 18, 3, 88, 29, 30, 10, 11, 10, 4, 
            4, 0, 2, 1, 18, 3, 89, 4, 28, 10, 12, 10, 5, 4, 0, 2, 1, 5, 18, 3, 
            89, 4, 10, 10, 12, 10, 5, 4, 0, 2, 1, 1, 18, 3, 89, 11, 23, 10, 12, 10, 
            5, 4, 0, 2, 1, 3, 18, 3, 89, 26, 27, 10, 36, 10, 4, 4, 0, 2, 2, 18, 
            3, 90, 4, 28, 34, 23, 32, 71, 111, 111, 103, 108, 101, 32, 105, 110, 116, 101, 114, 110, 
            97, 108, 32, 111, 110, 108, 121, 46, 10, 10, 12, 10, 5, 4, 0, 2, 2, 5, 18, 3, 
            90, 4, 10, 10, 12, 10, 5, 4, 0, 2, 2, 1, 18, 3, 90, 11, 23, 10, 12, 10, 
            5, 4, 0, 2, 2, 3, 18, 3, 90, 26, 27, 10, 71, 10, 4, 4, 0, 2, 3, 18, 
            3, 95, 2, 41, 26, 58, 32, 87, 104, 105, 99, 104, 32, 102, 111, 114, 109, 97, 116, 32, 
            115, 104, 111, 117, 108, 100, 32, 116, 104, 101, 32, 116, 101, 115, 116, 101, 101, 32, 115, 101, 
            114, 105, 97, 108, 105, 122, 101, 32, 105, 116, 115, 32, 109, 101, 115, 115, 97, 103, 101, 32, 
            116, 111, 63, 10, 10, 13, 10, 5, 4, 0, 2, 3, 4, 18, 4, 95, 2, 92, 3, 10, 
            12, 10, 5, 4, 0, 2, 3, 6, 18, 3, 95, 2, 12, 10, 12, 10, 5, 4, 0, 2, 
            3, 1, 18, 3, 95, 13, 36, 10, 12, 10, 5, 4, 0, 2, 3, 3, 18, 3, 95, 39, 
            40, 10, 186, 1, 10, 4, 4, 0, 2, 4, 18, 3, 100, 2, 26, 26, 172, 1, 32, 84, 
            104, 101, 32, 102, 117, 108, 108, 32, 110, 97, 109, 101, 32, 102, 111, 114, 32, 116, 104, 101, 
            32, 116, 101, 115, 116, 32, 109, 101, 115, 115, 97, 103, 101, 32, 116, 111, 32, 117, 115, 101, 
            59, 32, 102, 111, 114, 32, 116, 104, 101, 32, 109, 111, 109, 101, 110, 116, 44, 32, 101, 105, 
            116, 104, 101, 114, 58, 10, 32, 112, 114, 111, 116, 111, 98, 117, 102, 95, 116, 101, 115, 116, 
            95, 109, 101, 115, 115, 97, 103, 101, 115, 46, 112, 114, 111, 116, 111, 51, 46, 84, 101, 115, 
            116, 65, 108, 108, 84, 121, 112, 101, 115, 80, 114, 111, 116, 111, 51, 32, 111, 114, 10, 32, 
            112, 114, 111, 116, 111, 98, 117, 102, 95, 116, 101, 115, 116, 95, 109, 101, 115, 115, 97, 103, 
            101, 115, 46, 112, 114, 111, 116, 111, 50, 46, 84, 101, 115, 116, 65, 108, 108, 84, 121, 112, 
            101, 115, 80, 114, 111, 116, 111, 50, 46, 10, 10, 13, 10, 5, 4, 0, 2, 4, 4, 18, 
            4, 100, 2, 95, 41, 10, 12, 10, 5, 4, 0, 2, 4, 5, 18, 3, 100, 2, 8, 10, 
            12, 10, 5, 4, 0, 2, 4, 1, 18, 3, 100, 9, 21, 10, 12, 10, 5, 4, 0, 2, 
            4, 3, 18, 3, 100, 24, 25, 10, 183, 1, 10, 4, 4, 0, 2, 5, 18, 3, 105, 2, 
            33, 26, 169, 1, 32, 69, 97, 99, 104, 32, 116, 101, 115, 116, 32, 105, 115, 32, 103, 105, 
            118, 101, 110, 32, 97, 32, 115, 112, 101, 99, 105, 102, 105, 99, 32, 116, 101, 115, 116, 32, 
            99, 97, 116, 101, 103, 111, 114, 121, 46, 32, 83, 111, 109, 101, 32, 99, 97, 116, 101, 103, 
            111, 114, 121, 32, 109, 97, 121, 32, 110, 101, 101, 100, 10, 32, 115, 112, 101, 100, 105, 102, 
            105, 99, 32, 115, 117, 112, 112, 111, 114, 116, 32, 105, 110, 32, 116, 101, 115, 116, 101, 101, 
            32, 112, 114, 111, 103, 114, 97, 109, 115, 46, 32, 82, 101, 102, 101, 114, 32, 116, 111, 32, 
            116, 104, 101, 32, 100, 101, 102, 105, 110, 116, 105, 111, 110, 32, 111, 102, 32, 84, 101, 115, 
            116, 67, 97, 116, 101, 103, 111, 114, 121, 10, 32, 102, 111, 114, 32, 109, 111, 114, 101, 32, 
            105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 46, 10, 10, 13, 10, 5, 4, 0, 2, 
            5, 4, 18, 4, 105, 2, 100, 26, 10, 12, 10, 5, 4, 0, 2, 5, 6, 18, 3, 105, 
            2, 14, 10, 12, 10, 5, 4, 0, 2, 5, 1, 18, 3, 105, 15, 28, 10, 12, 10, 5, 
            4, 0, 2, 5, 3, 18, 3, 105, 31, 32, 10, 54, 10, 4, 4, 0, 2, 6, 18, 3, 
            108, 2, 47, 26, 41, 32, 83, 112, 101, 99, 105, 102, 121, 32, 100, 101, 116, 97, 105, 108, 
            115, 32, 102, 111, 114, 32, 104, 111, 119, 32, 116, 111, 32, 101, 110, 99, 111, 100, 101, 32, 
            106, 115, 112, 98, 46, 10, 10, 13, 10, 5, 4, 0, 2, 6, 4, 18, 4, 108, 2, 105, 
            33, 10, 12, 10, 5, 4, 0, 2, 6, 6, 18, 3, 108, 2, 20, 10, 12, 10, 5, 4, 
            0, 2, 6, 1, 18, 3, 108, 21, 42, 10, 12, 10, 5, 4, 0, 2, 6, 3, 18, 3, 
            108, 45, 46, 10, 54, 10, 2, 4, 1, 18, 5, 112, 0, 148, 1, 1, 26, 41, 32, 82, 
            101, 112, 114, 101, 115, 101, 110, 116, 115, 32, 97, 32, 115, 105, 110, 103, 108, 101, 32, 116, 
            101, 115, 116, 32, 99, 97, 115, 101, 39, 115, 32, 111, 117, 116, 112, 117, 116, 46, 10, 10, 
            10, 10, 3, 4, 1, 1, 18, 3, 112, 8, 27, 10, 13, 10, 4, 4, 1, 8, 0, 18, 
            5, 113, 2, 147, 1, 3, 10, 12, 10, 5, 4, 1, 8, 0, 1, 18, 3, 113, 8, 14, 
            10, 159, 2, 10, 4, 4, 1, 2, 0, 18, 3, 119, 4, 27, 26, 145, 2, 32, 84, 104, 
            105, 115, 32, 115, 116, 114, 105, 110, 103, 32, 115, 104, 111, 117, 108, 100, 32, 98, 101, 32, 
            115, 101, 116, 32, 116, 111, 32, 105, 110, 100, 105, 99, 97, 116, 101, 32, 112, 97, 114, 115, 
            105, 110, 103, 32, 102, 97, 105, 108, 101, 100, 46, 32, 32, 84, 104, 101, 32, 115, 116, 114, 
            105, 110, 103, 32, 99, 97, 110, 10, 32, 112, 114, 111, 118, 105, 100, 101, 32, 109, 111, 114, 
            101, 32, 105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 32, 97, 98, 111, 117, 116, 32, 
            116, 104, 101, 32, 112, 97, 114, 115, 101, 32, 101, 114, 114, 111, 114, 32, 105, 102, 32, 105, 
            116, 32, 105, 115, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 46, 10, 10, 32, 83, 101, 
            116, 116, 105, 110, 103, 32, 116, 104, 105, 115, 32, 115, 116, 114, 105, 110, 103, 32, 100, 111, 
            101, 115, 32, 110, 111, 116, 32, 110, 101, 99, 101, 115, 115, 97, 114, 105, 108, 121, 32, 109, 
            101, 97, 110, 32, 116, 104, 101, 32, 116, 101, 115, 116, 101, 101, 32, 102, 97, 105, 108, 101, 
            100, 32, 116, 104, 101, 10, 32, 116, 101, 115, 116, 46, 32, 32, 83, 111, 109, 101, 32, 111, 
            102, 32, 116, 104, 101, 32, 116, 101, 115, 116, 32, 99, 97, 115, 101, 115, 32, 97, 114, 101, 
            32, 105, 110, 116, 101, 110, 116, 105, 111, 110, 97, 108, 108, 121, 32, 105, 110, 118, 97, 108, 
            105, 100, 32, 105, 110, 112, 117, 116, 46, 10, 10, 12, 10, 5, 4, 1, 2, 0, 5, 18, 
            3, 119, 4, 10, 10, 12, 10, 5, 4, 1, 2, 0, 1, 18, 3, 119, 11, 22, 10, 12, 
            10, 5, 4, 1, 2, 0, 3, 18, 3, 119, 25, 26, 10, 163, 1, 10, 4, 4, 1, 2, 
            1, 18, 3, 124, 4, 31, 26, 149, 1, 32, 73, 102, 32, 116, 104, 101, 32, 105, 110, 112, 
            117, 116, 32, 119, 97, 115, 32, 115, 117, 99, 99, 101, 115, 115, 102, 117, 108, 108, 121, 32, 
            112, 97, 114, 115, 101, 100, 32, 98, 117, 116, 32, 101, 114, 114, 111, 114, 115, 32, 111, 99, 
            99, 117, 114, 114, 101, 100, 32, 119, 104, 101, 110, 10, 32, 115, 101, 114, 105, 97, 108, 105, 
            122, 105, 110, 103, 32, 105, 116, 32, 116, 111, 32, 116, 104, 101, 32, 114, 101, 113, 117, 101, 
            115, 116, 101, 100, 32, 111, 117, 116, 112, 117, 116, 32, 102, 111, 114, 109, 97, 116, 44, 32, 
            115, 101, 116, 32, 116, 104, 101, 32, 101, 114, 114, 111, 114, 32, 109, 101, 115, 115, 97, 103, 
            101, 32, 105, 110, 10, 32, 116, 104, 105, 115, 32, 102, 105, 101, 108, 100, 46, 10, 10, 12, 
            10, 5, 4, 1, 2, 1, 5, 18, 3, 124, 4, 10, 10, 12, 10, 5, 4, 1, 2, 1, 
            1, 18, 3, 124, 11, 26, 10, 12, 10, 5, 4, 1, 2, 1, 3, 18, 3, 124, 29, 30, 
            10, 176, 1, 10, 4, 4, 1, 2, 2, 18, 4, 129, 1, 4, 29, 26, 161, 1, 32, 84, 
            104, 105, 115, 32, 115, 104, 111, 117, 108, 100, 32, 98, 101, 32, 115, 101, 116, 32, 105, 102, 
            32, 115, 111, 109, 101, 32, 111, 116, 104, 101, 114, 32, 101, 114, 114, 111, 114, 32, 111, 99, 
            99, 117, 114, 114, 101, 100, 46, 32, 32, 84, 104, 105, 115, 32, 119, 105, 108, 108, 32, 97, 
            108, 119, 97, 121, 115, 10, 32, 105, 110, 100, 105, 99, 97, 116, 101, 32, 116, 104, 97, 116, 
            32, 116, 104, 101, 32, 116, 101, 115, 116, 32, 102, 97, 105, 108, 101, 100, 46, 32, 32, 84, 
            104, 101, 32, 115, 116, 114, 105, 110, 103, 32, 99, 97, 110, 32, 112, 114, 111, 118, 105, 100, 
            101, 32, 109, 111, 114, 101, 32, 105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 10, 32, 
            97, 98, 111, 117, 116, 32, 116, 104, 101, 32, 102, 97, 105, 108, 117, 114, 101, 46, 10, 10, 
            13, 10, 5, 4, 1, 2, 2, 5, 18, 4, 129, 1, 4, 10, 10, 13, 10, 5, 4, 1, 
            2, 2, 1, 18, 4, 129, 1, 11, 24, 10, 13, 10, 5, 4, 1, 2, 2, 3, 18, 4, 
            129, 1, 27, 28, 10, 144, 1, 10, 4, 4, 1, 2, 3, 18, 4, 133, 1, 4, 31, 26, 
            129, 1, 32, 73, 102, 32, 116, 104, 101, 32, 105, 110, 112, 117, 116, 32, 119, 97, 115, 32, 
            115, 117, 99, 99, 101, 115, 115, 102, 117, 108, 108, 121, 32, 112, 97, 114, 115, 101, 100, 32, 
            97, 110, 100, 32, 116, 104, 101, 32, 114, 101, 113, 117, 101, 115, 116, 101, 100, 32, 111, 117, 
            116, 112, 117, 116, 32, 119, 97, 115, 10, 32, 112, 114, 111, 116, 111, 98, 117, 102, 44, 32, 
            115, 101, 114, 105, 97, 108, 105, 122, 101, 32, 105, 116, 32, 116, 111, 32, 112, 114, 111, 116, 
            111, 98, 117, 102, 32, 97, 110, 100, 32, 115, 101, 116, 32, 105, 116, 32, 105, 110, 32, 116, 
            104, 105, 115, 32, 102, 105, 101, 108, 100, 46, 10, 10, 13, 10, 5, 4, 1, 2, 3, 5, 
            18, 4, 133, 1, 4, 9, 10, 13, 10, 5, 4, 1, 2, 3, 1, 18, 4, 133, 1, 10, 
            26, 10, 13, 10, 5, 4, 1, 2, 3, 3, 18, 4, 133, 1, 29, 30, 10, 132, 1, 10, 
            4, 4, 1, 2, 4, 18, 4, 137, 1, 4, 28, 26, 118, 32, 73, 102, 32, 116, 104, 101, 
            32, 105, 110, 112, 117, 116, 32, 119, 97, 115, 32, 115, 117, 99, 99, 101, 115, 115, 102, 117, 
            108, 108, 121, 32, 112, 97, 114, 115, 101, 100, 32, 97, 110, 100, 32, 116, 104, 101, 32, 114, 
            101, 113, 117, 101, 115, 116, 101, 100, 32, 111, 117, 116, 112, 117, 116, 32, 119, 97, 115, 32, 
            74, 83, 79, 78, 44, 10, 32, 115, 101, 114, 105, 97, 108, 105, 122, 101, 32, 116, 111, 32, 
            74, 83, 79, 78, 32, 97, 110, 100, 32, 115, 101, 116, 32, 105, 116, 32, 105, 110, 32, 116, 
            104, 105, 115, 32, 102, 105, 101, 108, 100, 46, 10, 10, 13, 10, 5, 4, 1, 2, 4, 5, 
            18, 4, 137, 1, 4, 10, 10, 13, 10, 5, 4, 1, 2, 4, 1, 18, 4, 137, 1, 11, 
            23, 10, 13, 10, 5, 4, 1, 2, 4, 3, 18, 4, 137, 1, 26, 27, 10, 129, 1, 10, 
            4, 4, 1, 2, 5, 18, 4, 141, 1, 4, 23, 26, 115, 32, 70, 111, 114, 32, 119, 104, 
            101, 110, 32, 116, 104, 101, 32, 116, 101, 115, 116, 101, 101, 32, 115, 107, 105, 112, 112, 101, 
            100, 32, 116, 104, 101, 32, 116, 101, 115, 116, 44, 32, 108, 105, 107, 101, 108, 121, 32, 98, 
            101, 99, 97, 117, 115, 101, 32, 97, 32, 99, 101, 114, 116, 97, 105, 110, 32, 102, 101, 97, 
            116, 117, 114, 101, 10, 32, 119, 97, 115, 110, 39, 116, 32, 115, 117, 112, 112, 111, 114, 116, 
            101, 100, 44, 32, 108, 105, 107, 101, 32, 74, 83, 79, 78, 32, 105, 110, 112, 117, 116, 47, 
            111, 117, 116, 112, 117, 116, 46, 10, 10, 13, 10, 5, 4, 1, 2, 5, 5, 18, 4, 141, 
            1, 4, 10, 10, 13, 10, 5, 4, 1, 2, 5, 1, 18, 4, 141, 1, 11, 18, 10, 13, 
            10, 5, 4, 1, 2, 5, 3, 18, 4, 141, 1, 21, 22, 10, 208, 1, 10, 4, 4, 1, 
            2, 6, 18, 4, 146, 1, 4, 28, 26, 193, 1, 32, 73, 102, 32, 116, 104, 101, 32, 105, 
            110, 112, 117, 116, 32, 119, 97, 115, 32, 115, 117, 99, 99, 101, 115, 115, 102, 117, 108, 108, 
            121, 32, 112, 97, 114, 115, 101, 100, 32, 97, 110, 100, 32, 116, 104, 101, 32, 114, 101, 113, 
            117, 101, 115, 116, 101, 100, 32, 111, 117, 116, 112, 117, 116, 32, 119, 97, 115, 32, 74, 83, 
            80, 66, 44, 10, 32, 115, 101, 114, 105, 97, 108, 105, 122, 101, 32, 116, 111, 32, 74, 83, 
            80, 66, 32, 97, 110, 100, 32, 115, 101, 116, 32, 105, 116, 32, 105, 110, 32, 116, 104, 105, 
            115, 32, 102, 105, 101, 108, 100, 46, 32, 74, 83, 80, 66, 32, 105, 115, 32, 103, 111, 111, 
            103, 108, 101, 32, 105, 110, 116, 101, 114, 110, 97, 108, 32, 111, 110, 108, 121, 10, 32, 102, 
            111, 114, 109, 97, 116, 46, 32, 79, 112, 101, 110, 115, 111, 117, 114, 99, 101, 32, 116, 101, 
            115, 116, 101, 101, 115, 32, 99, 97, 110, 32, 106, 117, 115, 116, 32, 115, 107, 105, 112, 32, 
            105, 116, 46, 10, 10, 13, 10, 5, 4, 1, 2, 6, 5, 18, 4, 146, 1, 4, 10, 10, 
            13, 10, 5, 4, 1, 2, 6, 1, 18, 4, 146, 1, 11, 23, 10, 13, 10, 5, 4, 1, 
            2, 6, 3, 18, 4, 146, 1, 26, 27, 10, 49, 10, 2, 4, 2, 18, 6, 151, 1, 0, 
            154, 1, 1, 26, 35, 32, 69, 110, 99, 111, 100, 105, 110, 103, 32, 111, 112, 116, 105, 111, 
            110, 115, 32, 102, 111, 114, 32, 106, 115, 112, 98, 32, 102, 111, 114, 109, 97, 116, 46, 10, 
            10, 11, 10, 3, 4, 2, 1, 18, 4, 151, 1, 8, 26, 10, 86, 10, 4, 4, 2, 2, 
            0, 18, 4, 153, 1, 2, 37, 26, 72, 32, 69, 110, 99, 111, 100, 101, 32, 116, 104, 101, 
            32, 118, 97, 108, 117, 101, 32, 102, 105, 101, 108, 100, 32, 111, 102, 32, 65, 110, 121, 32, 
            97, 115, 32, 106, 115, 112, 98, 32, 97, 114, 114, 97, 121, 32, 105, 102, 32, 116, 117, 114, 
            101, 44, 32, 111, 116, 104, 101, 114, 119, 105, 115, 101, 32, 98, 105, 110, 97, 114, 121, 46, 
            10, 10, 15, 10, 5, 4, 2, 2, 0, 4, 18, 6, 153, 1, 2, 151, 1, 28, 10, 13, 
            10, 5, 4, 2, 2, 0, 5, 18, 4, 153, 1, 2, 6, 10, 13, 10, 5, 4, 2, 2, 
            0, 1, 18, 4, 153, 1, 7, 32, 10, 13, 10, 5, 4, 2, 2, 0, 3, 18, 4, 153, 
            1, 35, 36, 98, 6, 112, 114, 111, 116, 111, 51, 
        ].as_ref()).expect("Could not read file descriptor")]);
        FILE_DEPS = ::std::option::Option::Some([]);
        FILE_POOL = ::std::option::Option::Some(::protrust::reflect::DescriptorPool::build_generated_pool(
            FILE_PROTO.as_ref().unwrap(),
            FILE_DEPS.as_ref().unwrap()
        ));
        FILE_DESCRIPTOR = ::std::option::Option::Some(FILE_POOL.as_ref().unwrap().find_file_by_name("conformance.proto").unwrap());
    }
}

pub fn pool() -> &'static ::protrust::reflect::DescriptorPool<'static> {
    unsafe {
        FILE_ONCE.call_once(file_once_init);
        FILE_POOL.as_ref().unwrap()
    }
}
pub fn file() -> &'static ::protrust::reflect::FileDescriptor {
    unsafe {
        FILE_ONCE.call_once(file_once_init);
        FILE_DESCRIPTOR.as_ref().unwrap()
    }
}
#[derive(Debug, PartialEq)]
pub struct ConformanceRequest {
    pub requested_output_format: ::protrust::EnumValue<self::WireFormat>,
    pub message_type: ::std::string::String,
    pub test_category: ::protrust::EnumValue<self::TestCategory>,
    pub jspb_encoding_options: ::std::option::Option<::std::boxed::Box<self::JspbEncodingConfig>>,
    pub payload: ConformanceRequest_Payload,
    unknown_fields: ::protrust::UnknownFieldSet
}
#[derive(Clone, Debug, PartialEq)]
pub enum ConformanceRequest_Payload {
    None,
    ProtobufPayload(::std::vec::Vec<u8>),
    JsonPayload(::std::string::String),
    JspbPayload(::std::string::String),
}
impl ::protrust::CodedMessage for self::ConformanceRequest {
    fn merge_from(&mut self, input: &mut ::protrust::io::CodedInput) -> ::protrust::io::InputResult<()> {
        while let ::std::option::Option::Some(tag) = input.read_tag()? {
            match tag.get() {
                10 => self.payload = self::ConformanceRequest_Payload::ProtobufPayload(input.read_bytes()?),
                18 => self.payload = self::ConformanceRequest_Payload::JsonPayload(input.read_string()?),
                58 => self.payload = self::ConformanceRequest_Payload::JspbPayload(input.read_string()?),
                24 => self.requested_output_format = input.read_enum_value()?,
                34 => self.message_type = input.read_string()?,
                40 => self.test_category = input.read_enum_value()?,
                50 => input.read_message(self.jspb_encoding_options.get_or_insert_with(::protrust::LiteMessage::new))?,
                tag => self.unknown_fields.merge_from(tag, input)?
            }
        }
        ::std::result::Result::Ok(())
    }
    fn calculate_size(&self) -> i32 {
        let mut size = 0i32;
        if let self::ConformanceRequest_Payload::ProtobufPayload(payload) = &self.payload {
            size += 1;
            size += ::protrust::io::sizes::bytes(payload);
        }
        if let self::ConformanceRequest_Payload::JsonPayload(payload) = &self.payload {
            size += 1;
            size += ::protrust::io::sizes::string(payload);
        }
        if let self::ConformanceRequest_Payload::JspbPayload(payload) = &self.payload {
            size += 1;
            size += ::protrust::io::sizes::string(payload);
        }
        let requested_output_format = self.requested_output_format;
        if requested_output_format != Self::REQUESTED_OUTPUT_FORMAT_DEFAULT_VALUE {
            size += 1;
            size += ::protrust::io::sizes::enum_value(requested_output_format);
        }
        let message_type = &self.message_type;
        if message_type != Self::MESSAGE_TYPE_DEFAULT_VALUE {
            size += 1;
            size += ::protrust::io::sizes::string(message_type);
        }
        let test_category = self.test_category;
        if test_category != Self::TEST_CATEGORY_DEFAULT_VALUE {
            size += 1;
            size += ::protrust::io::sizes::enum_value(test_category);
        }
        let jspb_encoding_options = &self.jspb_encoding_options;
        if let ::std::option::Option::Some(jspb_encoding_options) = jspb_encoding_options {
            size += 1;
            size += ::protrust::io::sizes::message(jspb_encoding_options);
        }
        size += self.unknown_fields.calculate_size();
        size
    }
    fn write_to(&self, output: &mut ::protrust::io::CodedOutput) -> ::protrust::io::OutputResult {
        if let self::ConformanceRequest_Payload::ProtobufPayload(payload) = &self.payload {
            output.write_raw_tag_bytes(&[10])?;
            output.write_bytes(payload)?;
        }
        if let self::ConformanceRequest_Payload::JsonPayload(payload) = &self.payload {
            output.write_raw_tag_bytes(&[18])?;
            output.write_string(payload)?;
        }
        if let self::ConformanceRequest_Payload::JspbPayload(payload) = &self.payload {
            output.write_raw_tag_bytes(&[58])?;
            output.write_string(payload)?;
        }
        let requested_output_format = self.requested_output_format;
        if requested_output_format != Self::REQUESTED_OUTPUT_FORMAT_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[24])?;
            output.write_enum_value(requested_output_format)?;
        }
        let message_type = &self.message_type;
        if message_type != Self::MESSAGE_TYPE_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[34])?;
            output.write_string(message_type)?;
        }
        let test_category = self.test_category;
        if test_category != Self::TEST_CATEGORY_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[40])?;
            output.write_enum_value(test_category)?;
        }
        let jspb_encoding_options = &self.jspb_encoding_options;
        if let ::std::option::Option::Some(jspb_encoding_options) = jspb_encoding_options {
            output.write_raw_tag_bytes(&[50])?;
            output.write_message(jspb_encoding_options)?;
        }
        self.unknown_fields.write_to(output)?;
        ::std::result::Result::Ok(())
    }
}
impl ::protrust::LiteMessage for self::ConformanceRequest {
    fn new() -> Self {
        Self {
            requested_output_format: Self::REQUESTED_OUTPUT_FORMAT_DEFAULT_VALUE,
            message_type: ::std::string::String::new(),
            test_category: Self::TEST_CATEGORY_DEFAULT_VALUE,
            jspb_encoding_options: ::std::option::Option::None,
            payload: self::ConformanceRequest_Payload::None,
            unknown_fields: ::protrust::UnknownFieldSet::new()
        }
    }
}
impl ::std::clone::Clone for self::ConformanceRequest {
    fn clone(&self) -> Self {
        Self {
            requested_output_format: self.requested_output_format.clone(),
            message_type: self.message_type.clone(),
            test_category: self.test_category.clone(),
            jspb_encoding_options: self.jspb_encoding_options.clone(),
            payload: self.payload.clone(),
            unknown_fields: self.unknown_fields.clone()
        }
    }
    fn clone_from(&mut self, other: &Self) {
        if let self::ConformanceRequest_Payload::ProtobufPayload(payload) = &other.payload {
            self.payload = self::ConformanceRequest_Payload::ProtobufPayload(payload.clone());
        }
        if let self::ConformanceRequest_Payload::JsonPayload(payload) = &other.payload {
            self.payload = self::ConformanceRequest_Payload::JsonPayload(payload.clone());
        }
        if let self::ConformanceRequest_Payload::JspbPayload(payload) = &other.payload {
            self.payload = self::ConformanceRequest_Payload::JspbPayload(payload.clone());
        }
        self.requested_output_format = other.requested_output_format;
        self.message_type = other.message_type.clone();
        self.test_category = other.test_category;
        if let ::std::option::Option::Some(jspb_encoding_options) = &other.jspb_encoding_options {
            self.jspb_encoding_options.get_or_insert_with(::protrust::LiteMessage::new).clone_from(jspb_encoding_options);
        }
        self.unknown_fields.clone_from(&other.unknown_fields);
    }
}
impl ::protrust::Message for self::ConformanceRequest {
    fn descriptor() -> &'static ::protrust::reflect::MessageDescriptor {
        &self::file().messages()[0]
    }
}
impl self::ConformanceRequest {
    /// Gets the field number of the 'requested_output_format' field
    pub const REQUESTED_OUTPUT_FORMAT_FIELD_NUMBER: i32 = 3;
    pub const REQUESTED_OUTPUT_FORMAT_DEFAULT_VALUE: ::protrust::EnumValue<self::WireFormat> = ::protrust::EnumValue::Defined(self::WireFormat::Unspecified);
    /// Gets the field number of the 'message_type' field
    pub const MESSAGE_TYPE_FIELD_NUMBER: i32 = 4;
    pub const MESSAGE_TYPE_DEFAULT_VALUE: &'static str = "";
    /// Gets the field number of the 'test_category' field
    pub const TEST_CATEGORY_FIELD_NUMBER: i32 = 5;
    pub const TEST_CATEGORY_DEFAULT_VALUE: ::protrust::EnumValue<self::TestCategory> = ::protrust::EnumValue::Defined(self::TestCategory::UnspecifiedTest);
    /// Gets the field number of the 'jspb_encoding_options' field
    pub const JSPB_ENCODING_OPTIONS_FIELD_NUMBER: i32 = 6;
    pub fn payload(&self) -> &ConformanceRequest_Payload {
        &self.payload
    }
    pub fn payload_mut(&mut self) -> &mut ConformanceRequest_Payload {
        &mut self.payload
    }
}
#[derive(Debug, PartialEq)]
pub struct ConformanceResponse {
    pub result: ConformanceResponse_Result,
    unknown_fields: ::protrust::UnknownFieldSet
}
#[derive(Clone, Debug, PartialEq)]
pub enum ConformanceResponse_Result {
    None,
    ParseError(::std::string::String),
    SerializeError(::std::string::String),
    RuntimeError(::std::string::String),
    ProtobufPayload(::std::vec::Vec<u8>),
    JsonPayload(::std::string::String),
    Skipped(::std::string::String),
    JspbPayload(::std::string::String),
}
impl ::protrust::CodedMessage for self::ConformanceResponse {
    fn merge_from(&mut self, input: &mut ::protrust::io::CodedInput) -> ::protrust::io::InputResult<()> {
        while let ::std::option::Option::Some(tag) = input.read_tag()? {
            match tag.get() {
                10 => self.result = self::ConformanceResponse_Result::ParseError(input.read_string()?),
                50 => self.result = self::ConformanceResponse_Result::SerializeError(input.read_string()?),
                18 => self.result = self::ConformanceResponse_Result::RuntimeError(input.read_string()?),
                26 => self.result = self::ConformanceResponse_Result::ProtobufPayload(input.read_bytes()?),
                34 => self.result = self::ConformanceResponse_Result::JsonPayload(input.read_string()?),
                42 => self.result = self::ConformanceResponse_Result::Skipped(input.read_string()?),
                58 => self.result = self::ConformanceResponse_Result::JspbPayload(input.read_string()?),
                tag => self.unknown_fields.merge_from(tag, input)?
            }
        }
        ::std::result::Result::Ok(())
    }
    fn calculate_size(&self) -> i32 {
        let mut size = 0i32;
        if let self::ConformanceResponse_Result::ParseError(result) = &self.result {
            size += 1;
            size += ::protrust::io::sizes::string(result);
        }
        if let self::ConformanceResponse_Result::SerializeError(result) = &self.result {
            size += 1;
            size += ::protrust::io::sizes::string(result);
        }
        if let self::ConformanceResponse_Result::RuntimeError(result) = &self.result {
            size += 1;
            size += ::protrust::io::sizes::string(result);
        }
        if let self::ConformanceResponse_Result::ProtobufPayload(result) = &self.result {
            size += 1;
            size += ::protrust::io::sizes::bytes(result);
        }
        if let self::ConformanceResponse_Result::JsonPayload(result) = &self.result {
            size += 1;
            size += ::protrust::io::sizes::string(result);
        }
        if let self::ConformanceResponse_Result::Skipped(result) = &self.result {
            size += 1;
            size += ::protrust::io::sizes::string(result);
        }
        if let self::ConformanceResponse_Result::JspbPayload(result) = &self.result {
            size += 1;
            size += ::protrust::io::sizes::string(result);
        }
        size += self.unknown_fields.calculate_size();
        size
    }
    fn write_to(&self, output: &mut ::protrust::io::CodedOutput) -> ::protrust::io::OutputResult {
        if let self::ConformanceResponse_Result::ParseError(result) = &self.result {
            output.write_raw_tag_bytes(&[10])?;
            output.write_string(result)?;
        }
        if let self::ConformanceResponse_Result::SerializeError(result) = &self.result {
            output.write_raw_tag_bytes(&[50])?;
            output.write_string(result)?;
        }
        if let self::ConformanceResponse_Result::RuntimeError(result) = &self.result {
            output.write_raw_tag_bytes(&[18])?;
            output.write_string(result)?;
        }
        if let self::ConformanceResponse_Result::ProtobufPayload(result) = &self.result {
            output.write_raw_tag_bytes(&[26])?;
            output.write_bytes(result)?;
        }
        if let self::ConformanceResponse_Result::JsonPayload(result) = &self.result {
            output.write_raw_tag_bytes(&[34])?;
            output.write_string(result)?;
        }
        if let self::ConformanceResponse_Result::Skipped(result) = &self.result {
            output.write_raw_tag_bytes(&[42])?;
            output.write_string(result)?;
        }
        if let self::ConformanceResponse_Result::JspbPayload(result) = &self.result {
            output.write_raw_tag_bytes(&[58])?;
            output.write_string(result)?;
        }
        self.unknown_fields.write_to(output)?;
        ::std::result::Result::Ok(())
    }
}
impl ::protrust::LiteMessage for self::ConformanceResponse {
    fn new() -> Self {
        Self {
            result: self::ConformanceResponse_Result::None,
            unknown_fields: ::protrust::UnknownFieldSet::new()
        }
    }
}
impl ::std::clone::Clone for self::ConformanceResponse {
    fn clone(&self) -> Self {
        Self {
            result: self.result.clone(),
            unknown_fields: self.unknown_fields.clone()
        }
    }
    fn clone_from(&mut self, other: &Self) {
        if let self::ConformanceResponse_Result::ParseError(result) = &other.result {
            self.result = self::ConformanceResponse_Result::ParseError(result.clone());
        }
        if let self::ConformanceResponse_Result::SerializeError(result) = &other.result {
            self.result = self::ConformanceResponse_Result::SerializeError(result.clone());
        }
        if let self::ConformanceResponse_Result::RuntimeError(result) = &other.result {
            self.result = self::ConformanceResponse_Result::RuntimeError(result.clone());
        }
        if let self::ConformanceResponse_Result::ProtobufPayload(result) = &other.result {
            self.result = self::ConformanceResponse_Result::ProtobufPayload(result.clone());
        }
        if let self::ConformanceResponse_Result::JsonPayload(result) = &other.result {
            self.result = self::ConformanceResponse_Result::JsonPayload(result.clone());
        }
        if let self::ConformanceResponse_Result::Skipped(result) = &other.result {
            self.result = self::ConformanceResponse_Result::Skipped(result.clone());
        }
        if let self::ConformanceResponse_Result::JspbPayload(result) = &other.result {
            self.result = self::ConformanceResponse_Result::JspbPayload(result.clone());
        }
        self.unknown_fields.clone_from(&other.unknown_fields);
    }
}
impl ::protrust::Message for self::ConformanceResponse {
    fn descriptor() -> &'static ::protrust::reflect::MessageDescriptor {
        &self::file().messages()[1]
    }
}
impl self::ConformanceResponse {
    pub fn result(&self) -> &ConformanceResponse_Result {
        &self.result
    }
    pub fn result_mut(&mut self) -> &mut ConformanceResponse_Result {
        &mut self.result
    }
}
#[derive(Debug, PartialEq)]
pub struct JspbEncodingConfig {
    pub use_jspb_array_any_format: bool,
    unknown_fields: ::protrust::UnknownFieldSet
}
impl ::protrust::CodedMessage for self::JspbEncodingConfig {
    fn merge_from(&mut self, input: &mut ::protrust::io::CodedInput) -> ::protrust::io::InputResult<()> {
        while let ::std::option::Option::Some(tag) = input.read_tag()? {
            match tag.get() {
                8 => self.use_jspb_array_any_format = input.read_bool()?,
                tag => self.unknown_fields.merge_from(tag, input)?
            }
        }
        ::std::result::Result::Ok(())
    }
    fn calculate_size(&self) -> i32 {
        let mut size = 0i32;
        let use_jspb_array_any_format = self.use_jspb_array_any_format;
        if use_jspb_array_any_format != Self::USE_JSPB_ARRAY_ANY_FORMAT_DEFAULT_VALUE {
            size += 1;
            size += ::protrust::io::sizes::bool(use_jspb_array_any_format);
        }
        size += self.unknown_fields.calculate_size();
        size
    }
    fn write_to(&self, output: &mut ::protrust::io::CodedOutput) -> ::protrust::io::OutputResult {
        let use_jspb_array_any_format = self.use_jspb_array_any_format;
        if use_jspb_array_any_format != Self::USE_JSPB_ARRAY_ANY_FORMAT_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[8])?;
            output.write_bool(use_jspb_array_any_format)?;
        }
        self.unknown_fields.write_to(output)?;
        ::std::result::Result::Ok(())
    }
}
impl ::protrust::LiteMessage for self::JspbEncodingConfig {
    fn new() -> Self {
        Self {
            use_jspb_array_any_format: Self::USE_JSPB_ARRAY_ANY_FORMAT_DEFAULT_VALUE,
            unknown_fields: ::protrust::UnknownFieldSet::new()
        }
    }
}
impl ::std::clone::Clone for self::JspbEncodingConfig {
    fn clone(&self) -> Self {
        Self {
            use_jspb_array_any_format: self.use_jspb_array_any_format.clone(),
            unknown_fields: self.unknown_fields.clone()
        }
    }
    fn clone_from(&mut self, other: &Self) {
        self.use_jspb_array_any_format = other.use_jspb_array_any_format;
        self.unknown_fields.clone_from(&other.unknown_fields);
    }
}
impl ::protrust::Message for self::JspbEncodingConfig {
    fn descriptor() -> &'static ::protrust::reflect::MessageDescriptor {
        &self::file().messages()[2]
    }
}
impl self::JspbEncodingConfig {
    /// Gets the field number of the 'use_jspb_array_any_format' field
    pub const USE_JSPB_ARRAY_ANY_FORMAT_FIELD_NUMBER: i32 = 1;
    pub const USE_JSPB_ARRAY_ANY_FORMAT_DEFAULT_VALUE: bool = false;
}
#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]
pub enum WireFormat {
    Unspecified = 0,
    Protobuf = 1,
    Json = 2,
    Jspb = 3,
}
impl ::std::convert::TryFrom<i32> for self::WireFormat {
    type Error = ::protrust::VariantUndefinedError;
    fn try_from(value: i32) -> ::std::result::Result<Self, ::protrust::VariantUndefinedError> {
        match value {
            0 => ::std::result::Result::Ok(self::WireFormat::Unspecified),
            1 => ::std::result::Result::Ok(self::WireFormat::Protobuf),
            2 => ::std::result::Result::Ok(self::WireFormat::Json),
            3 => ::std::result::Result::Ok(self::WireFormat::Jspb),
            _ => ::std::result::Result::Err(::protrust::VariantUndefinedError)
        }
    }
}
impl ::std::convert::From<self::WireFormat> for i32 {
    fn from(value: self::WireFormat) -> i32 {
        value as i32
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]
pub enum TestCategory {
    UnspecifiedTest = 0,
    BinaryTest = 1,
    JsonTest = 2,
    JsonIgnoreUnknownParsingTest = 3,
    JspbTest = 4,
}
impl ::std::convert::TryFrom<i32> for self::TestCategory {
    type Error = ::protrust::VariantUndefinedError;
    fn try_from(value: i32) -> ::std::result::Result<Self, ::protrust::VariantUndefinedError> {
        match value {
            0 => ::std::result::Result::Ok(self::TestCategory::UnspecifiedTest),
            1 => ::std::result::Result::Ok(self::TestCategory::BinaryTest),
            2 => ::std::result::Result::Ok(self::TestCategory::JsonTest),
            3 => ::std::result::Result::Ok(self::TestCategory::JsonIgnoreUnknownParsingTest),
            4 => ::std::result::Result::Ok(self::TestCategory::JspbTest),
            _ => ::std::result::Result::Err(::protrust::VariantUndefinedError)
        }
    }
}
impl ::std::convert::From<self::TestCategory> for i32 {
    fn from(value: self::TestCategory) -> i32 {
        value as i32
    }
}