// DO NOT EDIT!
// Generated by protoc-gen-rust, part of the protrust crate.
//
// Source: conformance.proto

static FILE_ONCE: ::std::sync::Once = ::std::sync::Once::new();
static mut FILE_POOL: ::std::option::Option<::protrust::reflect::DescriptorPool<'static>> = ::std::option::Option::None;
static mut FILE_PROTO: ::std::option::Option<[::protrust::descriptor::FileDescriptorProto; 1]> = ::std::option::Option::None;
static mut FILE_DESCRIPTOR: ::std::option::Option<&'static ::protrust::reflect::FileDescriptor> = ::std::option::Option::None;
static mut FILE_DEPS: ::std::option::Option<[&'static ::protrust::reflect::DescriptorPool<'static>; 0]> = ::std::option::Option::None;

fn file_once_init() {
    unsafe {
        FILE_PROTO = ::std::option::Option::Some([::protrust::LiteMessage::read_new(&mut [
            10, 17, 99, 111, 110, 102, 111, 114, 109, 97, 110, 99, 101, 46, 112, 114, 111, 116, 111, 18, 
            11, 99, 111, 110, 102, 111, 114, 109, 97, 110, 99, 101, 34, 153, 3, 10, 18, 67, 111, 110, 
            102, 111, 114, 109, 97, 110, 99, 101, 82, 101, 113, 117, 101, 115, 116, 18, 41, 10, 16, 112, 
            114, 111, 116, 111, 98, 117, 102, 95, 112, 97, 121, 108, 111, 97, 100, 24, 1, 32, 1, 40, 
            12, 82, 15, 112, 114, 111, 116, 111, 98, 117, 102, 80, 97, 121, 108, 111, 97, 100, 18, 33, 
            10, 12, 106, 115, 111, 110, 95, 112, 97, 121, 108, 111, 97, 100, 24, 2, 32, 1, 40, 9, 
            82, 11, 106, 115, 111, 110, 80, 97, 121, 108, 111, 97, 100, 18, 33, 10, 12, 106, 115, 112, 
            98, 95, 112, 97, 121, 108, 111, 97, 100, 24, 7, 32, 1, 40, 9, 82, 11, 106, 115, 112, 
            98, 80, 97, 121, 108, 111, 97, 100, 18, 79, 10, 23, 114, 101, 113, 117, 101, 115, 116, 101, 
            100, 95, 111, 117, 116, 112, 117, 116, 95, 102, 111, 114, 109, 97, 116, 24, 3, 32, 1, 40, 
            14, 50, 23, 46, 99, 111, 110, 102, 111, 114, 109, 97, 110, 99, 101, 46, 87, 105, 114, 101, 
            70, 111, 114, 109, 97, 116, 82, 21, 114, 101, 113, 117, 101, 115, 116, 101, 100, 79, 117, 116, 
            112, 117, 116, 70, 111, 114, 109, 97, 116, 18, 33, 10, 12, 109, 101, 115, 115, 97, 103, 101, 
            95, 116, 121, 112, 101, 24, 4, 32, 1, 40, 9, 82, 11, 109, 101, 115, 115, 97, 103, 101, 
            84, 121, 112, 101, 18, 62, 10, 13, 116, 101, 115, 116, 95, 99, 97, 116, 101, 103, 111, 114, 
            121, 24, 5, 32, 1, 40, 14, 50, 25, 46, 99, 111, 110, 102, 111, 114, 109, 97, 110, 99, 
            101, 46, 84, 101, 115, 116, 67, 97, 116, 101, 103, 111, 114, 121, 82, 12, 116, 101, 115, 116, 
            67, 97, 116, 101, 103, 111, 114, 121, 18, 83, 10, 21, 106, 115, 112, 98, 95, 101, 110, 99, 
            111, 100, 105, 110, 103, 95, 111, 112, 116, 105, 111, 110, 115, 24, 6, 32, 1, 40, 11, 50, 
            31, 46, 99, 111, 110, 102, 111, 114, 109, 97, 110, 99, 101, 46, 74, 115, 112, 98, 69, 110, 
            99, 111, 100, 105, 110, 103, 67, 111, 110, 102, 105, 103, 82, 19, 106, 115, 112, 98, 69, 110, 
            99, 111, 100, 105, 110, 103, 79, 112, 116, 105, 111, 110, 115, 66, 9, 10, 7, 112, 97, 121, 
            108, 111, 97, 100, 34, 153, 2, 10, 19, 67, 111, 110, 102, 111, 114, 109, 97, 110, 99, 101, 
            82, 101, 115, 112, 111, 110, 115, 101, 18, 31, 10, 11, 112, 97, 114, 115, 101, 95, 101, 114, 
            114, 111, 114, 24, 1, 32, 1, 40, 9, 82, 10, 112, 97, 114, 115, 101, 69, 114, 114, 111, 
            114, 18, 39, 10, 15, 115, 101, 114, 105, 97, 108, 105, 122, 101, 95, 101, 114, 114, 111, 114, 
            24, 6, 32, 1, 40, 9, 82, 14, 115, 101, 114, 105, 97, 108, 105, 122, 101, 69, 114, 114, 
            111, 114, 18, 35, 10, 13, 114, 117, 110, 116, 105, 109, 101, 95, 101, 114, 114, 111, 114, 24, 
            2, 32, 1, 40, 9, 82, 12, 114, 117, 110, 116, 105, 109, 101, 69, 114, 114, 111, 114, 18, 
            41, 10, 16, 112, 114, 111, 116, 111, 98, 117, 102, 95, 112, 97, 121, 108, 111, 97, 100, 24, 
            3, 32, 1, 40, 12, 82, 15, 112, 114, 111, 116, 111, 98, 117, 102, 80, 97, 121, 108, 111, 
            97, 100, 18, 33, 10, 12, 106, 115, 111, 110, 95, 112, 97, 121, 108, 111, 97, 100, 24, 4, 
            32, 1, 40, 9, 82, 11, 106, 115, 111, 110, 80, 97, 121, 108, 111, 97, 100, 18, 24, 10, 
            7, 115, 107, 105, 112, 112, 101, 100, 24, 5, 32, 1, 40, 9, 82, 7, 115, 107, 105, 112, 
            112, 101, 100, 18, 33, 10, 12, 106, 115, 112, 98, 95, 112, 97, 121, 108, 111, 97, 100, 24, 
            7, 32, 1, 40, 9, 82, 11, 106, 115, 112, 98, 80, 97, 121, 108, 111, 97, 100, 66, 8, 
            10, 6, 114, 101, 115, 117, 108, 116, 34, 78, 10, 18, 74, 115, 112, 98, 69, 110, 99, 111, 
            100, 105, 110, 103, 67, 111, 110, 102, 105, 103, 18, 56, 10, 25, 117, 115, 101, 95, 106, 115, 
            112, 98, 95, 97, 114, 114, 97, 121, 95, 97, 110, 121, 95, 102, 111, 114, 109, 97, 116, 24, 
            1, 32, 1, 40, 8, 82, 21, 117, 115, 101, 74, 115, 112, 98, 65, 114, 114, 97, 121, 65, 
            110, 121, 70, 111, 114, 109, 97, 116, 42, 61, 10, 10, 87, 105, 114, 101, 70, 111, 114, 109, 
            97, 116, 18, 13, 10, 11, 85, 78, 83, 80, 69, 67, 73, 70, 73, 69, 68, 18, 12, 10, 
            8, 80, 82, 79, 84, 79, 66, 85, 70, 16, 1, 18, 8, 10, 4, 74, 83, 79, 78, 16, 
            2, 18, 8, 10, 4, 74, 83, 80, 66, 16, 3, 42, 119, 10, 12, 84, 101, 115, 116, 67, 
            97, 116, 101, 103, 111, 114, 121, 18, 18, 10, 16, 85, 78, 83, 80, 69, 67, 73, 70, 73, 
            69, 68, 95, 84, 69, 83, 84, 18, 15, 10, 11, 66, 73, 78, 65, 82, 89, 95, 84, 69, 
            83, 84, 16, 1, 18, 13, 10, 9, 74, 83, 79, 78, 95, 84, 69, 83, 84, 16, 2, 18, 
            36, 10, 32, 74, 83, 79, 78, 95, 73, 71, 78, 79, 82, 69, 95, 85, 78, 75, 78, 79, 
            87, 78, 95, 80, 65, 82, 83, 73, 78, 71, 95, 84, 69, 83, 84, 16, 3, 18, 13, 10, 
            9, 74, 83, 80, 66, 95, 84, 69, 83, 84, 16, 4, 66, 33, 10, 31, 99, 111, 109, 46, 
            103, 111, 111, 103, 108, 101, 46, 112, 114, 111, 116, 111, 98, 117, 102, 46, 99, 111, 110, 102, 
            111, 114, 109, 97, 110, 99, 101, 98, 6, 112, 114, 111, 116, 111, 51, 
        ].as_ref()).expect("Could not read file descriptor")]);
        FILE_DEPS = ::std::option::Option::Some([]);
        FILE_POOL = ::std::option::Option::Some(::protrust::reflect::DescriptorPool::build_generated_pool(
            FILE_PROTO.as_ref().unwrap(),
            FILE_DEPS.as_ref().unwrap()
        ));
        FILE_DESCRIPTOR = ::std::option::Option::Some(FILE_POOL.as_ref().unwrap().find_file_by_name("conformance.proto").unwrap());
    }
}

/// Gets the pool containing all the symbols in this proto file and its dependencies
pub fn pool() -> &'static ::protrust::reflect::DescriptorPool<'static> {
    unsafe {
        FILE_ONCE.call_once(file_once_init);
        FILE_POOL.as_ref().unwrap()
    }
}
/// Gets the file descriptor representing the proto that created this generated file
pub fn file() -> &'static ::protrust::reflect::FileDescriptor {
    unsafe {
        FILE_ONCE.call_once(file_once_init);
        FILE_DESCRIPTOR.as_ref().unwrap()
    }
}
/// Represents a single test case's input.  The testee should:
///
///   1. parse this proto (which should always succeed)
///   2. parse the protobuf or JSON payload in "payload" (which may fail)
///   3. if the parse succeeded, serialize the message in the requested format.
#[derive(Debug, PartialEq)]
pub struct ConformanceRequest {
    requested_output_format: ::protrust::EnumValue<self::WireFormat>,
    message_type: ::std::string::String,
    test_category: ::protrust::EnumValue<self::TestCategory>,
    jspb_encoding_options: ::std::option::Option<::std::boxed::Box<self::JspbEncodingConfig>>,
    payload: self::ConformanceRequest_Payload,
    unknown_fields: ::protrust::UnknownFieldSet
}
/// The payload (whether protobuf of JSON) is always for a
/// protobuf_test_messages.proto3.TestAllTypes proto (as defined in
/// src/google/protobuf/proto3_test_messages.proto).
///
/// TODO(haberman): if/when we expand the conformance tests to support proto2,
/// we will want to include a field that lets the payload/response be a
/// protobuf_test_messages.proto2.TestAllTypes message instead.
#[derive(Clone, Debug, PartialEq)]
pub enum ConformanceRequest_Payload {
    /// No value
    None,
    ProtobufPayload(::std::vec::Vec<u8>),
    JsonPayload(::std::string::String),
    /// Google internal only.
    JspbPayload(::std::string::String),
}
impl ::protrust::CodedMessage for self::ConformanceRequest {
    fn merge_from(&mut self, input: &mut ::protrust::io::CodedInput) -> ::protrust::io::InputResult<()> {
        while let ::std::option::Option::Some(tag) = input.read_tag()? {
            match tag.get() {
                10 => self.payload = self::ConformanceRequest_Payload::ProtobufPayload(input.read_bytes()?),
                18 => self.payload = self::ConformanceRequest_Payload::JsonPayload(input.read_string()?),
                58 => self.payload = self::ConformanceRequest_Payload::JspbPayload(input.read_string()?),
                24 => self.requested_output_format = input.read_enum_value()?,
                34 => self.message_type = input.read_string()?,
                40 => self.test_category = input.read_enum_value()?,
                50 => input.read_message(self.jspb_encoding_options.get_or_insert_with(::protrust::LiteMessage::new))?,
                tag => self.unknown_fields.merge_from(tag, input)?
            }
        }
        ::std::result::Result::Ok(())
    }
    fn calculate_size(&self) -> i32 {
        let mut size = 0i32;
        if let self::ConformanceRequest_Payload::ProtobufPayload(payload) = &self.payload {
            size += 1;
            size += ::protrust::io::sizes::bytes(payload);
        }
        if let self::ConformanceRequest_Payload::JsonPayload(payload) = &self.payload {
            size += 1;
            size += ::protrust::io::sizes::string(payload);
        }
        if let self::ConformanceRequest_Payload::JspbPayload(payload) = &self.payload {
            size += 1;
            size += ::protrust::io::sizes::string(payload);
        }
        let requested_output_format = self.requested_output_format;
        if requested_output_format != Self::REQUESTED_OUTPUT_FORMAT_DEFAULT_VALUE {
            size += 1;
            size += ::protrust::io::sizes::enum_value(requested_output_format);
        }
        let message_type = &self.message_type;
        if message_type != Self::MESSAGE_TYPE_DEFAULT_VALUE {
            size += 1;
            size += ::protrust::io::sizes::string(message_type);
        }
        let test_category = self.test_category;
        if test_category != Self::TEST_CATEGORY_DEFAULT_VALUE {
            size += 1;
            size += ::protrust::io::sizes::enum_value(test_category);
        }
        let jspb_encoding_options = &self.jspb_encoding_options;
        if let ::std::option::Option::Some(jspb_encoding_options) = jspb_encoding_options {
            size += 1;
            size += ::protrust::io::sizes::message(jspb_encoding_options);
        }
        size += self.unknown_fields.calculate_size();
        size
    }
    fn write_to(&self, output: &mut ::protrust::io::CodedOutput) -> ::protrust::io::OutputResult {
        if let self::ConformanceRequest_Payload::ProtobufPayload(payload) = &self.payload {
            output.write_raw_tag_bytes(&[10])?;
            output.write_bytes(payload)?;
        }
        if let self::ConformanceRequest_Payload::JsonPayload(payload) = &self.payload {
            output.write_raw_tag_bytes(&[18])?;
            output.write_string(payload)?;
        }
        if let self::ConformanceRequest_Payload::JspbPayload(payload) = &self.payload {
            output.write_raw_tag_bytes(&[58])?;
            output.write_string(payload)?;
        }
        let requested_output_format = self.requested_output_format;
        if requested_output_format != Self::REQUESTED_OUTPUT_FORMAT_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[24])?;
            output.write_enum_value(requested_output_format)?;
        }
        let message_type = &self.message_type;
        if message_type != Self::MESSAGE_TYPE_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[34])?;
            output.write_string(message_type)?;
        }
        let test_category = self.test_category;
        if test_category != Self::TEST_CATEGORY_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[40])?;
            output.write_enum_value(test_category)?;
        }
        let jspb_encoding_options = &self.jspb_encoding_options;
        if let ::std::option::Option::Some(jspb_encoding_options) = jspb_encoding_options {
            output.write_raw_tag_bytes(&[50])?;
            output.write_message(jspb_encoding_options)?;
        }
        self.unknown_fields.write_to(output)?;
        ::std::result::Result::Ok(())
    }
}
impl ::protrust::LiteMessage for self::ConformanceRequest {
    fn new() -> Self {
        Self {
            requested_output_format: Self::REQUESTED_OUTPUT_FORMAT_DEFAULT_VALUE,
            message_type: ::std::string::String::new(),
            test_category: Self::TEST_CATEGORY_DEFAULT_VALUE,
            jspb_encoding_options: ::std::option::Option::None,
            payload: self::ConformanceRequest_Payload::None,
            unknown_fields: ::protrust::UnknownFieldSet::new()
        }
    }
}
impl ::std::clone::Clone for self::ConformanceRequest {
    fn clone(&self) -> Self {
        Self {
            requested_output_format: self.requested_output_format.clone(),
            message_type: self.message_type.clone(),
            test_category: self.test_category.clone(),
            jspb_encoding_options: self.jspb_encoding_options.clone(),
            payload: self.payload.clone(),
            unknown_fields: self.unknown_fields.clone()
        }
    }
    fn clone_from(&mut self, other: &Self) {
        if let self::ConformanceRequest_Payload::ProtobufPayload(payload) = &other.payload {
            self.payload = self::ConformanceRequest_Payload::ProtobufPayload(payload.clone());
        }
        if let self::ConformanceRequest_Payload::JsonPayload(payload) = &other.payload {
            self.payload = self::ConformanceRequest_Payload::JsonPayload(payload.clone());
        }
        if let self::ConformanceRequest_Payload::JspbPayload(payload) = &other.payload {
            self.payload = self::ConformanceRequest_Payload::JspbPayload(payload.clone());
        }
        self.requested_output_format = other.requested_output_format;
        self.message_type = other.message_type.clone();
        self.test_category = other.test_category;
        if let ::std::option::Option::Some(jspb_encoding_options) = &other.jspb_encoding_options {
            self.jspb_encoding_options.get_or_insert_with(::protrust::LiteMessage::new).clone_from(jspb_encoding_options);
        }
        self.unknown_fields.clone_from(&other.unknown_fields);
    }
}
impl ::protrust::Message for self::ConformanceRequest {
    fn descriptor() -> &'static ::protrust::reflect::MessageDescriptor {
        &self::file().messages()[0]
    }
}
impl self::ConformanceRequest {
    /// Gets the field number of the [`requested_output_format`] field
    ///
    /// [`requested_output_format`]: #method.requested_output_format
    pub const REQUESTED_OUTPUT_FORMAT_FIELD_NUMBER: i32 = 3;
    /// A constant value representing the default value of the [`requested_output_format`] field
    ///
    /// [`requested_output_format`]: #method.requested_output_format
    pub const REQUESTED_OUTPUT_FORMAT_DEFAULT_VALUE: ::protrust::EnumValue<self::WireFormat> = ::protrust::EnumValue::Defined(self::WireFormat::Unspecified);
    /// Which format should the testee serialize its message to?
    pub fn requested_output_format(&self) -> ::protrust::EnumValue<self::WireFormat> {
        self.requested_output_format
    }
    /// Returns a unique reference to the [`requested_output_format`] field
    ///
    /// [`requested_output_format`]: #method.requested_output_format
    pub fn requested_output_format_mut(&mut self) -> &mut ::protrust::EnumValue<self::WireFormat> {
        &mut self.requested_output_format
    }
    /// Gets the field number of the [`message_type`] field
    ///
    /// [`message_type`]: #method.message_type
    pub const MESSAGE_TYPE_FIELD_NUMBER: i32 = 4;
    /// A constant value representing the default value of the [`message_type`] field
    ///
    /// [`message_type`]: #method.message_type
    pub const MESSAGE_TYPE_DEFAULT_VALUE: &'static str = "";
    /// The full name for the test message to use; for the moment, either:
    /// protobuf_test_messages.proto3.TestAllTypesProto3 or
    /// protobuf_test_messages.proto2.TestAllTypesProto2.
    pub fn message_type(&self) -> &::std::string::String {
        &self.message_type
    }
    /// Returns a unique reference to the [`message_type`] field
    ///
    /// [`message_type`]: #method.message_type
    pub fn message_type_mut(&mut self) -> &mut ::std::string::String {
        &mut self.message_type
    }
    /// Gets the field number of the [`test_category`] field
    ///
    /// [`test_category`]: #method.test_category
    pub const TEST_CATEGORY_FIELD_NUMBER: i32 = 5;
    /// A constant value representing the default value of the [`test_category`] field
    ///
    /// [`test_category`]: #method.test_category
    pub const TEST_CATEGORY_DEFAULT_VALUE: ::protrust::EnumValue<self::TestCategory> = ::protrust::EnumValue::Defined(self::TestCategory::UnspecifiedTest);
    /// Each test is given a specific test category. Some category may need
    /// spedific support in testee programs. Refer to the defintion of TestCategory
    /// for more information.
    pub fn test_category(&self) -> ::protrust::EnumValue<self::TestCategory> {
        self.test_category
    }
    /// Returns a unique reference to the [`test_category`] field
    ///
    /// [`test_category`]: #method.test_category
    pub fn test_category_mut(&mut self) -> &mut ::protrust::EnumValue<self::TestCategory> {
        &mut self.test_category
    }
    /// Gets the field number of the [`jspb_encoding_options`] field
    ///
    /// [`jspb_encoding_options`]: #method.jspb_encoding_options
    pub const JSPB_ENCODING_OPTIONS_FIELD_NUMBER: i32 = 6;
    /// Specify details for how to encode jspb.
    pub fn jspb_encoding_options(&self) -> &::std::option::Option<::std::boxed::Box<self::JspbEncodingConfig>> {
        &self.jspb_encoding_options
    }
    /// Returns a unique reference to the [`jspb_encoding_options`] field
    ///
    /// [`jspb_encoding_options`]: #method.jspb_encoding_options
    pub fn jspb_encoding_options_mut(&mut self) -> &mut ::std::option::Option<::std::boxed::Box<self::JspbEncodingConfig>> {
        &mut self.jspb_encoding_options
    }
    /// Gets a shared reference to the [`payload`] oneof field
    ///
    /// [`payload`]: enum.ConformanceRequest_Payload.html
    pub fn payload(&self) -> &self::ConformanceRequest_Payload {
        &self.payload
    }
    /// Gets a unique reference to the [`payload`] oneof field
    ///
    /// [`payload`]: enum.ConformanceRequest_Payload.html
    pub fn payload_mut(&mut self) -> &mut self::ConformanceRequest_Payload {
        &mut self.payload
    }
}
/// Represents a single test case's output.
#[derive(Debug, PartialEq)]
pub struct ConformanceResponse {
    result: self::ConformanceResponse_Result,
    unknown_fields: ::protrust::UnknownFieldSet
}
#[derive(Clone, Debug, PartialEq)]
pub enum ConformanceResponse_Result {
    /// No value
    None,
    /// This string should be set to indicate parsing failed.  The string can
    /// provide more information about the parse error if it is available.
    ///
    /// Setting this string does not necessarily mean the testee failed the
    /// test.  Some of the test cases are intentionally invalid input.
    ParseError(::std::string::String),
    /// If the input was successfully parsed but errors occurred when
    /// serializing it to the requested output format, set the error message in
    /// this field.
    SerializeError(::std::string::String),
    /// This should be set if some other error occurred.  This will always
    /// indicate that the test failed.  The string can provide more information
    /// about the failure.
    RuntimeError(::std::string::String),
    /// If the input was successfully parsed and the requested output was
    /// protobuf, serialize it to protobuf and set it in this field.
    ProtobufPayload(::std::vec::Vec<u8>),
    /// If the input was successfully parsed and the requested output was JSON,
    /// serialize to JSON and set it in this field.
    JsonPayload(::std::string::String),
    /// For when the testee skipped the test, likely because a certain feature
    /// wasn't supported, like JSON input/output.
    Skipped(::std::string::String),
    /// If the input was successfully parsed and the requested output was JSPB,
    /// serialize to JSPB and set it in this field. JSPB is google internal only
    /// format. Opensource testees can just skip it.
    JspbPayload(::std::string::String),
}
impl ::protrust::CodedMessage for self::ConformanceResponse {
    fn merge_from(&mut self, input: &mut ::protrust::io::CodedInput) -> ::protrust::io::InputResult<()> {
        while let ::std::option::Option::Some(tag) = input.read_tag()? {
            match tag.get() {
                10 => self.result = self::ConformanceResponse_Result::ParseError(input.read_string()?),
                50 => self.result = self::ConformanceResponse_Result::SerializeError(input.read_string()?),
                18 => self.result = self::ConformanceResponse_Result::RuntimeError(input.read_string()?),
                26 => self.result = self::ConformanceResponse_Result::ProtobufPayload(input.read_bytes()?),
                34 => self.result = self::ConformanceResponse_Result::JsonPayload(input.read_string()?),
                42 => self.result = self::ConformanceResponse_Result::Skipped(input.read_string()?),
                58 => self.result = self::ConformanceResponse_Result::JspbPayload(input.read_string()?),
                tag => self.unknown_fields.merge_from(tag, input)?
            }
        }
        ::std::result::Result::Ok(())
    }
    fn calculate_size(&self) -> i32 {
        let mut size = 0i32;
        if let self::ConformanceResponse_Result::ParseError(result) = &self.result {
            size += 1;
            size += ::protrust::io::sizes::string(result);
        }
        if let self::ConformanceResponse_Result::SerializeError(result) = &self.result {
            size += 1;
            size += ::protrust::io::sizes::string(result);
        }
        if let self::ConformanceResponse_Result::RuntimeError(result) = &self.result {
            size += 1;
            size += ::protrust::io::sizes::string(result);
        }
        if let self::ConformanceResponse_Result::ProtobufPayload(result) = &self.result {
            size += 1;
            size += ::protrust::io::sizes::bytes(result);
        }
        if let self::ConformanceResponse_Result::JsonPayload(result) = &self.result {
            size += 1;
            size += ::protrust::io::sizes::string(result);
        }
        if let self::ConformanceResponse_Result::Skipped(result) = &self.result {
            size += 1;
            size += ::protrust::io::sizes::string(result);
        }
        if let self::ConformanceResponse_Result::JspbPayload(result) = &self.result {
            size += 1;
            size += ::protrust::io::sizes::string(result);
        }
        size += self.unknown_fields.calculate_size();
        size
    }
    fn write_to(&self, output: &mut ::protrust::io::CodedOutput) -> ::protrust::io::OutputResult {
        if let self::ConformanceResponse_Result::ParseError(result) = &self.result {
            output.write_raw_tag_bytes(&[10])?;
            output.write_string(result)?;
        }
        if let self::ConformanceResponse_Result::SerializeError(result) = &self.result {
            output.write_raw_tag_bytes(&[50])?;
            output.write_string(result)?;
        }
        if let self::ConformanceResponse_Result::RuntimeError(result) = &self.result {
            output.write_raw_tag_bytes(&[18])?;
            output.write_string(result)?;
        }
        if let self::ConformanceResponse_Result::ProtobufPayload(result) = &self.result {
            output.write_raw_tag_bytes(&[26])?;
            output.write_bytes(result)?;
        }
        if let self::ConformanceResponse_Result::JsonPayload(result) = &self.result {
            output.write_raw_tag_bytes(&[34])?;
            output.write_string(result)?;
        }
        if let self::ConformanceResponse_Result::Skipped(result) = &self.result {
            output.write_raw_tag_bytes(&[42])?;
            output.write_string(result)?;
        }
        if let self::ConformanceResponse_Result::JspbPayload(result) = &self.result {
            output.write_raw_tag_bytes(&[58])?;
            output.write_string(result)?;
        }
        self.unknown_fields.write_to(output)?;
        ::std::result::Result::Ok(())
    }
}
impl ::protrust::LiteMessage for self::ConformanceResponse {
    fn new() -> Self {
        Self {
            result: self::ConformanceResponse_Result::None,
            unknown_fields: ::protrust::UnknownFieldSet::new()
        }
    }
}
impl ::std::clone::Clone for self::ConformanceResponse {
    fn clone(&self) -> Self {
        Self {
            result: self.result.clone(),
            unknown_fields: self.unknown_fields.clone()
        }
    }
    fn clone_from(&mut self, other: &Self) {
        if let self::ConformanceResponse_Result::ParseError(result) = &other.result {
            self.result = self::ConformanceResponse_Result::ParseError(result.clone());
        }
        if let self::ConformanceResponse_Result::SerializeError(result) = &other.result {
            self.result = self::ConformanceResponse_Result::SerializeError(result.clone());
        }
        if let self::ConformanceResponse_Result::RuntimeError(result) = &other.result {
            self.result = self::ConformanceResponse_Result::RuntimeError(result.clone());
        }
        if let self::ConformanceResponse_Result::ProtobufPayload(result) = &other.result {
            self.result = self::ConformanceResponse_Result::ProtobufPayload(result.clone());
        }
        if let self::ConformanceResponse_Result::JsonPayload(result) = &other.result {
            self.result = self::ConformanceResponse_Result::JsonPayload(result.clone());
        }
        if let self::ConformanceResponse_Result::Skipped(result) = &other.result {
            self.result = self::ConformanceResponse_Result::Skipped(result.clone());
        }
        if let self::ConformanceResponse_Result::JspbPayload(result) = &other.result {
            self.result = self::ConformanceResponse_Result::JspbPayload(result.clone());
        }
        self.unknown_fields.clone_from(&other.unknown_fields);
    }
}
impl ::protrust::Message for self::ConformanceResponse {
    fn descriptor() -> &'static ::protrust::reflect::MessageDescriptor {
        &self::file().messages()[1]
    }
}
impl self::ConformanceResponse {
    /// Gets a shared reference to the [`result`] oneof field
    ///
    /// [`result`]: enum.ConformanceResponse_Result.html
    pub fn result(&self) -> &self::ConformanceResponse_Result {
        &self.result
    }
    /// Gets a unique reference to the [`result`] oneof field
    ///
    /// [`result`]: enum.ConformanceResponse_Result.html
    pub fn result_mut(&mut self) -> &mut self::ConformanceResponse_Result {
        &mut self.result
    }
}
/// Encoding options for jspb format.
#[derive(Debug, PartialEq)]
pub struct JspbEncodingConfig {
    use_jspb_array_any_format: bool,
    unknown_fields: ::protrust::UnknownFieldSet
}
impl ::protrust::CodedMessage for self::JspbEncodingConfig {
    fn merge_from(&mut self, input: &mut ::protrust::io::CodedInput) -> ::protrust::io::InputResult<()> {
        while let ::std::option::Option::Some(tag) = input.read_tag()? {
            match tag.get() {
                8 => self.use_jspb_array_any_format = input.read_bool()?,
                tag => self.unknown_fields.merge_from(tag, input)?
            }
        }
        ::std::result::Result::Ok(())
    }
    fn calculate_size(&self) -> i32 {
        let mut size = 0i32;
        let use_jspb_array_any_format = self.use_jspb_array_any_format;
        if use_jspb_array_any_format != Self::USE_JSPB_ARRAY_ANY_FORMAT_DEFAULT_VALUE {
            size += 1;
            size += ::protrust::io::sizes::bool(use_jspb_array_any_format);
        }
        size += self.unknown_fields.calculate_size();
        size
    }
    fn write_to(&self, output: &mut ::protrust::io::CodedOutput) -> ::protrust::io::OutputResult {
        let use_jspb_array_any_format = self.use_jspb_array_any_format;
        if use_jspb_array_any_format != Self::USE_JSPB_ARRAY_ANY_FORMAT_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[8])?;
            output.write_bool(use_jspb_array_any_format)?;
        }
        self.unknown_fields.write_to(output)?;
        ::std::result::Result::Ok(())
    }
}
impl ::protrust::LiteMessage for self::JspbEncodingConfig {
    fn new() -> Self {
        Self {
            use_jspb_array_any_format: Self::USE_JSPB_ARRAY_ANY_FORMAT_DEFAULT_VALUE,
            unknown_fields: ::protrust::UnknownFieldSet::new()
        }
    }
}
impl ::std::clone::Clone for self::JspbEncodingConfig {
    fn clone(&self) -> Self {
        Self {
            use_jspb_array_any_format: self.use_jspb_array_any_format.clone(),
            unknown_fields: self.unknown_fields.clone()
        }
    }
    fn clone_from(&mut self, other: &Self) {
        self.use_jspb_array_any_format = other.use_jspb_array_any_format;
        self.unknown_fields.clone_from(&other.unknown_fields);
    }
}
impl ::protrust::Message for self::JspbEncodingConfig {
    fn descriptor() -> &'static ::protrust::reflect::MessageDescriptor {
        &self::file().messages()[2]
    }
}
impl self::JspbEncodingConfig {
    /// Gets the field number of the [`use_jspb_array_any_format`] field
    ///
    /// [`use_jspb_array_any_format`]: #method.use_jspb_array_any_format
    pub const USE_JSPB_ARRAY_ANY_FORMAT_FIELD_NUMBER: i32 = 1;
    /// A constant value representing the default value of the [`use_jspb_array_any_format`] field
    ///
    /// [`use_jspb_array_any_format`]: #method.use_jspb_array_any_format
    pub const USE_JSPB_ARRAY_ANY_FORMAT_DEFAULT_VALUE: bool = false;
    /// Encode the value field of Any as jspb array if ture, otherwise binary.
    pub fn use_jspb_array_any_format(&self) -> bool {
        self.use_jspb_array_any_format
    }
    /// Returns a unique reference to the [`use_jspb_array_any_format`] field
    ///
    /// [`use_jspb_array_any_format`]: #method.use_jspb_array_any_format
    pub fn use_jspb_array_any_format_mut(&mut self) -> &mut bool {
        &mut self.use_jspb_array_any_format
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]
pub enum WireFormat {
    Unspecified = 0,
    Protobuf = 1,
    Json = 2,
    /// Google internal only. Opensource testees just skip it.
    Jspb = 3,
}
impl ::std::convert::TryFrom<i32> for self::WireFormat {
    type Error = ::protrust::VariantUndefinedError;
    fn try_from(value: i32) -> ::std::result::Result<Self, ::protrust::VariantUndefinedError> {
        match value {
            0 => ::std::result::Result::Ok(self::WireFormat::Unspecified),
            1 => ::std::result::Result::Ok(self::WireFormat::Protobuf),
            2 => ::std::result::Result::Ok(self::WireFormat::Json),
            3 => ::std::result::Result::Ok(self::WireFormat::Jspb),
            _ => ::std::result::Result::Err(::protrust::VariantUndefinedError)
        }
    }
}
impl ::std::convert::From<self::WireFormat> for i32 {
    fn from(value: self::WireFormat) -> i32 {
        value as i32
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]
pub enum TestCategory {
    UnspecifiedTest = 0,
    /// Test binary wire format.
    BinaryTest = 1,
    /// Test json wire format.
    JsonTest = 2,
    /// Similar to JSON_TEST. However, during parsing json, testee should ignore
    /// unknown fields. This feature is optional. Each implementation can descide
    /// whether to support it.  See
    /// https://developers.google.com/protocol-buffers/docs/proto3#json_options
    /// for more detail.
    JsonIgnoreUnknownParsingTest = 3,
    /// Test jspb wire format. Google internal only.
    JspbTest = 4,
}
impl ::std::convert::TryFrom<i32> for self::TestCategory {
    type Error = ::protrust::VariantUndefinedError;
    fn try_from(value: i32) -> ::std::result::Result<Self, ::protrust::VariantUndefinedError> {
        match value {
            0 => ::std::result::Result::Ok(self::TestCategory::UnspecifiedTest),
            1 => ::std::result::Result::Ok(self::TestCategory::BinaryTest),
            2 => ::std::result::Result::Ok(self::TestCategory::JsonTest),
            3 => ::std::result::Result::Ok(self::TestCategory::JsonIgnoreUnknownParsingTest),
            4 => ::std::result::Result::Ok(self::TestCategory::JspbTest),
            _ => ::std::result::Result::Err(::protrust::VariantUndefinedError)
        }
    }
}
impl ::std::convert::From<self::TestCategory> for i32 {
    fn from(value: self::TestCategory) -> i32 {
        value as i32
    }
}