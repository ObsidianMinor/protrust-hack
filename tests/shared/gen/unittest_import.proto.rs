// DO NOT EDIT!
// Generated by protoc-gen-rust, part of the protrust crate.
//
// Source: unittest_import.proto


pub fn file() -> &'static ::protrust::reflect::FileDescriptor {
    super::pool().find_file_by_name("unittest_import.proto").unwrap()
}

#[derive(Clone, Debug, PartialEq, Default)]
pub struct ImportMessage {
    d: ::std::option::Option<i32>,
    unknown_fields: ::protrust::UnknownFieldSet,
}
impl ::protrust::CodedMessage for self::ImportMessage {
    fn merge_from(&mut self, input: &mut ::protrust::io::CodedInput) -> ::protrust::io::InputResult<()> {
        while let ::std::option::Option::Some(tag) = input.read_tag()? {
            match tag.get() {
                8 | 10 => self.d = ::std::option::Option::Some(input.read_int32()?),
                _ => self.unknown_fields.merge_from(tag, input)?
            }
        }
        ::std::result::Result::Ok(())
    }
    fn calculate_size(&self) -> i32 {
        let mut size = 0i32;
        let d = self.d;
        if let ::std::option::Option::Some(d) = d {
            size += 1;
            size += ::protrust::io::sizes::int32(d);
        }
        size += self.unknown_fields.calculate_size();
        size
    }
    fn write_to(&self, output: &mut ::protrust::io::CodedOutput) -> ::protrust::io::OutputResult {
        let d = self.d;
        if let ::std::option::Option::Some(d) = d {
            output.write_raw_tag_bytes(&[8])?;
            output.write_int32(d)?;
        }
        self.unknown_fields.write_to(output)?;
        ::std::result::Result::Ok(())
    }
}
impl ::protrust::LiteMessage for self::ImportMessage {
    fn new() -> Self {
        Self {
            d: ::std::option::Option::None,
            unknown_fields: ::protrust::UnknownFieldSet::new(),
        }
    }
    fn merge(&mut self, other: &Self) {
        self.d = other.d;
        self.unknown_fields.merge(&other.unknown_fields);
    }
}
impl ::protrust::Message for self::ImportMessage {
    fn descriptor() -> &'static ::protrust::reflect::MessageDescriptor {
        &self::file().messages()[0]
    }
}
impl self::ImportMessage {
    /// Gets the field number of the [`d`] field
    ///
    /// [`d`]: #method.d
    pub const D_FIELD_NUMBER: i32 = 1;
    /// A constant value representing the default value of the [`d`] field
    ///
    /// [`d`]: #method.d
    pub const D_DEFAULT_VALUE: i32 = 0;
    pub fn d(&self) -> i32 {
        self.d.unwrap_or(Self::D_DEFAULT_VALUE)
    }
    /// Returns an [`Option`] representing the presence of the [`d`] field
    ///
    /// [`d`]: #method.d
    /// [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html
    pub fn d_option(&self) -> ::std::option::Option<i32> {
        self.d
    }
    /// Returns a bool indicating the presence of the [`d`] field
    ///
    /// [`d`]: #method.d
    pub fn has_d(&self) -> bool {
        self.d.is_some()
    }
    /// Sets the value of the [`d`] field
    ///
    /// [`d`]: #method.d
    pub fn set_d(&mut self, value: i32) {
        self.d = ::std::option::Option::Some(value)
    }
    /// Clears the value of the [`d`] field
    ///
    /// [`d`]: #method.d
    pub fn clear_d(&mut self) {
        self.d = ::std::option::Option::None
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]
pub enum ImportEnum {
    ImportFoo,
    ImportBar,
    ImportBaz,
}
impl ::protrust::Enum for self::ImportEnum {
    fn descriptor() -> &'static ::protrust::reflect::EnumDescriptor {
        &self::file().enums()[0]
    }
}
impl ::std::convert::TryFrom<i32> for self::ImportEnum {
    type Error = ::protrust::VariantUndefinedError;
    fn try_from(value: i32) -> ::std::result::Result<Self, ::protrust::VariantUndefinedError> {
        #[allow(unreachable_patterns)]
        match value {
            7 => ::std::result::Result::Ok(self::ImportEnum::ImportFoo),
            8 => ::std::result::Result::Ok(self::ImportEnum::ImportBar),
            9 => ::std::result::Result::Ok(self::ImportEnum::ImportBaz),
            _ => ::std::result::Result::Err(::protrust::VariantUndefinedError)
        }
    }
}
impl ::std::convert::From<self::ImportEnum> for i32 {
    fn from(value: self::ImportEnum) -> i32 {
        match value {
            ImportEnum::ImportFoo => 7,
            ImportEnum::ImportBar => 8,
            ImportEnum::ImportBaz => 9,
        }
    }
}
///  To use an enum in a map, it must has the first value as 0.
#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]
pub enum ImportEnumForMap {
    Unknown,
    Foo,
    Bar,
}
impl ::protrust::Enum for self::ImportEnumForMap {
    fn descriptor() -> &'static ::protrust::reflect::EnumDescriptor {
        &self::file().enums()[1]
    }
}
impl ::std::convert::TryFrom<i32> for self::ImportEnumForMap {
    type Error = ::protrust::VariantUndefinedError;
    fn try_from(value: i32) -> ::std::result::Result<Self, ::protrust::VariantUndefinedError> {
        #[allow(unreachable_patterns)]
        match value {
            0 => ::std::result::Result::Ok(self::ImportEnumForMap::Unknown),
            1 => ::std::result::Result::Ok(self::ImportEnumForMap::Foo),
            2 => ::std::result::Result::Ok(self::ImportEnumForMap::Bar),
            _ => ::std::result::Result::Err(::protrust::VariantUndefinedError)
        }
    }
}
impl ::std::convert::From<self::ImportEnumForMap> for i32 {
    fn from(value: self::ImportEnumForMap) -> i32 {
        match value {
            ImportEnumForMap::Unknown => 0,
            ImportEnumForMap::Foo => 1,
            ImportEnumForMap::Bar => 2,
        }
    }
}