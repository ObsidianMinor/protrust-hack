// DO NOT EDIT!
// Generated by protoc-gen-rust, part of the protrust crate.
//
// Source: unittest_import_public.proto


pub fn file() -> &'static ::protrust::reflect::FileDescriptor {
    super::pool().find_file_by_name("unittest_import_public.proto").unwrap()
}

#[derive(Clone, Debug, PartialEq)]
pub struct PublicImportMessage {
    e: ::std::option::Option<i32>,
    unknown_fields: ::protrust::UnknownFieldSet,
}
impl ::protrust::CodedMessage for self::PublicImportMessage {
    fn merge_from(&mut self, input: &mut ::protrust::io::CodedInput) -> ::protrust::io::InputResult<()> {
        while let ::std::option::Option::Some(tag) = input.read_tag()? {
            match tag.get() {
                8 | 10 => self.e = ::std::option::Option::Some(input.read_int32()?),
                _ => self.unknown_fields.merge_from(tag, input)?
            }
        }
        ::std::result::Result::Ok(())
    }
    fn calculate_size(&self) -> i32 {
        let mut size = 0i32;
        let e = self.e;
        if let ::std::option::Option::Some(e) = e {
            size += 1;
            size += ::protrust::io::sizes::int32(e);
        }
        size += self.unknown_fields.calculate_size();
        size
    }
    fn write_to(&self, output: &mut ::protrust::io::CodedOutput) -> ::protrust::io::OutputResult {
        let e = self.e;
        if let ::std::option::Option::Some(e) = e {
            output.write_raw_tag_bytes(&[8])?;
            output.write_int32(e)?;
        }
        self.unknown_fields.write_to(output)?;
        ::std::result::Result::Ok(())
    }
}
impl ::protrust::LiteMessage for self::PublicImportMessage {
    fn new() -> Self {
        Self {
            e: ::std::option::Option::None,
            unknown_fields: ::protrust::UnknownFieldSet::new(),
        }
    }
    fn merge(&mut self, other: &Self) {
        self.e = other.e;
        self.unknown_fields.merge(&other.unknown_fields);
    }
}
impl ::protrust::Message for self::PublicImportMessage {
    fn descriptor() -> &'static ::protrust::reflect::MessageDescriptor {
        &self::file().messages()[0]
    }
}
impl self::PublicImportMessage {
    /// Gets the field number of the [`e`] field
    ///
    /// [`e`]: #method.e
    pub const E_FIELD_NUMBER: i32 = 1;
    /// A constant value representing the default value of the [`e`] field
    ///
    /// [`e`]: #method.e
    pub const E_DEFAULT_VALUE: i32 = 0;
    pub fn e(&self) -> i32 {
        self.e.unwrap_or(Self::E_DEFAULT_VALUE)
    }
    /// Returns an [`Option`] representing the presence of the [`e`] field
    ///
    /// [`e`]: #method.e
    /// [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html
    pub fn e_option(&self) -> ::std::option::Option<i32> {
        self.e
    }
    /// Returns a bool indicating the presence of the [`e`] field
    ///
    /// [`e`]: #method.e
    pub fn has_e(&self) -> bool {
        self.e.is_some()
    }
    /// Sets the value of the [`e`] field
    ///
    /// [`e`]: #method.e
    pub fn set_e(&mut self, value: i32) {
        self.e = ::std::option::Option::Some(value)
    }
    /// Clears the value of the [`e`] field
    ///
    /// [`e`]: #method.e
    pub fn clear_e(&mut self) {
        self.e = ::std::option::Option::None
    }
}