// DO NOT EDIT!
// Generated by protoc-gen-rust, part of the protrust crate.
//
// Source: test_messages_proto2.proto

static FILE_ONCE: ::std::sync::Once = ::std::sync::Once::new();
static mut FILE_POOL: ::std::option::Option<::protrust::reflect::DescriptorPool<'static>> = ::std::option::Option::None;
static mut FILE_PROTO: ::std::option::Option<[::protrust::descriptor::FileDescriptorProto; 1]> = ::std::option::Option::None;
static mut FILE_DESCRIPTOR: ::std::option::Option<&'static ::protrust::reflect::FileDescriptor> = ::std::option::Option::None;
static mut FILE_DEPS: ::std::option::Option<[&'static ::protrust::reflect::DescriptorPool<'static>; 0]> = ::std::option::Option::None;

fn file_once_init() {
    unsafe {
        FILE_PROTO = ::std::option::Option::Some([::protrust::LiteMessage::read_new(&mut [
            10, 26, 116, 101, 115, 116, 95, 109, 101, 115, 115, 97, 103, 101, 115, 95, 112, 114, 111, 116, 
            111, 50, 46, 112, 114, 111, 116, 111, 18, 29, 112, 114, 111, 116, 111, 98, 117, 102, 95, 116, 
            101, 115, 116, 95, 109, 101, 115, 115, 97, 103, 101, 115, 46, 112, 114, 111, 116, 111, 50, 34, 
            176, 64, 10, 18, 84, 101, 115, 116, 65, 108, 108, 84, 121, 112, 101, 115, 80, 114, 111, 116, 
            111, 50, 18, 37, 10, 14, 111, 112, 116, 105, 111, 110, 97, 108, 95, 105, 110, 116, 51, 50, 
            24, 1, 32, 1, 40, 5, 82, 13, 111, 112, 116, 105, 111, 110, 97, 108, 73, 110, 116, 51, 
            50, 18, 37, 10, 14, 111, 112, 116, 105, 111, 110, 97, 108, 95, 105, 110, 116, 54, 52, 24, 
            2, 32, 1, 40, 3, 82, 13, 111, 112, 116, 105, 111, 110, 97, 108, 73, 110, 116, 54, 52, 
            18, 39, 10, 15, 111, 112, 116, 105, 111, 110, 97, 108, 95, 117, 105, 110, 116, 51, 50, 24, 
            3, 32, 1, 40, 13, 82, 14, 111, 112, 116, 105, 111, 110, 97, 108, 85, 105, 110, 116, 51, 
            50, 18, 39, 10, 15, 111, 112, 116, 105, 111, 110, 97, 108, 95, 117, 105, 110, 116, 54, 52, 
            24, 4, 32, 1, 40, 4, 82, 14, 111, 112, 116, 105, 111, 110, 97, 108, 85, 105, 110, 116, 
            54, 52, 18, 39, 10, 15, 111, 112, 116, 105, 111, 110, 97, 108, 95, 115, 105, 110, 116, 51, 
            50, 24, 5, 32, 1, 40, 17, 82, 14, 111, 112, 116, 105, 111, 110, 97, 108, 83, 105, 110, 
            116, 51, 50, 18, 39, 10, 15, 111, 112, 116, 105, 111, 110, 97, 108, 95, 115, 105, 110, 116, 
            54, 52, 24, 6, 32, 1, 40, 18, 82, 14, 111, 112, 116, 105, 111, 110, 97, 108, 83, 105, 
            110, 116, 54, 52, 18, 41, 10, 16, 111, 112, 116, 105, 111, 110, 97, 108, 95, 102, 105, 120, 
            101, 100, 51, 50, 24, 7, 32, 1, 40, 7, 82, 15, 111, 112, 116, 105, 111, 110, 97, 108, 
            70, 105, 120, 101, 100, 51, 50, 18, 41, 10, 16, 111, 112, 116, 105, 111, 110, 97, 108, 95, 
            102, 105, 120, 101, 100, 54, 52, 24, 8, 32, 1, 40, 6, 82, 15, 111, 112, 116, 105, 111, 
            110, 97, 108, 70, 105, 120, 101, 100, 54, 52, 18, 43, 10, 17, 111, 112, 116, 105, 111, 110, 
            97, 108, 95, 115, 102, 105, 120, 101, 100, 51, 50, 24, 9, 32, 1, 40, 15, 82, 16, 111, 
            112, 116, 105, 111, 110, 97, 108, 83, 102, 105, 120, 101, 100, 51, 50, 18, 43, 10, 17, 111, 
            112, 116, 105, 111, 110, 97, 108, 95, 115, 102, 105, 120, 101, 100, 54, 52, 24, 10, 32, 1, 
            40, 16, 82, 16, 111, 112, 116, 105, 111, 110, 97, 108, 83, 102, 105, 120, 101, 100, 54, 52, 
            18, 37, 10, 14, 111, 112, 116, 105, 111, 110, 97, 108, 95, 102, 108, 111, 97, 116, 24, 11, 
            32, 1, 40, 2, 82, 13, 111, 112, 116, 105, 111, 110, 97, 108, 70, 108, 111, 97, 116, 18, 
            39, 10, 15, 111, 112, 116, 105, 111, 110, 97, 108, 95, 100, 111, 117, 98, 108, 101, 24, 12, 
            32, 1, 40, 1, 82, 14, 111, 112, 116, 105, 111, 110, 97, 108, 68, 111, 117, 98, 108, 101, 
            18, 35, 10, 13, 111, 112, 116, 105, 111, 110, 97, 108, 95, 98, 111, 111, 108, 24, 13, 32, 
            1, 40, 8, 82, 12, 111, 112, 116, 105, 111, 110, 97, 108, 66, 111, 111, 108, 18, 39, 10, 
            15, 111, 112, 116, 105, 111, 110, 97, 108, 95, 115, 116, 114, 105, 110, 103, 24, 14, 32, 1, 
            40, 9, 82, 14, 111, 112, 116, 105, 111, 110, 97, 108, 83, 116, 114, 105, 110, 103, 18, 37, 
            10, 14, 111, 112, 116, 105, 111, 110, 97, 108, 95, 98, 121, 116, 101, 115, 24, 15, 32, 1, 
            40, 12, 82, 13, 111, 112, 116, 105, 111, 110, 97, 108, 66, 121, 116, 101, 115, 18, 119, 10, 
            23, 111, 112, 116, 105, 111, 110, 97, 108, 95, 110, 101, 115, 116, 101, 100, 95, 109, 101, 115, 
            115, 97, 103, 101, 24, 18, 32, 1, 40, 11, 50, 63, 46, 112, 114, 111, 116, 111, 98, 117, 
            102, 95, 116, 101, 115, 116, 95, 109, 101, 115, 115, 97, 103, 101, 115, 46, 112, 114, 111, 116, 
            111, 50, 46, 84, 101, 115, 116, 65, 108, 108, 84, 121, 112, 101, 115, 80, 114, 111, 116, 111, 
            50, 46, 78, 101, 115, 116, 101, 100, 77, 101, 115, 115, 97, 103, 101, 82, 21, 111, 112, 116, 
            105, 111, 110, 97, 108, 78, 101, 115, 116, 101, 100, 77, 101, 115, 115, 97, 103, 101, 18, 109, 
            10, 24, 111, 112, 116, 105, 111, 110, 97, 108, 95, 102, 111, 114, 101, 105, 103, 110, 95, 109, 
            101, 115, 115, 97, 103, 101, 24, 19, 32, 1, 40, 11, 50, 51, 46, 112, 114, 111, 116, 111, 
            98, 117, 102, 95, 116, 101, 115, 116, 95, 109, 101, 115, 115, 97, 103, 101, 115, 46, 112, 114, 
            111, 116, 111, 50, 46, 70, 111, 114, 101, 105, 103, 110, 77, 101, 115, 115, 97, 103, 101, 80, 
            114, 111, 116, 111, 50, 82, 22, 111, 112, 116, 105, 111, 110, 97, 108, 70, 111, 114, 101, 105, 
            103, 110, 77, 101, 115, 115, 97, 103, 101, 18, 110, 10, 20, 111, 112, 116, 105, 111, 110, 97, 
            108, 95, 110, 101, 115, 116, 101, 100, 95, 101, 110, 117, 109, 24, 21, 32, 1, 40, 14, 50, 
            60, 46, 112, 114, 111, 116, 111, 98, 117, 102, 95, 116, 101, 115, 116, 95, 109, 101, 115, 115, 
            97, 103, 101, 115, 46, 112, 114, 111, 116, 111, 50, 46, 84, 101, 115, 116, 65, 108, 108, 84, 
            121, 112, 101, 115, 80, 114, 111, 116, 111, 50, 46, 78, 101, 115, 116, 101, 100, 69, 110, 117, 
            109, 82, 18, 111, 112, 116, 105, 111, 110, 97, 108, 78, 101, 115, 116, 101, 100, 69, 110, 117, 
            109, 18, 100, 10, 21, 111, 112, 116, 105, 111, 110, 97, 108, 95, 102, 111, 114, 101, 105, 103, 
            110, 95, 101, 110, 117, 109, 24, 22, 32, 1, 40, 14, 50, 48, 46, 112, 114, 111, 116, 111, 
            98, 117, 102, 95, 116, 101, 115, 116, 95, 109, 101, 115, 115, 97, 103, 101, 115, 46, 112, 114, 
            111, 116, 111, 50, 46, 70, 111, 114, 101, 105, 103, 110, 69, 110, 117, 109, 80, 114, 111, 116, 
            111, 50, 82, 19, 111, 112, 116, 105, 111, 110, 97, 108, 70, 111, 114, 101, 105, 103, 110, 69, 
            110, 117, 109, 18, 54, 10, 21, 111, 112, 116, 105, 111, 110, 97, 108, 95, 115, 116, 114, 105, 
            110, 103, 95, 112, 105, 101, 99, 101, 24, 24, 32, 1, 40, 9, 82, 19, 111, 112, 116, 105, 
            111, 110, 97, 108, 83, 116, 114, 105, 110, 103, 80, 105, 101, 99, 101, 66, 2, 8, 2, 18, 
            39, 10, 13, 111, 112, 116, 105, 111, 110, 97, 108, 95, 99, 111, 114, 100, 24, 25, 32, 1, 
            40, 9, 82, 12, 111, 112, 116, 105, 111, 110, 97, 108, 67, 111, 114, 100, 66, 2, 8, 1, 
            18, 94, 10, 17, 114, 101, 99, 117, 114, 115, 105, 118, 101, 95, 109, 101, 115, 115, 97, 103, 
            101, 24, 27, 32, 1, 40, 11, 50, 49, 46, 112, 114, 111, 116, 111, 98, 117, 102, 95, 116, 
            101, 115, 116, 95, 109, 101, 115, 115, 97, 103, 101, 115, 46, 112, 114, 111, 116, 111, 50, 46, 
            84, 101, 115, 116, 65, 108, 108, 84, 121, 112, 101, 115, 80, 114, 111, 116, 111, 50, 82, 16, 
            114, 101, 99, 117, 114, 115, 105, 118, 101, 77, 101, 115, 115, 97, 103, 101, 18, 37, 10, 14, 
            114, 101, 112, 101, 97, 116, 101, 100, 95, 105, 110, 116, 51, 50, 24, 31, 32, 3, 40, 5, 
            82, 13, 114, 101, 112, 101, 97, 116, 101, 100, 73, 110, 116, 51, 50, 18, 37, 10, 14, 114, 
            101, 112, 101, 97, 116, 101, 100, 95, 105, 110, 116, 54, 52, 24, 32, 32, 3, 40, 3, 82, 
            13, 114, 101, 112, 101, 97, 116, 101, 100, 73, 110, 116, 54, 52, 18, 39, 10, 15, 114, 101, 
            112, 101, 97, 116, 101, 100, 95, 117, 105, 110, 116, 51, 50, 24, 33, 32, 3, 40, 13, 82, 
            14, 114, 101, 112, 101, 97, 116, 101, 100, 85, 105, 110, 116, 51, 50, 18, 39, 10, 15, 114, 
            101, 112, 101, 97, 116, 101, 100, 95, 117, 105, 110, 116, 54, 52, 24, 34, 32, 3, 40, 4, 
            82, 14, 114, 101, 112, 101, 97, 116, 101, 100, 85, 105, 110, 116, 54, 52, 18, 39, 10, 15, 
            114, 101, 112, 101, 97, 116, 101, 100, 95, 115, 105, 110, 116, 51, 50, 24, 35, 32, 3, 40, 
            17, 82, 14, 114, 101, 112, 101, 97, 116, 101, 100, 83, 105, 110, 116, 51, 50, 18, 39, 10, 
            15, 114, 101, 112, 101, 97, 116, 101, 100, 95, 115, 105, 110, 116, 54, 52, 24, 36, 32, 3, 
            40, 18, 82, 14, 114, 101, 112, 101, 97, 116, 101, 100, 83, 105, 110, 116, 54, 52, 18, 41, 
            10, 16, 114, 101, 112, 101, 97, 116, 101, 100, 95, 102, 105, 120, 101, 100, 51, 50, 24, 37, 
            32, 3, 40, 7, 82, 15, 114, 101, 112, 101, 97, 116, 101, 100, 70, 105, 120, 101, 100, 51, 
            50, 18, 41, 10, 16, 114, 101, 112, 101, 97, 116, 101, 100, 95, 102, 105, 120, 101, 100, 54, 
            52, 24, 38, 32, 3, 40, 6, 82, 15, 114, 101, 112, 101, 97, 116, 101, 100, 70, 105, 120, 
            101, 100, 54, 52, 18, 43, 10, 17, 114, 101, 112, 101, 97, 116, 101, 100, 95, 115, 102, 105, 
            120, 101, 100, 51, 50, 24, 39, 32, 3, 40, 15, 82, 16, 114, 101, 112, 101, 97, 116, 101, 
            100, 83, 102, 105, 120, 101, 100, 51, 50, 18, 43, 10, 17, 114, 101, 112, 101, 97, 116, 101, 
            100, 95, 115, 102, 105, 120, 101, 100, 54, 52, 24, 40, 32, 3, 40, 16, 82, 16, 114, 101, 
            112, 101, 97, 116, 101, 100, 83, 102, 105, 120, 101, 100, 54, 52, 18, 37, 10, 14, 114, 101, 
            112, 101, 97, 116, 101, 100, 95, 102, 108, 111, 97, 116, 24, 41, 32, 3, 40, 2, 82, 13, 
            114, 101, 112, 101, 97, 116, 101, 100, 70, 108, 111, 97, 116, 18, 39, 10, 15, 114, 101, 112, 
            101, 97, 116, 101, 100, 95, 100, 111, 117, 98, 108, 101, 24, 42, 32, 3, 40, 1, 82, 14, 
            114, 101, 112, 101, 97, 116, 101, 100, 68, 111, 117, 98, 108, 101, 18, 35, 10, 13, 114, 101, 
            112, 101, 97, 116, 101, 100, 95, 98, 111, 111, 108, 24, 43, 32, 3, 40, 8, 82, 12, 114, 
            101, 112, 101, 97, 116, 101, 100, 66, 111, 111, 108, 18, 39, 10, 15, 114, 101, 112, 101, 97, 
            116, 101, 100, 95, 115, 116, 114, 105, 110, 103, 24, 44, 32, 3, 40, 9, 82, 14, 114, 101, 
            112, 101, 97, 116, 101, 100, 83, 116, 114, 105, 110, 103, 18, 37, 10, 14, 114, 101, 112, 101, 
            97, 116, 101, 100, 95, 98, 121, 116, 101, 115, 24, 45, 32, 3, 40, 12, 82, 13, 114, 101, 
            112, 101, 97, 116, 101, 100, 66, 121, 116, 101, 115, 18, 119, 10, 23, 114, 101, 112, 101, 97, 
            116, 101, 100, 95, 110, 101, 115, 116, 101, 100, 95, 109, 101, 115, 115, 97, 103, 101, 24, 48, 
            32, 3, 40, 11, 50, 63, 46, 112, 114, 111, 116, 111, 98, 117, 102, 95, 116, 101, 115, 116, 
            95, 109, 101, 115, 115, 97, 103, 101, 115, 46, 112, 114, 111, 116, 111, 50, 46, 84, 101, 115, 
            116, 65, 108, 108, 84, 121, 112, 101, 115, 80, 114, 111, 116, 111, 50, 46, 78, 101, 115, 116, 
            101, 100, 77, 101, 115, 115, 97, 103, 101, 82, 21, 114, 101, 112, 101, 97, 116, 101, 100, 78, 
            101, 115, 116, 101, 100, 77, 101, 115, 115, 97, 103, 101, 18, 109, 10, 24, 114, 101, 112, 101, 
            97, 116, 101, 100, 95, 102, 111, 114, 101, 105, 103, 110, 95, 109, 101, 115, 115, 97, 103, 101, 
            24, 49, 32, 3, 40, 11, 50, 51, 46, 112, 114, 111, 116, 111, 98, 117, 102, 95, 116, 101, 
            115, 116, 95, 109, 101, 115, 115, 97, 103, 101, 115, 46, 112, 114, 111, 116, 111, 50, 46, 70, 
            111, 114, 101, 105, 103, 110, 77, 101, 115, 115, 97, 103, 101, 80, 114, 111, 116, 111, 50, 82, 
            22, 114, 101, 112, 101, 97, 116, 101, 100, 70, 111, 114, 101, 105, 103, 110, 77, 101, 115, 115, 
            97, 103, 101, 18, 110, 10, 20, 114, 101, 112, 101, 97, 116, 101, 100, 95, 110, 101, 115, 116, 
            101, 100, 95, 101, 110, 117, 109, 24, 51, 32, 3, 40, 14, 50, 60, 46, 112, 114, 111, 116, 
            111, 98, 117, 102, 95, 116, 101, 115, 116, 95, 109, 101, 115, 115, 97, 103, 101, 115, 46, 112, 
            114, 111, 116, 111, 50, 46, 84, 101, 115, 116, 65, 108, 108, 84, 121, 112, 101, 115, 80, 114, 
            111, 116, 111, 50, 46, 78, 101, 115, 116, 101, 100, 69, 110, 117, 109, 82, 18, 114, 101, 112, 
            101, 97, 116, 101, 100, 78, 101, 115, 116, 101, 100, 69, 110, 117, 109, 18, 100, 10, 21, 114, 
            101, 112, 101, 97, 116, 101, 100, 95, 102, 111, 114, 101, 105, 103, 110, 95, 101, 110, 117, 109, 
            24, 52, 32, 3, 40, 14, 50, 48, 46, 112, 114, 111, 116, 111, 98, 117, 102, 95, 116, 101, 
            115, 116, 95, 109, 101, 115, 115, 97, 103, 101, 115, 46, 112, 114, 111, 116, 111, 50, 46, 70, 
            111, 114, 101, 105, 103, 110, 69, 110, 117, 109, 80, 114, 111, 116, 111, 50, 82, 19, 114, 101, 
            112, 101, 97, 116, 101, 100, 70, 111, 114, 101, 105, 103, 110, 69, 110, 117, 109, 18, 54, 10, 
            21, 114, 101, 112, 101, 97, 116, 101, 100, 95, 115, 116, 114, 105, 110, 103, 95, 112, 105, 101, 
            99, 101, 24, 54, 32, 3, 40, 9, 82, 19, 114, 101, 112, 101, 97, 116, 101, 100, 83, 116, 
            114, 105, 110, 103, 80, 105, 101, 99, 101, 66, 2, 8, 2, 18, 39, 10, 13, 114, 101, 112, 
            101, 97, 116, 101, 100, 95, 99, 111, 114, 100, 24, 55, 32, 3, 40, 9, 82, 12, 114, 101, 
            112, 101, 97, 116, 101, 100, 67, 111, 114, 100, 66, 2, 8, 1, 18, 108, 10, 15, 109, 97, 
            112, 95, 105, 110, 116, 51, 50, 95, 105, 110, 116, 51, 50, 24, 56, 32, 3, 40, 11, 50, 
            68, 46, 112, 114, 111, 116, 111, 98, 117, 102, 95, 116, 101, 115, 116, 95, 109, 101, 115, 115, 
            97, 103, 101, 115, 46, 112, 114, 111, 116, 111, 50, 46, 84, 101, 115, 116, 65, 108, 108, 84, 
            121, 112, 101, 115, 80, 114, 111, 116, 111, 50, 46, 77, 97, 112, 73, 110, 116, 51, 50, 73, 
            110, 116, 51, 50, 69, 110, 116, 114, 121, 82, 13, 109, 97, 112, 73, 110, 116, 51, 50, 73, 
            110, 116, 51, 50, 18, 108, 10, 15, 109, 97, 112, 95, 105, 110, 116, 54, 52, 95, 105, 110, 
            116, 54, 52, 24, 57, 32, 3, 40, 11, 50, 68, 46, 112, 114, 111, 116, 111, 98, 117, 102, 
            95, 116, 101, 115, 116, 95, 109, 101, 115, 115, 97, 103, 101, 115, 46, 112, 114, 111, 116, 111, 
            50, 46, 84, 101, 115, 116, 65, 108, 108, 84, 121, 112, 101, 115, 80, 114, 111, 116, 111, 50, 
            46, 77, 97, 112, 73, 110, 116, 54, 52, 73, 110, 116, 54, 52, 69, 110, 116, 114, 121, 82, 
            13, 109, 97, 112, 73, 110, 116, 54, 52, 73, 110, 116, 54, 52, 18, 114, 10, 17, 109, 97, 
            112, 95, 117, 105, 110, 116, 51, 50, 95, 117, 105, 110, 116, 51, 50, 24, 58, 32, 3, 40, 
            11, 50, 70, 46, 112, 114, 111, 116, 111, 98, 117, 102, 95, 116, 101, 115, 116, 95, 109, 101, 
            115, 115, 97, 103, 101, 115, 46, 112, 114, 111, 116, 111, 50, 46, 84, 101, 115, 116, 65, 108, 
            108, 84, 121, 112, 101, 115, 80, 114, 111, 116, 111, 50, 46, 77, 97, 112, 85, 105, 110, 116, 
            51, 50, 85, 105, 110, 116, 51, 50, 69, 110, 116, 114, 121, 82, 15, 109, 97, 112, 85, 105, 
            110, 116, 51, 50, 85, 105, 110, 116, 51, 50, 18, 114, 10, 17, 109, 97, 112, 95, 117, 105, 
            110, 116, 54, 52, 95, 117, 105, 110, 116, 54, 52, 24, 59, 32, 3, 40, 11, 50, 70, 46, 
            112, 114, 111, 116, 111, 98, 117, 102, 95, 116, 101, 115, 116, 95, 109, 101, 115, 115, 97, 103, 
            101, 115, 46, 112, 114, 111, 116, 111, 50, 46, 84, 101, 115, 116, 65, 108, 108, 84, 121, 112, 
            101, 115, 80, 114, 111, 116, 111, 50, 46, 77, 97, 112, 85, 105, 110, 116, 54, 52, 85, 105, 
            110, 116, 54, 52, 69, 110, 116, 114, 121, 82, 15, 109, 97, 112, 85, 105, 110, 116, 54, 52, 
            85, 105, 110, 116, 54, 52, 18, 114, 10, 17, 109, 97, 112, 95, 115, 105, 110, 116, 51, 50, 
            95, 115, 105, 110, 116, 51, 50, 24, 60, 32, 3, 40, 11, 50, 70, 46, 112, 114, 111, 116, 
            111, 98, 117, 102, 95, 116, 101, 115, 116, 95, 109, 101, 115, 115, 97, 103, 101, 115, 46, 112, 
            114, 111, 116, 111, 50, 46, 84, 101, 115, 116, 65, 108, 108, 84, 121, 112, 101, 115, 80, 114, 
            111, 116, 111, 50, 46, 77, 97, 112, 83, 105, 110, 116, 51, 50, 83, 105, 110, 116, 51, 50, 
            69, 110, 116, 114, 121, 82, 15, 109, 97, 112, 83, 105, 110, 116, 51, 50, 83, 105, 110, 116, 
            51, 50, 18, 114, 10, 17, 109, 97, 112, 95, 115, 105, 110, 116, 54, 52, 95, 115, 105, 110, 
            116, 54, 52, 24, 61, 32, 3, 40, 11, 50, 70, 46, 112, 114, 111, 116, 111, 98, 117, 102, 
            95, 116, 101, 115, 116, 95, 109, 101, 115, 115, 97, 103, 101, 115, 46, 112, 114, 111, 116, 111, 
            50, 46, 84, 101, 115, 116, 65, 108, 108, 84, 121, 112, 101, 115, 80, 114, 111, 116, 111, 50, 
            46, 77, 97, 112, 83, 105, 110, 116, 54, 52, 83, 105, 110, 116, 54, 52, 69, 110, 116, 114, 
            121, 82, 15, 109, 97, 112, 83, 105, 110, 116, 54, 52, 83, 105, 110, 116, 54, 52, 18, 120, 
            10, 19, 109, 97, 112, 95, 102, 105, 120, 101, 100, 51, 50, 95, 102, 105, 120, 101, 100, 51, 
            50, 24, 62, 32, 3, 40, 11, 50, 72, 46, 112, 114, 111, 116, 111, 98, 117, 102, 95, 116, 
            101, 115, 116, 95, 109, 101, 115, 115, 97, 103, 101, 115, 46, 112, 114, 111, 116, 111, 50, 46, 
            84, 101, 115, 116, 65, 108, 108, 84, 121, 112, 101, 115, 80, 114, 111, 116, 111, 50, 46, 77, 
            97, 112, 70, 105, 120, 101, 100, 51, 50, 70, 105, 120, 101, 100, 51, 50, 69, 110, 116, 114, 
            121, 82, 17, 109, 97, 112, 70, 105, 120, 101, 100, 51, 50, 70, 105, 120, 101, 100, 51, 50, 
            18, 120, 10, 19, 109, 97, 112, 95, 102, 105, 120, 101, 100, 54, 52, 95, 102, 105, 120, 101, 
            100, 54, 52, 24, 63, 32, 3, 40, 11, 50, 72, 46, 112, 114, 111, 116, 111, 98, 117, 102, 
            95, 116, 101, 115, 116, 95, 109, 101, 115, 115, 97, 103, 101, 115, 46, 112, 114, 111, 116, 111, 
            50, 46, 84, 101, 115, 116, 65, 108, 108, 84, 121, 112, 101, 115, 80, 114, 111, 116, 111, 50, 
            46, 77, 97, 112, 70, 105, 120, 101, 100, 54, 52, 70, 105, 120, 101, 100, 54, 52, 69, 110, 
            116, 114, 121, 82, 17, 109, 97, 112, 70, 105, 120, 101, 100, 54, 52, 70, 105, 120, 101, 100, 
            54, 52, 18, 126, 10, 21, 109, 97, 112, 95, 115, 102, 105, 120, 101, 100, 51, 50, 95, 115, 
            102, 105, 120, 101, 100, 51, 50, 24, 64, 32, 3, 40, 11, 50, 74, 46, 112, 114, 111, 116, 
            111, 98, 117, 102, 95, 116, 101, 115, 116, 95, 109, 101, 115, 115, 97, 103, 101, 115, 46, 112, 
            114, 111, 116, 111, 50, 46, 84, 101, 115, 116, 65, 108, 108, 84, 121, 112, 101, 115, 80, 114, 
            111, 116, 111, 50, 46, 77, 97, 112, 83, 102, 105, 120, 101, 100, 51, 50, 83, 102, 105, 120, 
            101, 100, 51, 50, 69, 110, 116, 114, 121, 82, 19, 109, 97, 112, 83, 102, 105, 120, 101, 100, 
            51, 50, 83, 102, 105, 120, 101, 100, 51, 50, 18, 126, 10, 21, 109, 97, 112, 95, 115, 102, 
            105, 120, 101, 100, 54, 52, 95, 115, 102, 105, 120, 101, 100, 54, 52, 24, 65, 32, 3, 40, 
            11, 50, 74, 46, 112, 114, 111, 116, 111, 98, 117, 102, 95, 116, 101, 115, 116, 95, 109, 101, 
            115, 115, 97, 103, 101, 115, 46, 112, 114, 111, 116, 111, 50, 46, 84, 101, 115, 116, 65, 108, 
            108, 84, 121, 112, 101, 115, 80, 114, 111, 116, 111, 50, 46, 77, 97, 112, 83, 102, 105, 120, 
            101, 100, 54, 52, 83, 102, 105, 120, 101, 100, 54, 52, 69, 110, 116, 114, 121, 82, 19, 109, 
            97, 112, 83, 102, 105, 120, 101, 100, 54, 52, 83, 102, 105, 120, 101, 100, 54, 52, 18, 108, 
            10, 15, 109, 97, 112, 95, 105, 110, 116, 51, 50, 95, 102, 108, 111, 97, 116, 24, 66, 32, 
            3, 40, 11, 50, 68, 46, 112, 114, 111, 116, 111, 98, 117, 102, 95, 116, 101, 115, 116, 95, 
            109, 101, 115, 115, 97, 103, 101, 115, 46, 112, 114, 111, 116, 111, 50, 46, 84, 101, 115, 116, 
            65, 108, 108, 84, 121, 112, 101, 115, 80, 114, 111, 116, 111, 50, 46, 77, 97, 112, 73, 110, 
            116, 51, 50, 70, 108, 111, 97, 116, 69, 110, 116, 114, 121, 82, 13, 109, 97, 112, 73, 110, 
            116, 51, 50, 70, 108, 111, 97, 116, 18, 111, 10, 16, 109, 97, 112, 95, 105, 110, 116, 51, 
            50, 95, 100, 111, 117, 98, 108, 101, 24, 67, 32, 3, 40, 11, 50, 69, 46, 112, 114, 111, 
            116, 111, 98, 117, 102, 95, 116, 101, 115, 116, 95, 109, 101, 115, 115, 97, 103, 101, 115, 46, 
            112, 114, 111, 116, 111, 50, 46, 84, 101, 115, 116, 65, 108, 108, 84, 121, 112, 101, 115, 80, 
            114, 111, 116, 111, 50, 46, 77, 97, 112, 73, 110, 116, 51, 50, 68, 111, 117, 98, 108, 101, 
            69, 110, 116, 114, 121, 82, 14, 109, 97, 112, 73, 110, 116, 51, 50, 68, 111, 117, 98, 108, 
            101, 18, 102, 10, 13, 109, 97, 112, 95, 98, 111, 111, 108, 95, 98, 111, 111, 108, 24, 68, 
            32, 3, 40, 11, 50, 66, 46, 112, 114, 111, 116, 111, 98, 117, 102, 95, 116, 101, 115, 116, 
            95, 109, 101, 115, 115, 97, 103, 101, 115, 46, 112, 114, 111, 116, 111, 50, 46, 84, 101, 115, 
            116, 65, 108, 108, 84, 121, 112, 101, 115, 80, 114, 111, 116, 111, 50, 46, 77, 97, 112, 66, 
            111, 111, 108, 66, 111, 111, 108, 69, 110, 116, 114, 121, 82, 11, 109, 97, 112, 66, 111, 111, 
            108, 66, 111, 111, 108, 18, 114, 10, 17, 109, 97, 112, 95, 115, 116, 114, 105, 110, 103, 95, 
            115, 116, 114, 105, 110, 103, 24, 69, 32, 3, 40, 11, 50, 70, 46, 112, 114, 111, 116, 111, 
            98, 117, 102, 95, 116, 101, 115, 116, 95, 109, 101, 115, 115, 97, 103, 101, 115, 46, 112, 114, 
            111, 116, 111, 50, 46, 84, 101, 115, 116, 65, 108, 108, 84, 121, 112, 101, 115, 80, 114, 111, 
            116, 111, 50, 46, 77, 97, 112, 83, 116, 114, 105, 110, 103, 83, 116, 114, 105, 110, 103, 69, 
            110, 116, 114, 121, 82, 15, 109, 97, 112, 83, 116, 114, 105, 110, 103, 83, 116, 114, 105, 110, 
            103, 18, 111, 10, 16, 109, 97, 112, 95, 115, 116, 114, 105, 110, 103, 95, 98, 121, 116, 101, 
            115, 24, 70, 32, 3, 40, 11, 50, 69, 46, 112, 114, 111, 116, 111, 98, 117, 102, 95, 116, 
            101, 115, 116, 95, 109, 101, 115, 115, 97, 103, 101, 115, 46, 112, 114, 111, 116, 111, 50, 46, 
            84, 101, 115, 116, 65, 108, 108, 84, 121, 112, 101, 115, 80, 114, 111, 116, 111, 50, 46, 77, 
            97, 112, 83, 116, 114, 105, 110, 103, 66, 121, 116, 101, 115, 69, 110, 116, 114, 121, 82, 14, 
            109, 97, 112, 83, 116, 114, 105, 110, 103, 66, 121, 116, 101, 115, 18, 136, 1, 10, 25, 109, 
            97, 112, 95, 115, 116, 114, 105, 110, 103, 95, 110, 101, 115, 116, 101, 100, 95, 109, 101, 115, 
            115, 97, 103, 101, 24, 71, 32, 3, 40, 11, 50, 77, 46, 112, 114, 111, 116, 111, 98, 117, 
            102, 95, 116, 101, 115, 116, 95, 109, 101, 115, 115, 97, 103, 101, 115, 46, 112, 114, 111, 116, 
            111, 50, 46, 84, 101, 115, 116, 65, 108, 108, 84, 121, 112, 101, 115, 80, 114, 111, 116, 111, 
            50, 46, 77, 97, 112, 83, 116, 114, 105, 110, 103, 78, 101, 115, 116, 101, 100, 77, 101, 115, 
            115, 97, 103, 101, 69, 110, 116, 114, 121, 82, 22, 109, 97, 112, 83, 116, 114, 105, 110, 103, 
            78, 101, 115, 116, 101, 100, 77, 101, 115, 115, 97, 103, 101, 18, 139, 1, 10, 26, 109, 97, 
            112, 95, 115, 116, 114, 105, 110, 103, 95, 102, 111, 114, 101, 105, 103, 110, 95, 109, 101, 115, 
            115, 97, 103, 101, 24, 72, 32, 3, 40, 11, 50, 78, 46, 112, 114, 111, 116, 111, 98, 117, 
            102, 95, 116, 101, 115, 116, 95, 109, 101, 115, 115, 97, 103, 101, 115, 46, 112, 114, 111, 116, 
            111, 50, 46, 84, 101, 115, 116, 65, 108, 108, 84, 121, 112, 101, 115, 80, 114, 111, 116, 111, 
            50, 46, 77, 97, 112, 83, 116, 114, 105, 110, 103, 70, 111, 114, 101, 105, 103, 110, 77, 101, 
            115, 115, 97, 103, 101, 69, 110, 116, 114, 121, 82, 23, 109, 97, 112, 83, 116, 114, 105, 110, 
            103, 70, 111, 114, 101, 105, 103, 110, 77, 101, 115, 115, 97, 103, 101, 18, 127, 10, 22, 109, 
            97, 112, 95, 115, 116, 114, 105, 110, 103, 95, 110, 101, 115, 116, 101, 100, 95, 101, 110, 117, 
            109, 24, 73, 32, 3, 40, 11, 50, 74, 46, 112, 114, 111, 116, 111, 98, 117, 102, 95, 116, 
            101, 115, 116, 95, 109, 101, 115, 115, 97, 103, 101, 115, 46, 112, 114, 111, 116, 111, 50, 46, 
            84, 101, 115, 116, 65, 108, 108, 84, 121, 112, 101, 115, 80, 114, 111, 116, 111, 50, 46, 77, 
            97, 112, 83, 116, 114, 105, 110, 103, 78, 101, 115, 116, 101, 100, 69, 110, 117, 109, 69, 110, 
            116, 114, 121, 82, 19, 109, 97, 112, 83, 116, 114, 105, 110, 103, 78, 101, 115, 116, 101, 100, 
            69, 110, 117, 109, 18, 130, 1, 10, 23, 109, 97, 112, 95, 115, 116, 114, 105, 110, 103, 95, 
            102, 111, 114, 101, 105, 103, 110, 95, 101, 110, 117, 109, 24, 74, 32, 3, 40, 11, 50, 75, 
            46, 112, 114, 111, 116, 111, 98, 117, 102, 95, 116, 101, 115, 116, 95, 109, 101, 115, 115, 97, 
            103, 101, 115, 46, 112, 114, 111, 116, 111, 50, 46, 84, 101, 115, 116, 65, 108, 108, 84, 121, 
            112, 101, 115, 80, 114, 111, 116, 111, 50, 46, 77, 97, 112, 83, 116, 114, 105, 110, 103, 70, 
            111, 114, 101, 105, 103, 110, 69, 110, 117, 109, 69, 110, 116, 114, 121, 82, 20, 109, 97, 112, 
            83, 116, 114, 105, 110, 103, 70, 111, 114, 101, 105, 103, 110, 69, 110, 117, 109, 18, 33, 10, 
            12, 111, 110, 101, 111, 102, 95, 117, 105, 110, 116, 51, 50, 24, 111, 32, 1, 40, 13, 82, 
            11, 111, 110, 101, 111, 102, 85, 105, 110, 116, 51, 50, 18, 113, 10, 20, 111, 110, 101, 111, 
            102, 95, 110, 101, 115, 116, 101, 100, 95, 109, 101, 115, 115, 97, 103, 101, 24, 112, 32, 1, 
            40, 11, 50, 63, 46, 112, 114, 111, 116, 111, 98, 117, 102, 95, 116, 101, 115, 116, 95, 109, 
            101, 115, 115, 97, 103, 101, 115, 46, 112, 114, 111, 116, 111, 50, 46, 84, 101, 115, 116, 65, 
            108, 108, 84, 121, 112, 101, 115, 80, 114, 111, 116, 111, 50, 46, 78, 101, 115, 116, 101, 100, 
            77, 101, 115, 115, 97, 103, 101, 82, 18, 111, 110, 101, 111, 102, 78, 101, 115, 116, 101, 100, 
            77, 101, 115, 115, 97, 103, 101, 18, 33, 10, 12, 111, 110, 101, 111, 102, 95, 115, 116, 114, 
            105, 110, 103, 24, 113, 32, 1, 40, 9, 82, 11, 111, 110, 101, 111, 102, 83, 116, 114, 105, 
            110, 103, 18, 31, 10, 11, 111, 110, 101, 111, 102, 95, 98, 121, 116, 101, 115, 24, 114, 32, 
            1, 40, 12, 82, 10, 111, 110, 101, 111, 102, 66, 121, 116, 101, 115, 18, 29, 10, 10, 111, 
            110, 101, 111, 102, 95, 98, 111, 111, 108, 24, 115, 32, 1, 40, 8, 82, 9, 111, 110, 101, 
            111, 102, 66, 111, 111, 108, 18, 33, 10, 12, 111, 110, 101, 111, 102, 95, 117, 105, 110, 116, 
            54, 52, 24, 116, 32, 1, 40, 4, 82, 11, 111, 110, 101, 111, 102, 85, 105, 110, 116, 54, 
            52, 18, 31, 10, 11, 111, 110, 101, 111, 102, 95, 102, 108, 111, 97, 116, 24, 117, 32, 1, 
            40, 2, 82, 10, 111, 110, 101, 111, 102, 70, 108, 111, 97, 116, 18, 33, 10, 12, 111, 110, 
            101, 111, 102, 95, 100, 111, 117, 98, 108, 101, 24, 118, 32, 1, 40, 1, 82, 11, 111, 110, 
            101, 111, 102, 68, 111, 117, 98, 108, 101, 18, 91, 10, 10, 111, 110, 101, 111, 102, 95, 101, 
            110, 117, 109, 24, 119, 32, 1, 40, 14, 50, 60, 46, 112, 114, 111, 116, 111, 98, 117, 102, 
            95, 116, 101, 115, 116, 95, 109, 101, 115, 115, 97, 103, 101, 115, 46, 112, 114, 111, 116, 111, 
            50, 46, 84, 101, 115, 116, 65, 108, 108, 84, 121, 112, 101, 115, 80, 114, 111, 116, 111, 50, 
            46, 78, 101, 115, 116, 101, 100, 69, 110, 117, 109, 82, 9, 111, 110, 101, 111, 102, 69, 110, 
            117, 109, 18, 75, 10, 4, 100, 97, 116, 97, 24, 201, 1, 32, 1, 40, 10, 50, 54, 46, 
            112, 114, 111, 116, 111, 98, 117, 102, 95, 116, 101, 115, 116, 95, 109, 101, 115, 115, 97, 103, 
            101, 115, 46, 112, 114, 111, 116, 111, 50, 46, 84, 101, 115, 116, 65, 108, 108, 84, 121, 112, 
            101, 115, 80, 114, 111, 116, 111, 50, 46, 68, 97, 116, 97, 82, 4, 100, 97, 116, 97, 18, 
            31, 10, 10, 102, 105, 101, 108, 100, 110, 97, 109, 101, 49, 24, 145, 3, 32, 1, 40, 5, 
            82, 10, 102, 105, 101, 108, 100, 110, 97, 109, 101, 49, 18, 32, 10, 11, 102, 105, 101, 108, 
            100, 95, 110, 97, 109, 101, 50, 24, 146, 3, 32, 1, 40, 5, 82, 10, 102, 105, 101, 108, 
            100, 78, 97, 109, 101, 50, 18, 33, 10, 12, 95, 102, 105, 101, 108, 100, 95, 110, 97, 109, 
            101, 51, 24, 147, 3, 32, 1, 40, 5, 82, 10, 70, 105, 101, 108, 100, 78, 97, 109, 101, 
            51, 18, 34, 10, 13, 102, 105, 101, 108, 100, 95, 95, 110, 97, 109, 101, 52, 95, 24, 148, 
            3, 32, 1, 40, 5, 82, 10, 102, 105, 101, 108, 100, 78, 97, 109, 101, 52, 18, 33, 10, 
            11, 102, 105, 101, 108, 100, 48, 110, 97, 109, 101, 53, 24, 149, 3, 32, 1, 40, 5, 82, 
            11, 102, 105, 101, 108, 100, 48, 110, 97, 109, 101, 53, 18, 35, 10, 13, 102, 105, 101, 108, 
            100, 95, 48, 95, 110, 97, 109, 101, 54, 24, 150, 3, 32, 1, 40, 5, 82, 11, 102, 105, 
            101, 108, 100, 48, 78, 97, 109, 101, 54, 18, 31, 10, 10, 102, 105, 101, 108, 100, 78, 97, 
            109, 101, 55, 24, 151, 3, 32, 1, 40, 5, 82, 10, 102, 105, 101, 108, 100, 78, 97, 109, 
            101, 55, 18, 31, 10, 10, 70, 105, 101, 108, 100, 78, 97, 109, 101, 56, 24, 152, 3, 32, 
            1, 40, 5, 82, 10, 70, 105, 101, 108, 100, 78, 97, 109, 101, 56, 18, 32, 10, 11, 102, 
            105, 101, 108, 100, 95, 78, 97, 109, 101, 57, 24, 153, 3, 32, 1, 40, 5, 82, 10, 102, 
            105, 101, 108, 100, 78, 97, 109, 101, 57, 18, 34, 10, 12, 70, 105, 101, 108, 100, 95, 78, 
            97, 109, 101, 49, 48, 24, 154, 3, 32, 1, 40, 5, 82, 11, 70, 105, 101, 108, 100, 78, 
            97, 109, 101, 49, 48, 18, 34, 10, 12, 70, 73, 69, 76, 68, 95, 78, 65, 77, 69, 49, 
            49, 24, 155, 3, 32, 1, 40, 5, 82, 11, 70, 73, 69, 76, 68, 78, 65, 77, 69, 49, 
            49, 18, 34, 10, 12, 70, 73, 69, 76, 68, 95, 110, 97, 109, 101, 49, 50, 24, 156, 3, 
            32, 1, 40, 5, 82, 11, 70, 73, 69, 76, 68, 78, 97, 109, 101, 49, 50, 18, 36, 10, 
            14, 95, 95, 102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 49, 51, 24, 157, 3, 32, 1, 
            40, 5, 82, 11, 70, 105, 101, 108, 100, 78, 97, 109, 101, 49, 51, 18, 36, 10, 14, 95, 
            95, 70, 105, 101, 108, 100, 95, 110, 97, 109, 101, 49, 52, 24, 158, 3, 32, 1, 40, 5, 
            82, 11, 70, 105, 101, 108, 100, 78, 97, 109, 101, 49, 52, 18, 35, 10, 13, 102, 105, 101, 
            108, 100, 95, 95, 110, 97, 109, 101, 49, 53, 24, 159, 3, 32, 1, 40, 5, 82, 11, 102, 
            105, 101, 108, 100, 78, 97, 109, 101, 49, 53, 18, 35, 10, 13, 102, 105, 101, 108, 100, 95, 
            95, 78, 97, 109, 101, 49, 54, 24, 160, 3, 32, 1, 40, 5, 82, 11, 102, 105, 101, 108, 
            100, 78, 97, 109, 101, 49, 54, 18, 36, 10, 14, 102, 105, 101, 108, 100, 95, 110, 97, 109, 
            101, 49, 55, 95, 95, 24, 161, 3, 32, 1, 40, 5, 82, 11, 102, 105, 101, 108, 100, 78, 
            97, 109, 101, 49, 55, 18, 36, 10, 14, 70, 105, 101, 108, 100, 95, 110, 97, 109, 101, 49, 
            56, 95, 95, 24, 162, 3, 32, 1, 40, 5, 82, 11, 70, 105, 101, 108, 100, 78, 97, 109, 
            101, 49, 56, 26, 114, 10, 13, 78, 101, 115, 116, 101, 100, 77, 101, 115, 115, 97, 103, 101, 
            18, 12, 10, 1, 97, 24, 1, 32, 1, 40, 5, 82, 1, 97, 18, 83, 10, 11, 99, 111, 
            114, 101, 99, 117, 114, 115, 105, 118, 101, 24, 2, 32, 1, 40, 11, 50, 49, 46, 112, 114, 
            111, 116, 111, 98, 117, 102, 95, 116, 101, 115, 116, 95, 109, 101, 115, 115, 97, 103, 101, 115, 
            46, 112, 114, 111, 116, 111, 50, 46, 84, 101, 115, 116, 65, 108, 108, 84, 121, 112, 101, 115, 
            80, 114, 111, 116, 111, 50, 82, 11, 99, 111, 114, 101, 99, 117, 114, 115, 105, 118, 101, 26, 
            64, 10, 18, 77, 97, 112, 73, 110, 116, 51, 50, 73, 110, 116, 51, 50, 69, 110, 116, 114, 
            121, 18, 16, 10, 3, 107, 101, 121, 24, 1, 32, 1, 40, 5, 82, 3, 107, 101, 121, 18, 
            20, 10, 5, 118, 97, 108, 117, 101, 24, 2, 32, 1, 40, 5, 82, 5, 118, 97, 108, 117, 
            101, 58, 2, 56, 1, 26, 64, 10, 18, 77, 97, 112, 73, 110, 116, 54, 52, 73, 110, 116, 
            54, 52, 69, 110, 116, 114, 121, 18, 16, 10, 3, 107, 101, 121, 24, 1, 32, 1, 40, 3, 
            82, 3, 107, 101, 121, 18, 20, 10, 5, 118, 97, 108, 117, 101, 24, 2, 32, 1, 40, 3, 
            82, 5, 118, 97, 108, 117, 101, 58, 2, 56, 1, 26, 66, 10, 20, 77, 97, 112, 85, 105, 
            110, 116, 51, 50, 85, 105, 110, 116, 51, 50, 69, 110, 116, 114, 121, 18, 16, 10, 3, 107, 
            101, 121, 24, 1, 32, 1, 40, 13, 82, 3, 107, 101, 121, 18, 20, 10, 5, 118, 97, 108, 
            117, 101, 24, 2, 32, 1, 40, 13, 82, 5, 118, 97, 108, 117, 101, 58, 2, 56, 1, 26, 
            66, 10, 20, 77, 97, 112, 85, 105, 110, 116, 54, 52, 85, 105, 110, 116, 54, 52, 69, 110, 
            116, 114, 121, 18, 16, 10, 3, 107, 101, 121, 24, 1, 32, 1, 40, 4, 82, 3, 107, 101, 
            121, 18, 20, 10, 5, 118, 97, 108, 117, 101, 24, 2, 32, 1, 40, 4, 82, 5, 118, 97, 
            108, 117, 101, 58, 2, 56, 1, 26, 66, 10, 20, 77, 97, 112, 83, 105, 110, 116, 51, 50, 
            83, 105, 110, 116, 51, 50, 69, 110, 116, 114, 121, 18, 16, 10, 3, 107, 101, 121, 24, 1, 
            32, 1, 40, 17, 82, 3, 107, 101, 121, 18, 20, 10, 5, 118, 97, 108, 117, 101, 24, 2, 
            32, 1, 40, 17, 82, 5, 118, 97, 108, 117, 101, 58, 2, 56, 1, 26, 66, 10, 20, 77, 
            97, 112, 83, 105, 110, 116, 54, 52, 83, 105, 110, 116, 54, 52, 69, 110, 116, 114, 121, 18, 
            16, 10, 3, 107, 101, 121, 24, 1, 32, 1, 40, 18, 82, 3, 107, 101, 121, 18, 20, 10, 
            5, 118, 97, 108, 117, 101, 24, 2, 32, 1, 40, 18, 82, 5, 118, 97, 108, 117, 101, 58, 
            2, 56, 1, 26, 68, 10, 22, 77, 97, 112, 70, 105, 120, 101, 100, 51, 50, 70, 105, 120, 
            101, 100, 51, 50, 69, 110, 116, 114, 121, 18, 16, 10, 3, 107, 101, 121, 24, 1, 32, 1, 
            40, 7, 82, 3, 107, 101, 121, 18, 20, 10, 5, 118, 97, 108, 117, 101, 24, 2, 32, 1, 
            40, 7, 82, 5, 118, 97, 108, 117, 101, 58, 2, 56, 1, 26, 68, 10, 22, 77, 97, 112, 
            70, 105, 120, 101, 100, 54, 52, 70, 105, 120, 101, 100, 54, 52, 69, 110, 116, 114, 121, 18, 
            16, 10, 3, 107, 101, 121, 24, 1, 32, 1, 40, 6, 82, 3, 107, 101, 121, 18, 20, 10, 
            5, 118, 97, 108, 117, 101, 24, 2, 32, 1, 40, 6, 82, 5, 118, 97, 108, 117, 101, 58, 
            2, 56, 1, 26, 70, 10, 24, 77, 97, 112, 83, 102, 105, 120, 101, 100, 51, 50, 83, 102, 
            105, 120, 101, 100, 51, 50, 69, 110, 116, 114, 121, 18, 16, 10, 3, 107, 101, 121, 24, 1, 
            32, 1, 40, 15, 82, 3, 107, 101, 121, 18, 20, 10, 5, 118, 97, 108, 117, 101, 24, 2, 
            32, 1, 40, 15, 82, 5, 118, 97, 108, 117, 101, 58, 2, 56, 1, 26, 70, 10, 24, 77, 
            97, 112, 83, 102, 105, 120, 101, 100, 54, 52, 83, 102, 105, 120, 101, 100, 54, 52, 69, 110, 
            116, 114, 121, 18, 16, 10, 3, 107, 101, 121, 24, 1, 32, 1, 40, 16, 82, 3, 107, 101, 
            121, 18, 20, 10, 5, 118, 97, 108, 117, 101, 24, 2, 32, 1, 40, 16, 82, 5, 118, 97, 
            108, 117, 101, 58, 2, 56, 1, 26, 64, 10, 18, 77, 97, 112, 73, 110, 116, 51, 50, 70, 
            108, 111, 97, 116, 69, 110, 116, 114, 121, 18, 16, 10, 3, 107, 101, 121, 24, 1, 32, 1, 
            40, 5, 82, 3, 107, 101, 121, 18, 20, 10, 5, 118, 97, 108, 117, 101, 24, 2, 32, 1, 
            40, 2, 82, 5, 118, 97, 108, 117, 101, 58, 2, 56, 1, 26, 65, 10, 19, 77, 97, 112, 
            73, 110, 116, 51, 50, 68, 111, 117, 98, 108, 101, 69, 110, 116, 114, 121, 18, 16, 10, 3, 
            107, 101, 121, 24, 1, 32, 1, 40, 5, 82, 3, 107, 101, 121, 18, 20, 10, 5, 118, 97, 
            108, 117, 101, 24, 2, 32, 1, 40, 1, 82, 5, 118, 97, 108, 117, 101, 58, 2, 56, 1, 
            26, 62, 10, 16, 77, 97, 112, 66, 111, 111, 108, 66, 111, 111, 108, 69, 110, 116, 114, 121, 
            18, 16, 10, 3, 107, 101, 121, 24, 1, 32, 1, 40, 8, 82, 3, 107, 101, 121, 18, 20, 
            10, 5, 118, 97, 108, 117, 101, 24, 2, 32, 1, 40, 8, 82, 5, 118, 97, 108, 117, 101, 
            58, 2, 56, 1, 26, 66, 10, 20, 77, 97, 112, 83, 116, 114, 105, 110, 103, 83, 116, 114, 
            105, 110, 103, 69, 110, 116, 114, 121, 18, 16, 10, 3, 107, 101, 121, 24, 1, 32, 1, 40, 
            9, 82, 3, 107, 101, 121, 18, 20, 10, 5, 118, 97, 108, 117, 101, 24, 2, 32, 1, 40, 
            9, 82, 5, 118, 97, 108, 117, 101, 58, 2, 56, 1, 26, 65, 10, 19, 77, 97, 112, 83, 
            116, 114, 105, 110, 103, 66, 121, 116, 101, 115, 69, 110, 116, 114, 121, 18, 16, 10, 3, 107, 
            101, 121, 24, 1, 32, 1, 40, 9, 82, 3, 107, 101, 121, 18, 20, 10, 5, 118, 97, 108, 
            117, 101, 24, 2, 32, 1, 40, 12, 82, 5, 118, 97, 108, 117, 101, 58, 2, 56, 1, 26, 
            138, 1, 10, 27, 77, 97, 112, 83, 116, 114, 105, 110, 103, 78, 101, 115, 116, 101, 100, 77, 
            101, 115, 115, 97, 103, 101, 69, 110, 116, 114, 121, 18, 16, 10, 3, 107, 101, 121, 24, 1, 
            32, 1, 40, 9, 82, 3, 107, 101, 121, 18, 85, 10, 5, 118, 97, 108, 117, 101, 24, 2, 
            32, 1, 40, 11, 50, 63, 46, 112, 114, 111, 116, 111, 98, 117, 102, 95, 116, 101, 115, 116, 
            95, 109, 101, 115, 115, 97, 103, 101, 115, 46, 112, 114, 111, 116, 111, 50, 46, 84, 101, 115, 
            116, 65, 108, 108, 84, 121, 112, 101, 115, 80, 114, 111, 116, 111, 50, 46, 78, 101, 115, 116, 
            101, 100, 77, 101, 115, 115, 97, 103, 101, 82, 5, 118, 97, 108, 117, 101, 58, 2, 56, 1, 
            26, 127, 10, 28, 77, 97, 112, 83, 116, 114, 105, 110, 103, 70, 111, 114, 101, 105, 103, 110, 
            77, 101, 115, 115, 97, 103, 101, 69, 110, 116, 114, 121, 18, 16, 10, 3, 107, 101, 121, 24, 
            1, 32, 1, 40, 9, 82, 3, 107, 101, 121, 18, 73, 10, 5, 118, 97, 108, 117, 101, 24, 
            2, 32, 1, 40, 11, 50, 51, 46, 112, 114, 111, 116, 111, 98, 117, 102, 95, 116, 101, 115, 
            116, 95, 109, 101, 115, 115, 97, 103, 101, 115, 46, 112, 114, 111, 116, 111, 50, 46, 70, 111, 
            114, 101, 105, 103, 110, 77, 101, 115, 115, 97, 103, 101, 80, 114, 111, 116, 111, 50, 82, 5, 
            118, 97, 108, 117, 101, 58, 2, 56, 1, 26, 132, 1, 10, 24, 77, 97, 112, 83, 116, 114, 
            105, 110, 103, 78, 101, 115, 116, 101, 100, 69, 110, 117, 109, 69, 110, 116, 114, 121, 18, 16, 
            10, 3, 107, 101, 121, 24, 1, 32, 1, 40, 9, 82, 3, 107, 101, 121, 18, 82, 10, 5, 
            118, 97, 108, 117, 101, 24, 2, 32, 1, 40, 14, 50, 60, 46, 112, 114, 111, 116, 111, 98, 
            117, 102, 95, 116, 101, 115, 116, 95, 109, 101, 115, 115, 97, 103, 101, 115, 46, 112, 114, 111, 
            116, 111, 50, 46, 84, 101, 115, 116, 65, 108, 108, 84, 121, 112, 101, 115, 80, 114, 111, 116, 
            111, 50, 46, 78, 101, 115, 116, 101, 100, 69, 110, 117, 109, 82, 5, 118, 97, 108, 117, 101, 
            58, 2, 56, 1, 26, 121, 10, 25, 77, 97, 112, 83, 116, 114, 105, 110, 103, 70, 111, 114, 
            101, 105, 103, 110, 69, 110, 117, 109, 69, 110, 116, 114, 121, 18, 16, 10, 3, 107, 101, 121, 
            24, 1, 32, 1, 40, 9, 82, 3, 107, 101, 121, 18, 70, 10, 5, 118, 97, 108, 117, 101, 
            24, 2, 32, 1, 40, 14, 50, 48, 46, 112, 114, 111, 116, 111, 98, 117, 102, 95, 116, 101, 
            115, 116, 95, 109, 101, 115, 115, 97, 103, 101, 115, 46, 112, 114, 111, 116, 111, 50, 46, 70, 
            111, 114, 101, 105, 103, 110, 69, 110, 117, 109, 80, 114, 111, 116, 111, 50, 82, 5, 118, 97, 
            108, 117, 101, 58, 2, 56, 1, 26, 76, 10, 4, 68, 97, 116, 97, 18, 32, 10, 11, 103, 
            114, 111, 117, 112, 95, 105, 110, 116, 51, 50, 24, 202, 1, 32, 1, 40, 5, 82, 10, 103, 
            114, 111, 117, 112, 73, 110, 116, 51, 50, 18, 34, 10, 12, 103, 114, 111, 117, 112, 95, 117, 
            105, 110, 116, 51, 50, 24, 203, 1, 32, 1, 40, 13, 82, 11, 103, 114, 111, 117, 112, 85, 
            105, 110, 116, 51, 50, 26, 33, 10, 17, 77, 101, 115, 115, 97, 103, 101, 83, 101, 116, 67, 
            111, 114, 114, 101, 99, 116, 42, 8, 8, 4, 16, 255, 255, 255, 255, 7, 58, 2, 8, 1, 
            26, 250, 1, 10, 27, 77, 101, 115, 115, 97, 103, 101, 83, 101, 116, 67, 111, 114, 114, 101, 
            99, 116, 69, 120, 116, 101, 110, 115, 105, 111, 110, 49, 18, 16, 10, 3, 115, 116, 114, 24, 
            25, 32, 1, 40, 9, 82, 3, 115, 116, 114, 50, 200, 1, 10, 21, 109, 101, 115, 115, 97, 
            103, 101, 95, 115, 101, 116, 95, 101, 120, 116, 101, 110, 115, 105, 111, 110, 24, 249, 187, 94, 
            32, 1, 40, 11, 50, 77, 46, 112, 114, 111, 116, 111, 98, 117, 102, 95, 116, 101, 115, 116, 
            95, 109, 101, 115, 115, 97, 103, 101, 115, 46, 112, 114, 111, 116, 111, 50, 46, 84, 101, 115, 
            116, 65, 108, 108, 84, 121, 112, 101, 115, 80, 114, 111, 116, 111, 50, 46, 77, 101, 115, 115, 
            97, 103, 101, 83, 101, 116, 67, 111, 114, 114, 101, 99, 116, 69, 120, 116, 101, 110, 115, 105, 
            111, 110, 49, 18, 67, 46, 112, 114, 111, 116, 111, 98, 117, 102, 95, 116, 101, 115, 116, 95, 
            109, 101, 115, 115, 97, 103, 101, 115, 46, 112, 114, 111, 116, 111, 50, 46, 84, 101, 115, 116, 
            65, 108, 108, 84, 121, 112, 101, 115, 80, 114, 111, 116, 111, 50, 46, 77, 101, 115, 115, 97, 
            103, 101, 83, 101, 116, 67, 111, 114, 114, 101, 99, 116, 82, 19, 109, 101, 115, 115, 97, 103, 
            101, 83, 101, 116, 69, 120, 116, 101, 110, 115, 105, 111, 110, 26, 247, 1, 10, 27, 77, 101, 
            115, 115, 97, 103, 101, 83, 101, 116, 67, 111, 114, 114, 101, 99, 116, 69, 120, 116, 101, 110, 
            115, 105, 111, 110, 50, 18, 12, 10, 1, 105, 24, 9, 32, 1, 40, 5, 82, 1, 105, 50, 
            201, 1, 10, 21, 109, 101, 115, 115, 97, 103, 101, 95, 115, 101, 116, 95, 101, 120, 116, 101, 
            110, 115, 105, 111, 110, 24, 144, 179, 252, 1, 32, 1, 40, 11, 50, 77, 46, 112, 114, 111, 
            116, 111, 98, 117, 102, 95, 116, 101, 115, 116, 95, 109, 101, 115, 115, 97, 103, 101, 115, 46, 
            112, 114, 111, 116, 111, 50, 46, 84, 101, 115, 116, 65, 108, 108, 84, 121, 112, 101, 115, 80, 
            114, 111, 116, 111, 50, 46, 77, 101, 115, 115, 97, 103, 101, 83, 101, 116, 67, 111, 114, 114, 
            101, 99, 116, 69, 120, 116, 101, 110, 115, 105, 111, 110, 50, 18, 67, 46, 112, 114, 111, 116, 
            111, 98, 117, 102, 95, 116, 101, 115, 116, 95, 109, 101, 115, 115, 97, 103, 101, 115, 46, 112, 
            114, 111, 116, 111, 50, 46, 84, 101, 115, 116, 65, 108, 108, 84, 121, 112, 101, 115, 80, 114, 
            111, 116, 111, 50, 46, 77, 101, 115, 115, 97, 103, 101, 83, 101, 116, 67, 111, 114, 114, 101, 
            99, 116, 82, 19, 109, 101, 115, 115, 97, 103, 101, 83, 101, 116, 69, 120, 116, 101, 110, 115, 
            105, 111, 110, 34, 55, 10, 10, 78, 101, 115, 116, 101, 100, 69, 110, 117, 109, 18, 5, 10, 
            3, 70, 79, 79, 18, 7, 10, 3, 66, 65, 82, 16, 1, 18, 7, 10, 3, 66, 65, 90, 
            16, 2, 18, 16, 10, 3, 78, 69, 71, 16, 255, 255, 255, 255, 255, 255, 255, 255, 255, 1, 
            42, 5, 8, 120, 16, 201, 1, 66, 13, 10, 11, 111, 110, 101, 111, 102, 95, 102, 105, 101, 
            108, 100, 34, 36, 10, 20, 70, 111, 114, 101, 105, 103, 110, 77, 101, 115, 115, 97, 103, 101, 
            80, 114, 111, 116, 111, 50, 18, 12, 10, 1, 99, 24, 1, 32, 1, 40, 5, 82, 1, 99, 
            42, 68, 10, 17, 70, 111, 114, 101, 105, 103, 110, 69, 110, 117, 109, 80, 114, 111, 116, 111, 
            50, 18, 13, 10, 11, 70, 79, 82, 69, 73, 71, 78, 95, 70, 79, 79, 18, 15, 10, 11, 
            70, 79, 82, 69, 73, 71, 78, 95, 66, 65, 82, 16, 1, 18, 15, 10, 11, 70, 79, 82, 
            69, 73, 71, 78, 95, 66, 65, 90, 16, 2, 58, 90, 10, 15, 101, 120, 116, 101, 110, 115, 
            105, 111, 110, 95, 105, 110, 116, 51, 50, 24, 120, 32, 1, 40, 5, 18, 49, 46, 112, 114, 
            111, 116, 111, 98, 117, 102, 95, 116, 101, 115, 116, 95, 109, 101, 115, 115, 97, 103, 101, 115, 
            46, 112, 114, 111, 116, 111, 50, 46, 84, 101, 115, 116, 65, 108, 108, 84, 121, 112, 101, 115, 
            80, 114, 111, 116, 111, 50, 82, 14, 101, 120, 116, 101, 110, 115, 105, 111, 110, 73, 110, 116, 
            51, 50, 66, 45, 10, 40, 99, 111, 109, 46, 103, 111, 111, 103, 108, 101, 46, 112, 114, 111, 
            116, 111, 98, 117, 102, 95, 116, 101, 115, 116, 95, 109, 101, 115, 115, 97, 103, 101, 115, 46, 
            112, 114, 111, 116, 111, 50, 248, 1, 1, 
        ].as_ref()).expect("Could not read file descriptor")]);
        FILE_DEPS = ::std::option::Option::Some([]);
        FILE_POOL = ::std::option::Option::Some(::protrust::reflect::DescriptorPool::build_generated_pool(
            FILE_PROTO.as_ref().unwrap(),
            FILE_DEPS.as_ref().unwrap()
        ));
        FILE_DESCRIPTOR = ::std::option::Option::Some(FILE_POOL.as_ref().unwrap().find_file_by_name("test_messages_proto2.proto").unwrap());
    }
}

/// Gets the pool containing all the symbols in this proto file and its dependencies
pub fn pool() -> &'static ::protrust::reflect::DescriptorPool<'static> {
    unsafe {
        FILE_ONCE.call_once(file_once_init);
        FILE_POOL.as_ref().unwrap()
    }
}
/// Gets the file descriptor representing the proto that created this generated file
pub fn file() -> &'static ::protrust::reflect::FileDescriptor {
    unsafe {
        FILE_ONCE.call_once(file_once_init);
        FILE_DESCRIPTOR.as_ref().unwrap()
    }
}
/// This proto includes every type of field in both singular and repeated
/// forms.
///
/// Also, crucially, all messages and enums in this file are eventually
/// submessages of this message.  So for example, a fuzz test of TestAllTypes
/// could trigger bugs that occur in any message type in this file.  We verify
/// this stays true in a unit test.
#[derive(Clone, Debug, PartialEq)]
pub struct TestAllTypesProto2 {
    optional_int32: ::std::option::Option<i32>,
    optional_int64: ::std::option::Option<i64>,
    optional_uint32: ::std::option::Option<u32>,
    optional_uint64: ::std::option::Option<u64>,
    optional_sint32: ::std::option::Option<i32>,
    optional_sint64: ::std::option::Option<i64>,
    optional_fixed32: ::std::option::Option<u32>,
    optional_fixed64: ::std::option::Option<u64>,
    optional_sfixed32: ::std::option::Option<i32>,
    optional_sfixed64: ::std::option::Option<i64>,
    optional_float: ::std::option::Option<f32>,
    optional_double: ::std::option::Option<f64>,
    optional_bool: ::std::option::Option<bool>,
    optional_string: ::std::option::Option<::std::string::String>,
    optional_bytes: ::std::option::Option<::std::vec::Vec<u8>>,
    optional_nested_message: ::std::option::Option<::std::boxed::Box<self::TestAllTypesProto2_NestedMessage>>,
    optional_foreign_message: ::std::option::Option<::std::boxed::Box<self::ForeignMessageProto2>>,
    optional_nested_enum: ::std::option::Option<::protrust::EnumValue<self::TestAllTypesProto2_NestedEnum>>,
    optional_foreign_enum: ::std::option::Option<::protrust::EnumValue<self::ForeignEnumProto2>>,
    optional_string_piece: ::std::option::Option<::std::string::String>,
    optional_cord: ::std::option::Option<::std::string::String>,
    recursive_message: ::std::option::Option<::std::boxed::Box<self::TestAllTypesProto2>>,
    repeated_int32: ::protrust::collections::RepeatedField<i32>,
    repeated_int64: ::protrust::collections::RepeatedField<i64>,
    repeated_uint32: ::protrust::collections::RepeatedField<u32>,
    repeated_uint64: ::protrust::collections::RepeatedField<u64>,
    repeated_sint32: ::protrust::collections::RepeatedField<i32>,
    repeated_sint64: ::protrust::collections::RepeatedField<i64>,
    repeated_fixed32: ::protrust::collections::RepeatedField<u32>,
    repeated_fixed64: ::protrust::collections::RepeatedField<u64>,
    repeated_sfixed32: ::protrust::collections::RepeatedField<i32>,
    repeated_sfixed64: ::protrust::collections::RepeatedField<i64>,
    repeated_float: ::protrust::collections::RepeatedField<f32>,
    repeated_double: ::protrust::collections::RepeatedField<f64>,
    repeated_bool: ::protrust::collections::RepeatedField<bool>,
    repeated_string: ::protrust::collections::RepeatedField<::std::string::String>,
    repeated_bytes: ::protrust::collections::RepeatedField<::std::vec::Vec<u8>>,
    repeated_nested_message: ::protrust::collections::RepeatedField<self::TestAllTypesProto2_NestedMessage>,
    repeated_foreign_message: ::protrust::collections::RepeatedField<self::ForeignMessageProto2>,
    repeated_nested_enum: ::protrust::collections::RepeatedField<::protrust::EnumValue<self::TestAllTypesProto2_NestedEnum>>,
    repeated_foreign_enum: ::protrust::collections::RepeatedField<::protrust::EnumValue<self::ForeignEnumProto2>>,
    repeated_string_piece: ::protrust::collections::RepeatedField<::std::string::String>,
    repeated_cord: ::protrust::collections::RepeatedField<::std::string::String>,
    map_int32_int32: ::protrust::collections::MapField<i32, i32>,
    map_int64_int64: ::protrust::collections::MapField<i64, i64>,
    map_uint32_uint32: ::protrust::collections::MapField<u32, u32>,
    map_uint64_uint64: ::protrust::collections::MapField<u64, u64>,
    map_sint32_sint32: ::protrust::collections::MapField<i32, i32>,
    map_sint64_sint64: ::protrust::collections::MapField<i64, i64>,
    map_fixed32_fixed32: ::protrust::collections::MapField<u32, u32>,
    map_fixed64_fixed64: ::protrust::collections::MapField<u64, u64>,
    map_sfixed32_sfixed32: ::protrust::collections::MapField<i32, i32>,
    map_sfixed64_sfixed64: ::protrust::collections::MapField<i64, i64>,
    map_int32_float: ::protrust::collections::MapField<i32, f32>,
    map_int32_double: ::protrust::collections::MapField<i32, f64>,
    map_bool_bool: ::protrust::collections::MapField<bool, bool>,
    map_string_string: ::protrust::collections::MapField<::std::string::String, ::std::string::String>,
    map_string_bytes: ::protrust::collections::MapField<::std::string::String, ::std::vec::Vec<u8>>,
    map_string_nested_message: ::protrust::collections::MapField<::std::string::String, self::TestAllTypesProto2_NestedMessage>,
    map_string_foreign_message: ::protrust::collections::MapField<::std::string::String, self::ForeignMessageProto2>,
    map_string_nested_enum: ::protrust::collections::MapField<::std::string::String, ::protrust::EnumValue<self::TestAllTypesProto2_NestedEnum>>,
    map_string_foreign_enum: ::protrust::collections::MapField<::std::string::String, ::protrust::EnumValue<self::ForeignEnumProto2>>,
    data: ::std::option::Option<::std::boxed::Box<self::TestAllTypesProto2_Data>>,
    fieldname1: ::std::option::Option<i32>,
    field_name2: ::std::option::Option<i32>,
    _field_name3: ::std::option::Option<i32>,
    field__name4_: ::std::option::Option<i32>,
    field0name5: ::std::option::Option<i32>,
    field_0_name6: ::std::option::Option<i32>,
    fieldName7: ::std::option::Option<i32>,
    FieldName8: ::std::option::Option<i32>,
    field_Name9: ::std::option::Option<i32>,
    Field_Name10: ::std::option::Option<i32>,
    FIELD_NAME11: ::std::option::Option<i32>,
    FIELD_name12: ::std::option::Option<i32>,
    __field_name13: ::std::option::Option<i32>,
    __Field_name14: ::std::option::Option<i32>,
    field__name15: ::std::option::Option<i32>,
    field__Name16: ::std::option::Option<i32>,
    field_name17__: ::std::option::Option<i32>,
    Field_name18__: ::std::option::Option<i32>,
    oneof_field: self::TestAllTypesProto2_OneofField,
    unknown_fields: ::protrust::UnknownFieldSet
}
static TEST_ALL_TYPES_PROTO2_REPEATED_INT32_CODEC: ::protrust::Codec<i32> = ::protrust::Codec::int32(248);
static TEST_ALL_TYPES_PROTO2_REPEATED_INT64_CODEC: ::protrust::Codec<i64> = ::protrust::Codec::int64(256);
static TEST_ALL_TYPES_PROTO2_REPEATED_UINT32_CODEC: ::protrust::Codec<u32> = ::protrust::Codec::uint32(264);
static TEST_ALL_TYPES_PROTO2_REPEATED_UINT64_CODEC: ::protrust::Codec<u64> = ::protrust::Codec::uint64(272);
static TEST_ALL_TYPES_PROTO2_REPEATED_SINT32_CODEC: ::protrust::Codec<i32> = ::protrust::Codec::sint32(280);
static TEST_ALL_TYPES_PROTO2_REPEATED_SINT64_CODEC: ::protrust::Codec<i64> = ::protrust::Codec::sint64(288);
static TEST_ALL_TYPES_PROTO2_REPEATED_FIXED32_CODEC: ::protrust::Codec<u32> = ::protrust::Codec::fixed32(301);
static TEST_ALL_TYPES_PROTO2_REPEATED_FIXED64_CODEC: ::protrust::Codec<u64> = ::protrust::Codec::fixed64(305);
static TEST_ALL_TYPES_PROTO2_REPEATED_SFIXED32_CODEC: ::protrust::Codec<i32> = ::protrust::Codec::sfixed32(317);
static TEST_ALL_TYPES_PROTO2_REPEATED_SFIXED64_CODEC: ::protrust::Codec<i64> = ::protrust::Codec::sfixed64(321);
static TEST_ALL_TYPES_PROTO2_REPEATED_FLOAT_CODEC: ::protrust::Codec<f32> = ::protrust::Codec::float(333);
static TEST_ALL_TYPES_PROTO2_REPEATED_DOUBLE_CODEC: ::protrust::Codec<f64> = ::protrust::Codec::double(337);
static TEST_ALL_TYPES_PROTO2_REPEATED_BOOL_CODEC: ::protrust::Codec<bool> = ::protrust::Codec::bool(344);
static TEST_ALL_TYPES_PROTO2_REPEATED_STRING_CODEC: ::protrust::Codec<::std::string::String> = ::protrust::Codec::string(354);
static TEST_ALL_TYPES_PROTO2_REPEATED_BYTES_CODEC: ::protrust::Codec<::std::vec::Vec<u8>> = ::protrust::Codec::bytes(362);
static TEST_ALL_TYPES_PROTO2_REPEATED_NESTED_MESSAGE_CODEC: ::protrust::Codec<self::TestAllTypesProto2_NestedMessage> = ::protrust::Codec::message(386);
static TEST_ALL_TYPES_PROTO2_REPEATED_FOREIGN_MESSAGE_CODEC: ::protrust::Codec<self::ForeignMessageProto2> = ::protrust::Codec::message(394);
static TEST_ALL_TYPES_PROTO2_REPEATED_NESTED_ENUM_CODEC: ::protrust::Codec<::protrust::EnumValue<self::TestAllTypesProto2_NestedEnum>> = ::protrust::Codec::enum_value(408);
static TEST_ALL_TYPES_PROTO2_REPEATED_FOREIGN_ENUM_CODEC: ::protrust::Codec<::protrust::EnumValue<self::ForeignEnumProto2>> = ::protrust::Codec::enum_value(416);
static TEST_ALL_TYPES_PROTO2_REPEATED_STRING_PIECE_CODEC: ::protrust::Codec<::std::string::String> = ::protrust::Codec::string(434);
static TEST_ALL_TYPES_PROTO2_REPEATED_CORD_CODEC: ::protrust::Codec<::std::string::String> = ::protrust::Codec::string(442);
static TEST_ALL_TYPES_PROTO2_MAP_INT32_INT32_CODEC: ::protrust::collections::MapCodec<i32, i32> = ::protrust::collections::MapCodec::new(::protrust::Codec::int32(8), ::protrust::Codec::int32(16), 450);
static TEST_ALL_TYPES_PROTO2_MAP_INT64_INT64_CODEC: ::protrust::collections::MapCodec<i64, i64> = ::protrust::collections::MapCodec::new(::protrust::Codec::int64(8), ::protrust::Codec::int64(16), 458);
static TEST_ALL_TYPES_PROTO2_MAP_UINT32_UINT32_CODEC: ::protrust::collections::MapCodec<u32, u32> = ::protrust::collections::MapCodec::new(::protrust::Codec::uint32(8), ::protrust::Codec::uint32(16), 466);
static TEST_ALL_TYPES_PROTO2_MAP_UINT64_UINT64_CODEC: ::protrust::collections::MapCodec<u64, u64> = ::protrust::collections::MapCodec::new(::protrust::Codec::uint64(8), ::protrust::Codec::uint64(16), 474);
static TEST_ALL_TYPES_PROTO2_MAP_SINT32_SINT32_CODEC: ::protrust::collections::MapCodec<i32, i32> = ::protrust::collections::MapCodec::new(::protrust::Codec::sint32(8), ::protrust::Codec::sint32(16), 482);
static TEST_ALL_TYPES_PROTO2_MAP_SINT64_SINT64_CODEC: ::protrust::collections::MapCodec<i64, i64> = ::protrust::collections::MapCodec::new(::protrust::Codec::sint64(8), ::protrust::Codec::sint64(16), 490);
static TEST_ALL_TYPES_PROTO2_MAP_FIXED32_FIXED32_CODEC: ::protrust::collections::MapCodec<u32, u32> = ::protrust::collections::MapCodec::new(::protrust::Codec::fixed32(13), ::protrust::Codec::fixed32(21), 498);
static TEST_ALL_TYPES_PROTO2_MAP_FIXED64_FIXED64_CODEC: ::protrust::collections::MapCodec<u64, u64> = ::protrust::collections::MapCodec::new(::protrust::Codec::fixed64(9), ::protrust::Codec::fixed64(17), 506);
static TEST_ALL_TYPES_PROTO2_MAP_SFIXED32_SFIXED32_CODEC: ::protrust::collections::MapCodec<i32, i32> = ::protrust::collections::MapCodec::new(::protrust::Codec::sfixed32(13), ::protrust::Codec::sfixed32(21), 514);
static TEST_ALL_TYPES_PROTO2_MAP_SFIXED64_SFIXED64_CODEC: ::protrust::collections::MapCodec<i64, i64> = ::protrust::collections::MapCodec::new(::protrust::Codec::sfixed64(9), ::protrust::Codec::sfixed64(17), 522);
static TEST_ALL_TYPES_PROTO2_MAP_INT32_FLOAT_CODEC: ::protrust::collections::MapCodec<i32, f32> = ::protrust::collections::MapCodec::new(::protrust::Codec::int32(8), ::protrust::Codec::float(21), 530);
static TEST_ALL_TYPES_PROTO2_MAP_INT32_DOUBLE_CODEC: ::protrust::collections::MapCodec<i32, f64> = ::protrust::collections::MapCodec::new(::protrust::Codec::int32(8), ::protrust::Codec::double(17), 538);
static TEST_ALL_TYPES_PROTO2_MAP_BOOL_BOOL_CODEC: ::protrust::collections::MapCodec<bool, bool> = ::protrust::collections::MapCodec::new(::protrust::Codec::bool(8), ::protrust::Codec::bool(16), 546);
static TEST_ALL_TYPES_PROTO2_MAP_STRING_STRING_CODEC: ::protrust::collections::MapCodec<::std::string::String, ::std::string::String> = ::protrust::collections::MapCodec::new(::protrust::Codec::string(10), ::protrust::Codec::string(18), 554);
static TEST_ALL_TYPES_PROTO2_MAP_STRING_BYTES_CODEC: ::protrust::collections::MapCodec<::std::string::String, ::std::vec::Vec<u8>> = ::protrust::collections::MapCodec::new(::protrust::Codec::string(10), ::protrust::Codec::bytes(18), 562);
static TEST_ALL_TYPES_PROTO2_MAP_STRING_NESTED_MESSAGE_CODEC: ::protrust::collections::MapCodec<::std::string::String, self::TestAllTypesProto2_NestedMessage> = ::protrust::collections::MapCodec::new(::protrust::Codec::string(10), ::protrust::Codec::message(18), 570);
static TEST_ALL_TYPES_PROTO2_MAP_STRING_FOREIGN_MESSAGE_CODEC: ::protrust::collections::MapCodec<::std::string::String, self::ForeignMessageProto2> = ::protrust::collections::MapCodec::new(::protrust::Codec::string(10), ::protrust::Codec::message(18), 578);
static TEST_ALL_TYPES_PROTO2_MAP_STRING_NESTED_ENUM_CODEC: ::protrust::collections::MapCodec<::std::string::String, ::protrust::EnumValue<self::TestAllTypesProto2_NestedEnum>> = ::protrust::collections::MapCodec::new(::protrust::Codec::string(10), ::protrust::Codec::enum_value(16), 586);
static TEST_ALL_TYPES_PROTO2_MAP_STRING_FOREIGN_ENUM_CODEC: ::protrust::collections::MapCodec<::std::string::String, ::protrust::EnumValue<self::ForeignEnumProto2>> = ::protrust::collections::MapCodec::new(::protrust::Codec::string(10), ::protrust::Codec::enum_value(16), 594);
#[derive(Clone, Debug, PartialEq)]
pub enum TestAllTypesProto2_OneofField {
    /// No value
    None,
    OneofUint32(u32),
    OneofNestedMessage(::std::boxed::Box<self::TestAllTypesProto2_NestedMessage>),
    OneofString(::std::string::String),
    OneofBytes(::std::vec::Vec<u8>),
    OneofBool(bool),
    OneofUint64(u64),
    OneofFloat(f32),
    OneofDouble(f64),
    OneofEnum(::protrust::EnumValue<self::TestAllTypesProto2_NestedEnum>),
}
impl ::protrust::CodedMessage for self::TestAllTypesProto2 {
    fn merge_from(&mut self, input: &mut ::protrust::io::CodedInput) -> ::protrust::io::InputResult<()> {
        while let ::std::option::Option::Some(tag) = input.read_tag()? {
            match tag.get() {
                8 => self.optional_int32 = ::std::option::Option::Some(input.read_int32()?),
                16 => self.optional_int64 = ::std::option::Option::Some(input.read_int64()?),
                24 => self.optional_uint32 = ::std::option::Option::Some(input.read_uint32()?),
                32 => self.optional_uint64 = ::std::option::Option::Some(input.read_uint64()?),
                40 => self.optional_sint32 = ::std::option::Option::Some(input.read_sint32()?),
                48 => self.optional_sint64 = ::std::option::Option::Some(input.read_sint64()?),
                61 => self.optional_fixed32 = ::std::option::Option::Some(input.read_fixed32()?),
                65 => self.optional_fixed64 = ::std::option::Option::Some(input.read_fixed64()?),
                77 => self.optional_sfixed32 = ::std::option::Option::Some(input.read_sfixed32()?),
                81 => self.optional_sfixed64 = ::std::option::Option::Some(input.read_sfixed64()?),
                93 => self.optional_float = ::std::option::Option::Some(input.read_float()?),
                97 => self.optional_double = ::std::option::Option::Some(input.read_double()?),
                104 => self.optional_bool = ::std::option::Option::Some(input.read_bool()?),
                114 => self.optional_string = ::std::option::Option::Some(input.read_string()?),
                122 => self.optional_bytes = ::std::option::Option::Some(input.read_bytes()?),
                146 => input.read_message(self.optional_nested_message.get_or_insert_with(::protrust::LiteMessage::new))?,
                154 => input.read_message(self.optional_foreign_message.get_or_insert_with(::protrust::LiteMessage::new))?,
                168 => self.optional_nested_enum = ::std::option::Option::Some(input.read_enum_value()?),
                176 => self.optional_foreign_enum = ::std::option::Option::Some(input.read_enum_value()?),
                194 => self.optional_string_piece = ::std::option::Option::Some(input.read_string()?),
                202 => self.optional_cord = ::std::option::Option::Some(input.read_string()?),
                218 => input.read_message(self.recursive_message.get_or_insert_with(::protrust::LiteMessage::new))?,
                248 => self.repeated_int32.add_entries(tag.get(), input, &TEST_ALL_TYPES_PROTO2_REPEATED_INT32_CODEC)?,
                256 => self.repeated_int64.add_entries(tag.get(), input, &TEST_ALL_TYPES_PROTO2_REPEATED_INT64_CODEC)?,
                264 => self.repeated_uint32.add_entries(tag.get(), input, &TEST_ALL_TYPES_PROTO2_REPEATED_UINT32_CODEC)?,
                272 => self.repeated_uint64.add_entries(tag.get(), input, &TEST_ALL_TYPES_PROTO2_REPEATED_UINT64_CODEC)?,
                280 => self.repeated_sint32.add_entries(tag.get(), input, &TEST_ALL_TYPES_PROTO2_REPEATED_SINT32_CODEC)?,
                288 => self.repeated_sint64.add_entries(tag.get(), input, &TEST_ALL_TYPES_PROTO2_REPEATED_SINT64_CODEC)?,
                301 => self.repeated_fixed32.add_entries(tag.get(), input, &TEST_ALL_TYPES_PROTO2_REPEATED_FIXED32_CODEC)?,
                305 => self.repeated_fixed64.add_entries(tag.get(), input, &TEST_ALL_TYPES_PROTO2_REPEATED_FIXED64_CODEC)?,
                317 => self.repeated_sfixed32.add_entries(tag.get(), input, &TEST_ALL_TYPES_PROTO2_REPEATED_SFIXED32_CODEC)?,
                321 => self.repeated_sfixed64.add_entries(tag.get(), input, &TEST_ALL_TYPES_PROTO2_REPEATED_SFIXED64_CODEC)?,
                333 => self.repeated_float.add_entries(tag.get(), input, &TEST_ALL_TYPES_PROTO2_REPEATED_FLOAT_CODEC)?,
                337 => self.repeated_double.add_entries(tag.get(), input, &TEST_ALL_TYPES_PROTO2_REPEATED_DOUBLE_CODEC)?,
                344 => self.repeated_bool.add_entries(tag.get(), input, &TEST_ALL_TYPES_PROTO2_REPEATED_BOOL_CODEC)?,
                354 => self.repeated_string.add_entries(tag.get(), input, &TEST_ALL_TYPES_PROTO2_REPEATED_STRING_CODEC)?,
                362 => self.repeated_bytes.add_entries(tag.get(), input, &TEST_ALL_TYPES_PROTO2_REPEATED_BYTES_CODEC)?,
                386 => self.repeated_nested_message.add_entries(tag.get(), input, &TEST_ALL_TYPES_PROTO2_REPEATED_NESTED_MESSAGE_CODEC)?,
                394 => self.repeated_foreign_message.add_entries(tag.get(), input, &TEST_ALL_TYPES_PROTO2_REPEATED_FOREIGN_MESSAGE_CODEC)?,
                408 => self.repeated_nested_enum.add_entries(tag.get(), input, &TEST_ALL_TYPES_PROTO2_REPEATED_NESTED_ENUM_CODEC)?,
                416 => self.repeated_foreign_enum.add_entries(tag.get(), input, &TEST_ALL_TYPES_PROTO2_REPEATED_FOREIGN_ENUM_CODEC)?,
                434 => self.repeated_string_piece.add_entries(tag.get(), input, &TEST_ALL_TYPES_PROTO2_REPEATED_STRING_PIECE_CODEC)?,
                442 => self.repeated_cord.add_entries(tag.get(), input, &TEST_ALL_TYPES_PROTO2_REPEATED_CORD_CODEC)?,
                450 => self.map_int32_int32.add_entries(input, &TEST_ALL_TYPES_PROTO2_MAP_INT32_INT32_CODEC)?,
                458 => self.map_int64_int64.add_entries(input, &TEST_ALL_TYPES_PROTO2_MAP_INT64_INT64_CODEC)?,
                466 => self.map_uint32_uint32.add_entries(input, &TEST_ALL_TYPES_PROTO2_MAP_UINT32_UINT32_CODEC)?,
                474 => self.map_uint64_uint64.add_entries(input, &TEST_ALL_TYPES_PROTO2_MAP_UINT64_UINT64_CODEC)?,
                482 => self.map_sint32_sint32.add_entries(input, &TEST_ALL_TYPES_PROTO2_MAP_SINT32_SINT32_CODEC)?,
                490 => self.map_sint64_sint64.add_entries(input, &TEST_ALL_TYPES_PROTO2_MAP_SINT64_SINT64_CODEC)?,
                498 => self.map_fixed32_fixed32.add_entries(input, &TEST_ALL_TYPES_PROTO2_MAP_FIXED32_FIXED32_CODEC)?,
                506 => self.map_fixed64_fixed64.add_entries(input, &TEST_ALL_TYPES_PROTO2_MAP_FIXED64_FIXED64_CODEC)?,
                514 => self.map_sfixed32_sfixed32.add_entries(input, &TEST_ALL_TYPES_PROTO2_MAP_SFIXED32_SFIXED32_CODEC)?,
                522 => self.map_sfixed64_sfixed64.add_entries(input, &TEST_ALL_TYPES_PROTO2_MAP_SFIXED64_SFIXED64_CODEC)?,
                530 => self.map_int32_float.add_entries(input, &TEST_ALL_TYPES_PROTO2_MAP_INT32_FLOAT_CODEC)?,
                538 => self.map_int32_double.add_entries(input, &TEST_ALL_TYPES_PROTO2_MAP_INT32_DOUBLE_CODEC)?,
                546 => self.map_bool_bool.add_entries(input, &TEST_ALL_TYPES_PROTO2_MAP_BOOL_BOOL_CODEC)?,
                554 => self.map_string_string.add_entries(input, &TEST_ALL_TYPES_PROTO2_MAP_STRING_STRING_CODEC)?,
                562 => self.map_string_bytes.add_entries(input, &TEST_ALL_TYPES_PROTO2_MAP_STRING_BYTES_CODEC)?,
                570 => self.map_string_nested_message.add_entries(input, &TEST_ALL_TYPES_PROTO2_MAP_STRING_NESTED_MESSAGE_CODEC)?,
                578 => self.map_string_foreign_message.add_entries(input, &TEST_ALL_TYPES_PROTO2_MAP_STRING_FOREIGN_MESSAGE_CODEC)?,
                586 => self.map_string_nested_enum.add_entries(input, &TEST_ALL_TYPES_PROTO2_MAP_STRING_NESTED_ENUM_CODEC)?,
                594 => self.map_string_foreign_enum.add_entries(input, &TEST_ALL_TYPES_PROTO2_MAP_STRING_FOREIGN_ENUM_CODEC)?,
                888 => self.oneof_field = self::TestAllTypesProto2_OneofField::OneofUint32(input.read_uint32()?),
                898 => 
                    if let self::TestAllTypesProto2_OneofField::OneofNestedMessage(oneof_field) = &mut self.oneof_field {
                        oneof_field.merge_from(input)?;
                    } else {
                        let mut oneof_field = ::std::boxed::Box::new(<self::TestAllTypesProto2_NestedMessage as ::protrust::LiteMessage>::new());
                        oneof_field.merge_from(input)?;
                        self.oneof_field = self::TestAllTypesProto2_OneofField::OneofNestedMessage(oneof_field)
                    },
                906 => self.oneof_field = self::TestAllTypesProto2_OneofField::OneofString(input.read_string()?),
                914 => self.oneof_field = self::TestAllTypesProto2_OneofField::OneofBytes(input.read_bytes()?),
                920 => self.oneof_field = self::TestAllTypesProto2_OneofField::OneofBool(input.read_bool()?),
                928 => self.oneof_field = self::TestAllTypesProto2_OneofField::OneofUint64(input.read_uint64()?),
                941 => self.oneof_field = self::TestAllTypesProto2_OneofField::OneofFloat(input.read_float()?),
                945 => self.oneof_field = self::TestAllTypesProto2_OneofField::OneofDouble(input.read_double()?),
                952 => self.oneof_field = self::TestAllTypesProto2_OneofField::OneofEnum(input.read_enum_value()?),
                1611 => input.read_message(self.data.get_or_insert_with(::protrust::LiteMessage::new))?,
                3208 => self.fieldname1 = ::std::option::Option::Some(input.read_int32()?),
                3216 => self.field_name2 = ::std::option::Option::Some(input.read_int32()?),
                3224 => self._field_name3 = ::std::option::Option::Some(input.read_int32()?),
                3232 => self.field__name4_ = ::std::option::Option::Some(input.read_int32()?),
                3240 => self.field0name5 = ::std::option::Option::Some(input.read_int32()?),
                3248 => self.field_0_name6 = ::std::option::Option::Some(input.read_int32()?),
                3256 => self.fieldName7 = ::std::option::Option::Some(input.read_int32()?),
                3264 => self.FieldName8 = ::std::option::Option::Some(input.read_int32()?),
                3272 => self.field_Name9 = ::std::option::Option::Some(input.read_int32()?),
                3280 => self.Field_Name10 = ::std::option::Option::Some(input.read_int32()?),
                3288 => self.FIELD_NAME11 = ::std::option::Option::Some(input.read_int32()?),
                3296 => self.FIELD_name12 = ::std::option::Option::Some(input.read_int32()?),
                3304 => self.__field_name13 = ::std::option::Option::Some(input.read_int32()?),
                3312 => self.__Field_name14 = ::std::option::Option::Some(input.read_int32()?),
                3320 => self.field__name15 = ::std::option::Option::Some(input.read_int32()?),
                3328 => self.field__Name16 = ::std::option::Option::Some(input.read_int32()?),
                3336 => self.field_name17__ = ::std::option::Option::Some(input.read_int32()?),
                3344 => self.Field_name18__ = ::std::option::Option::Some(input.read_int32()?),
                tag => self.unknown_fields.merge_from(tag, input)?
            }
        }
        ::std::result::Result::Ok(())
    }
    fn calculate_size(&self) -> i32 {
        let mut size = 0i32;
        let optional_int32 = self.optional_int32;
        if let ::std::option::Option::Some(optional_int32) = optional_int32 {
            if optional_int32 != Self::OPTIONAL_INT32_DEFAULT_VALUE {
                size += 1;
                size += ::protrust::io::sizes::int32(optional_int32);
            }
        }
        let optional_int64 = self.optional_int64;
        if let ::std::option::Option::Some(optional_int64) = optional_int64 {
            if optional_int64 != Self::OPTIONAL_INT64_DEFAULT_VALUE {
                size += 1;
                size += ::protrust::io::sizes::int64(optional_int64);
            }
        }
        let optional_uint32 = self.optional_uint32;
        if let ::std::option::Option::Some(optional_uint32) = optional_uint32 {
            if optional_uint32 != Self::OPTIONAL_UINT32_DEFAULT_VALUE {
                size += 1;
                size += ::protrust::io::sizes::uint32(optional_uint32);
            }
        }
        let optional_uint64 = self.optional_uint64;
        if let ::std::option::Option::Some(optional_uint64) = optional_uint64 {
            if optional_uint64 != Self::OPTIONAL_UINT64_DEFAULT_VALUE {
                size += 1;
                size += ::protrust::io::sizes::uint64(optional_uint64);
            }
        }
        let optional_sint32 = self.optional_sint32;
        if let ::std::option::Option::Some(optional_sint32) = optional_sint32 {
            if optional_sint32 != Self::OPTIONAL_SINT32_DEFAULT_VALUE {
                size += 1;
                size += ::protrust::io::sizes::sint32(optional_sint32);
            }
        }
        let optional_sint64 = self.optional_sint64;
        if let ::std::option::Option::Some(optional_sint64) = optional_sint64 {
            if optional_sint64 != Self::OPTIONAL_SINT64_DEFAULT_VALUE {
                size += 1;
                size += ::protrust::io::sizes::sint64(optional_sint64);
            }
        }
        let optional_fixed32 = self.optional_fixed32;
        if let ::std::option::Option::Some(optional_fixed32) = optional_fixed32 {
            if optional_fixed32 != Self::OPTIONAL_FIXED32_DEFAULT_VALUE {
                size += 1;
                size += ::protrust::io::sizes::fixed32(optional_fixed32);
            }
        }
        let optional_fixed64 = self.optional_fixed64;
        if let ::std::option::Option::Some(optional_fixed64) = optional_fixed64 {
            if optional_fixed64 != Self::OPTIONAL_FIXED64_DEFAULT_VALUE {
                size += 1;
                size += ::protrust::io::sizes::fixed64(optional_fixed64);
            }
        }
        let optional_sfixed32 = self.optional_sfixed32;
        if let ::std::option::Option::Some(optional_sfixed32) = optional_sfixed32 {
            if optional_sfixed32 != Self::OPTIONAL_SFIXED32_DEFAULT_VALUE {
                size += 1;
                size += ::protrust::io::sizes::sfixed32(optional_sfixed32);
            }
        }
        let optional_sfixed64 = self.optional_sfixed64;
        if let ::std::option::Option::Some(optional_sfixed64) = optional_sfixed64 {
            if optional_sfixed64 != Self::OPTIONAL_SFIXED64_DEFAULT_VALUE {
                size += 1;
                size += ::protrust::io::sizes::sfixed64(optional_sfixed64);
            }
        }
        let optional_float = self.optional_float;
        if let ::std::option::Option::Some(optional_float) = optional_float {
            if optional_float != Self::OPTIONAL_FLOAT_DEFAULT_VALUE {
                size += 1;
                size += ::protrust::io::sizes::float(optional_float);
            }
        }
        let optional_double = self.optional_double;
        if let ::std::option::Option::Some(optional_double) = optional_double {
            if optional_double != Self::OPTIONAL_DOUBLE_DEFAULT_VALUE {
                size += 1;
                size += ::protrust::io::sizes::double(optional_double);
            }
        }
        let optional_bool = self.optional_bool;
        if let ::std::option::Option::Some(optional_bool) = optional_bool {
            if optional_bool != Self::OPTIONAL_BOOL_DEFAULT_VALUE {
                size += 1;
                size += ::protrust::io::sizes::bool(optional_bool);
            }
        }
        let optional_string = &self.optional_string;
        if let ::std::option::Option::Some(optional_string) = optional_string {
            if optional_string != Self::OPTIONAL_STRING_DEFAULT_VALUE {
                size += 1;
                size += ::protrust::io::sizes::string(optional_string);
            }
        }
        let optional_bytes = &self.optional_bytes;
        if let ::std::option::Option::Some(optional_bytes) = optional_bytes {
            if optional_bytes.as_slice() != Self::OPTIONAL_BYTES_DEFAULT_VALUE {
                size += 1;
                size += ::protrust::io::sizes::bytes(optional_bytes);
            }
        }
        let optional_nested_message = &self.optional_nested_message;
        if let ::std::option::Option::Some(optional_nested_message) = optional_nested_message {
            size += 2;
            size += ::protrust::io::sizes::message(optional_nested_message);
        }
        let optional_foreign_message = &self.optional_foreign_message;
        if let ::std::option::Option::Some(optional_foreign_message) = optional_foreign_message {
            size += 2;
            size += ::protrust::io::sizes::message(optional_foreign_message);
        }
        let optional_nested_enum = self.optional_nested_enum;
        if let ::std::option::Option::Some(optional_nested_enum) = optional_nested_enum {
            if optional_nested_enum != Self::OPTIONAL_NESTED_ENUM_DEFAULT_VALUE {
                size += 2;
                size += ::protrust::io::sizes::enum_value(optional_nested_enum);
            }
        }
        let optional_foreign_enum = self.optional_foreign_enum;
        if let ::std::option::Option::Some(optional_foreign_enum) = optional_foreign_enum {
            if optional_foreign_enum != Self::OPTIONAL_FOREIGN_ENUM_DEFAULT_VALUE {
                size += 2;
                size += ::protrust::io::sizes::enum_value(optional_foreign_enum);
            }
        }
        let optional_string_piece = &self.optional_string_piece;
        if let ::std::option::Option::Some(optional_string_piece) = optional_string_piece {
            if optional_string_piece != Self::OPTIONAL_STRING_PIECE_DEFAULT_VALUE {
                size += 2;
                size += ::protrust::io::sizes::string(optional_string_piece);
            }
        }
        let optional_cord = &self.optional_cord;
        if let ::std::option::Option::Some(optional_cord) = optional_cord {
            if optional_cord != Self::OPTIONAL_CORD_DEFAULT_VALUE {
                size += 2;
                size += ::protrust::io::sizes::string(optional_cord);
            }
        }
        let recursive_message = &self.recursive_message;
        if let ::std::option::Option::Some(recursive_message) = recursive_message {
            size += 2;
            size += ::protrust::io::sizes::message(recursive_message);
        }
        size += self.repeated_int32.calculate_size(&TEST_ALL_TYPES_PROTO2_REPEATED_INT32_CODEC);
        size += self.repeated_int64.calculate_size(&TEST_ALL_TYPES_PROTO2_REPEATED_INT64_CODEC);
        size += self.repeated_uint32.calculate_size(&TEST_ALL_TYPES_PROTO2_REPEATED_UINT32_CODEC);
        size += self.repeated_uint64.calculate_size(&TEST_ALL_TYPES_PROTO2_REPEATED_UINT64_CODEC);
        size += self.repeated_sint32.calculate_size(&TEST_ALL_TYPES_PROTO2_REPEATED_SINT32_CODEC);
        size += self.repeated_sint64.calculate_size(&TEST_ALL_TYPES_PROTO2_REPEATED_SINT64_CODEC);
        size += self.repeated_fixed32.calculate_size(&TEST_ALL_TYPES_PROTO2_REPEATED_FIXED32_CODEC);
        size += self.repeated_fixed64.calculate_size(&TEST_ALL_TYPES_PROTO2_REPEATED_FIXED64_CODEC);
        size += self.repeated_sfixed32.calculate_size(&TEST_ALL_TYPES_PROTO2_REPEATED_SFIXED32_CODEC);
        size += self.repeated_sfixed64.calculate_size(&TEST_ALL_TYPES_PROTO2_REPEATED_SFIXED64_CODEC);
        size += self.repeated_float.calculate_size(&TEST_ALL_TYPES_PROTO2_REPEATED_FLOAT_CODEC);
        size += self.repeated_double.calculate_size(&TEST_ALL_TYPES_PROTO2_REPEATED_DOUBLE_CODEC);
        size += self.repeated_bool.calculate_size(&TEST_ALL_TYPES_PROTO2_REPEATED_BOOL_CODEC);
        size += self.repeated_string.calculate_size(&TEST_ALL_TYPES_PROTO2_REPEATED_STRING_CODEC);
        size += self.repeated_bytes.calculate_size(&TEST_ALL_TYPES_PROTO2_REPEATED_BYTES_CODEC);
        size += self.repeated_nested_message.calculate_size(&TEST_ALL_TYPES_PROTO2_REPEATED_NESTED_MESSAGE_CODEC);
        size += self.repeated_foreign_message.calculate_size(&TEST_ALL_TYPES_PROTO2_REPEATED_FOREIGN_MESSAGE_CODEC);
        size += self.repeated_nested_enum.calculate_size(&TEST_ALL_TYPES_PROTO2_REPEATED_NESTED_ENUM_CODEC);
        size += self.repeated_foreign_enum.calculate_size(&TEST_ALL_TYPES_PROTO2_REPEATED_FOREIGN_ENUM_CODEC);
        size += self.repeated_string_piece.calculate_size(&TEST_ALL_TYPES_PROTO2_REPEATED_STRING_PIECE_CODEC);
        size += self.repeated_cord.calculate_size(&TEST_ALL_TYPES_PROTO2_REPEATED_CORD_CODEC);
        size += self.map_int32_int32.calculate_size(&TEST_ALL_TYPES_PROTO2_MAP_INT32_INT32_CODEC);
        size += self.map_int64_int64.calculate_size(&TEST_ALL_TYPES_PROTO2_MAP_INT64_INT64_CODEC);
        size += self.map_uint32_uint32.calculate_size(&TEST_ALL_TYPES_PROTO2_MAP_UINT32_UINT32_CODEC);
        size += self.map_uint64_uint64.calculate_size(&TEST_ALL_TYPES_PROTO2_MAP_UINT64_UINT64_CODEC);
        size += self.map_sint32_sint32.calculate_size(&TEST_ALL_TYPES_PROTO2_MAP_SINT32_SINT32_CODEC);
        size += self.map_sint64_sint64.calculate_size(&TEST_ALL_TYPES_PROTO2_MAP_SINT64_SINT64_CODEC);
        size += self.map_fixed32_fixed32.calculate_size(&TEST_ALL_TYPES_PROTO2_MAP_FIXED32_FIXED32_CODEC);
        size += self.map_fixed64_fixed64.calculate_size(&TEST_ALL_TYPES_PROTO2_MAP_FIXED64_FIXED64_CODEC);
        size += self.map_sfixed32_sfixed32.calculate_size(&TEST_ALL_TYPES_PROTO2_MAP_SFIXED32_SFIXED32_CODEC);
        size += self.map_sfixed64_sfixed64.calculate_size(&TEST_ALL_TYPES_PROTO2_MAP_SFIXED64_SFIXED64_CODEC);
        size += self.map_int32_float.calculate_size(&TEST_ALL_TYPES_PROTO2_MAP_INT32_FLOAT_CODEC);
        size += self.map_int32_double.calculate_size(&TEST_ALL_TYPES_PROTO2_MAP_INT32_DOUBLE_CODEC);
        size += self.map_bool_bool.calculate_size(&TEST_ALL_TYPES_PROTO2_MAP_BOOL_BOOL_CODEC);
        size += self.map_string_string.calculate_size(&TEST_ALL_TYPES_PROTO2_MAP_STRING_STRING_CODEC);
        size += self.map_string_bytes.calculate_size(&TEST_ALL_TYPES_PROTO2_MAP_STRING_BYTES_CODEC);
        size += self.map_string_nested_message.calculate_size(&TEST_ALL_TYPES_PROTO2_MAP_STRING_NESTED_MESSAGE_CODEC);
        size += self.map_string_foreign_message.calculate_size(&TEST_ALL_TYPES_PROTO2_MAP_STRING_FOREIGN_MESSAGE_CODEC);
        size += self.map_string_nested_enum.calculate_size(&TEST_ALL_TYPES_PROTO2_MAP_STRING_NESTED_ENUM_CODEC);
        size += self.map_string_foreign_enum.calculate_size(&TEST_ALL_TYPES_PROTO2_MAP_STRING_FOREIGN_ENUM_CODEC);
        if let self::TestAllTypesProto2_OneofField::OneofUint32(oneof_field) = self.oneof_field {
            size += 2;
            size += ::protrust::io::sizes::uint32(oneof_field);
        }
        if let self::TestAllTypesProto2_OneofField::OneofNestedMessage(oneof_field) = &self.oneof_field {
            size += 2;
            size += ::protrust::io::sizes::message(oneof_field);
        }
        if let self::TestAllTypesProto2_OneofField::OneofString(oneof_field) = &self.oneof_field {
            size += 2;
            size += ::protrust::io::sizes::string(oneof_field);
        }
        if let self::TestAllTypesProto2_OneofField::OneofBytes(oneof_field) = &self.oneof_field {
            size += 2;
            size += ::protrust::io::sizes::bytes(oneof_field);
        }
        if let self::TestAllTypesProto2_OneofField::OneofBool(oneof_field) = self.oneof_field {
            size += 2;
            size += ::protrust::io::sizes::bool(oneof_field);
        }
        if let self::TestAllTypesProto2_OneofField::OneofUint64(oneof_field) = self.oneof_field {
            size += 2;
            size += ::protrust::io::sizes::uint64(oneof_field);
        }
        if let self::TestAllTypesProto2_OneofField::OneofFloat(oneof_field) = self.oneof_field {
            size += 2;
            size += ::protrust::io::sizes::float(oneof_field);
        }
        if let self::TestAllTypesProto2_OneofField::OneofDouble(oneof_field) = self.oneof_field {
            size += 2;
            size += ::protrust::io::sizes::double(oneof_field);
        }
        if let self::TestAllTypesProto2_OneofField::OneofEnum(oneof_field) = self.oneof_field {
            size += 2;
            size += ::protrust::io::sizes::enum_value(oneof_field);
        }
        let data = &self.data;
        if let ::std::option::Option::Some(data) = data {
            size += 2;
            size += ::protrust::io::sizes::group(data);
        }
        let fieldname1 = self.fieldname1;
        if let ::std::option::Option::Some(fieldname1) = fieldname1 {
            if fieldname1 != Self::FIELDNAME1_DEFAULT_VALUE {
                size += 2;
                size += ::protrust::io::sizes::int32(fieldname1);
            }
        }
        let field_name2 = self.field_name2;
        if let ::std::option::Option::Some(field_name2) = field_name2 {
            if field_name2 != Self::FIELD_NAME2_DEFAULT_VALUE {
                size += 2;
                size += ::protrust::io::sizes::int32(field_name2);
            }
        }
        let _field_name3 = self._field_name3;
        if let ::std::option::Option::Some(_field_name3) = _field_name3 {
            if _field_name3 != Self::_FIELD_NAME3_DEFAULT_VALUE {
                size += 2;
                size += ::protrust::io::sizes::int32(_field_name3);
            }
        }
        let field__name4_ = self.field__name4_;
        if let ::std::option::Option::Some(field__name4_) = field__name4_ {
            if field__name4_ != Self::FIELD__NAME4__DEFAULT_VALUE {
                size += 2;
                size += ::protrust::io::sizes::int32(field__name4_);
            }
        }
        let field0name5 = self.field0name5;
        if let ::std::option::Option::Some(field0name5) = field0name5 {
            if field0name5 != Self::FIELD0NAME5_DEFAULT_VALUE {
                size += 2;
                size += ::protrust::io::sizes::int32(field0name5);
            }
        }
        let field_0_name6 = self.field_0_name6;
        if let ::std::option::Option::Some(field_0_name6) = field_0_name6 {
            if field_0_name6 != Self::FIELD_0_NAME6_DEFAULT_VALUE {
                size += 2;
                size += ::protrust::io::sizes::int32(field_0_name6);
            }
        }
        let fieldName7 = self.fieldName7;
        if let ::std::option::Option::Some(fieldName7) = fieldName7 {
            if fieldName7 != Self::FIELDNAME7_DEFAULT_VALUE {
                size += 2;
                size += ::protrust::io::sizes::int32(fieldName7);
            }
        }
        let FieldName8 = self.FieldName8;
        if let ::std::option::Option::Some(FieldName8) = FieldName8 {
            if FieldName8 != Self::FIELDNAME8_DEFAULT_VALUE {
                size += 2;
                size += ::protrust::io::sizes::int32(FieldName8);
            }
        }
        let field_Name9 = self.field_Name9;
        if let ::std::option::Option::Some(field_Name9) = field_Name9 {
            if field_Name9 != Self::FIELD_NAME9_DEFAULT_VALUE {
                size += 2;
                size += ::protrust::io::sizes::int32(field_Name9);
            }
        }
        let Field_Name10 = self.Field_Name10;
        if let ::std::option::Option::Some(Field_Name10) = Field_Name10 {
            if Field_Name10 != Self::FIELD_NAME10_DEFAULT_VALUE {
                size += 2;
                size += ::protrust::io::sizes::int32(Field_Name10);
            }
        }
        let FIELD_NAME11 = self.FIELD_NAME11;
        if let ::std::option::Option::Some(FIELD_NAME11) = FIELD_NAME11 {
            if FIELD_NAME11 != Self::FIELD_NAME11_DEFAULT_VALUE {
                size += 2;
                size += ::protrust::io::sizes::int32(FIELD_NAME11);
            }
        }
        let FIELD_name12 = self.FIELD_name12;
        if let ::std::option::Option::Some(FIELD_name12) = FIELD_name12 {
            if FIELD_name12 != Self::FIELD_NAME12_DEFAULT_VALUE {
                size += 2;
                size += ::protrust::io::sizes::int32(FIELD_name12);
            }
        }
        let __field_name13 = self.__field_name13;
        if let ::std::option::Option::Some(__field_name13) = __field_name13 {
            if __field_name13 != Self::__FIELD_NAME13_DEFAULT_VALUE {
                size += 2;
                size += ::protrust::io::sizes::int32(__field_name13);
            }
        }
        let __Field_name14 = self.__Field_name14;
        if let ::std::option::Option::Some(__Field_name14) = __Field_name14 {
            if __Field_name14 != Self::__FIELD_NAME14_DEFAULT_VALUE {
                size += 2;
                size += ::protrust::io::sizes::int32(__Field_name14);
            }
        }
        let field__name15 = self.field__name15;
        if let ::std::option::Option::Some(field__name15) = field__name15 {
            if field__name15 != Self::FIELD__NAME15_DEFAULT_VALUE {
                size += 2;
                size += ::protrust::io::sizes::int32(field__name15);
            }
        }
        let field__Name16 = self.field__Name16;
        if let ::std::option::Option::Some(field__Name16) = field__Name16 {
            if field__Name16 != Self::FIELD__NAME16_DEFAULT_VALUE {
                size += 2;
                size += ::protrust::io::sizes::int32(field__Name16);
            }
        }
        let field_name17__ = self.field_name17__;
        if let ::std::option::Option::Some(field_name17__) = field_name17__ {
            if field_name17__ != Self::FIELD_NAME17___DEFAULT_VALUE {
                size += 2;
                size += ::protrust::io::sizes::int32(field_name17__);
            }
        }
        let Field_name18__ = self.Field_name18__;
        if let ::std::option::Option::Some(Field_name18__) = Field_name18__ {
            if Field_name18__ != Self::FIELD_NAME18___DEFAULT_VALUE {
                size += 2;
                size += ::protrust::io::sizes::int32(Field_name18__);
            }
        }
        size += self.unknown_fields.calculate_size();
        size
    }
    fn write_to(&self, output: &mut ::protrust::io::CodedOutput) -> ::protrust::io::OutputResult {
        let optional_int32 = self.optional_int32;
        if let ::std::option::Option::Some(optional_int32) = optional_int32 {
            if optional_int32 != Self::OPTIONAL_INT32_DEFAULT_VALUE {
                output.write_raw_tag_bytes(&[8])?;
                output.write_int32(optional_int32)?;
            }
        }
        let optional_int64 = self.optional_int64;
        if let ::std::option::Option::Some(optional_int64) = optional_int64 {
            if optional_int64 != Self::OPTIONAL_INT64_DEFAULT_VALUE {
                output.write_raw_tag_bytes(&[16])?;
                output.write_int64(optional_int64)?;
            }
        }
        let optional_uint32 = self.optional_uint32;
        if let ::std::option::Option::Some(optional_uint32) = optional_uint32 {
            if optional_uint32 != Self::OPTIONAL_UINT32_DEFAULT_VALUE {
                output.write_raw_tag_bytes(&[24])?;
                output.write_uint32(optional_uint32)?;
            }
        }
        let optional_uint64 = self.optional_uint64;
        if let ::std::option::Option::Some(optional_uint64) = optional_uint64 {
            if optional_uint64 != Self::OPTIONAL_UINT64_DEFAULT_VALUE {
                output.write_raw_tag_bytes(&[32])?;
                output.write_uint64(optional_uint64)?;
            }
        }
        let optional_sint32 = self.optional_sint32;
        if let ::std::option::Option::Some(optional_sint32) = optional_sint32 {
            if optional_sint32 != Self::OPTIONAL_SINT32_DEFAULT_VALUE {
                output.write_raw_tag_bytes(&[40])?;
                output.write_sint32(optional_sint32)?;
            }
        }
        let optional_sint64 = self.optional_sint64;
        if let ::std::option::Option::Some(optional_sint64) = optional_sint64 {
            if optional_sint64 != Self::OPTIONAL_SINT64_DEFAULT_VALUE {
                output.write_raw_tag_bytes(&[48])?;
                output.write_sint64(optional_sint64)?;
            }
        }
        let optional_fixed32 = self.optional_fixed32;
        if let ::std::option::Option::Some(optional_fixed32) = optional_fixed32 {
            if optional_fixed32 != Self::OPTIONAL_FIXED32_DEFAULT_VALUE {
                output.write_raw_tag_bytes(&[61])?;
                output.write_fixed32(optional_fixed32)?;
            }
        }
        let optional_fixed64 = self.optional_fixed64;
        if let ::std::option::Option::Some(optional_fixed64) = optional_fixed64 {
            if optional_fixed64 != Self::OPTIONAL_FIXED64_DEFAULT_VALUE {
                output.write_raw_tag_bytes(&[65])?;
                output.write_fixed64(optional_fixed64)?;
            }
        }
        let optional_sfixed32 = self.optional_sfixed32;
        if let ::std::option::Option::Some(optional_sfixed32) = optional_sfixed32 {
            if optional_sfixed32 != Self::OPTIONAL_SFIXED32_DEFAULT_VALUE {
                output.write_raw_tag_bytes(&[77])?;
                output.write_sfixed32(optional_sfixed32)?;
            }
        }
        let optional_sfixed64 = self.optional_sfixed64;
        if let ::std::option::Option::Some(optional_sfixed64) = optional_sfixed64 {
            if optional_sfixed64 != Self::OPTIONAL_SFIXED64_DEFAULT_VALUE {
                output.write_raw_tag_bytes(&[81])?;
                output.write_sfixed64(optional_sfixed64)?;
            }
        }
        let optional_float = self.optional_float;
        if let ::std::option::Option::Some(optional_float) = optional_float {
            if optional_float != Self::OPTIONAL_FLOAT_DEFAULT_VALUE {
                output.write_raw_tag_bytes(&[93])?;
                output.write_float(optional_float)?;
            }
        }
        let optional_double = self.optional_double;
        if let ::std::option::Option::Some(optional_double) = optional_double {
            if optional_double != Self::OPTIONAL_DOUBLE_DEFAULT_VALUE {
                output.write_raw_tag_bytes(&[97])?;
                output.write_double(optional_double)?;
            }
        }
        let optional_bool = self.optional_bool;
        if let ::std::option::Option::Some(optional_bool) = optional_bool {
            if optional_bool != Self::OPTIONAL_BOOL_DEFAULT_VALUE {
                output.write_raw_tag_bytes(&[104])?;
                output.write_bool(optional_bool)?;
            }
        }
        let optional_string = &self.optional_string;
        if let ::std::option::Option::Some(optional_string) = optional_string {
            if optional_string != Self::OPTIONAL_STRING_DEFAULT_VALUE {
                output.write_raw_tag_bytes(&[114])?;
                output.write_string(optional_string)?;
            }
        }
        let optional_bytes = &self.optional_bytes;
        if let ::std::option::Option::Some(optional_bytes) = optional_bytes {
            if optional_bytes.as_slice() != Self::OPTIONAL_BYTES_DEFAULT_VALUE {
                output.write_raw_tag_bytes(&[122])?;
                output.write_bytes(optional_bytes)?;
            }
        }
        let optional_nested_message = &self.optional_nested_message;
        if let ::std::option::Option::Some(optional_nested_message) = optional_nested_message {
            output.write_raw_tag_bytes(&[146, 1])?;
            output.write_message(optional_nested_message)?;
        }
        let optional_foreign_message = &self.optional_foreign_message;
        if let ::std::option::Option::Some(optional_foreign_message) = optional_foreign_message {
            output.write_raw_tag_bytes(&[154, 1])?;
            output.write_message(optional_foreign_message)?;
        }
        let optional_nested_enum = self.optional_nested_enum;
        if let ::std::option::Option::Some(optional_nested_enum) = optional_nested_enum {
            if optional_nested_enum != Self::OPTIONAL_NESTED_ENUM_DEFAULT_VALUE {
                output.write_raw_tag_bytes(&[168, 1])?;
                output.write_enum_value(optional_nested_enum)?;
            }
        }
        let optional_foreign_enum = self.optional_foreign_enum;
        if let ::std::option::Option::Some(optional_foreign_enum) = optional_foreign_enum {
            if optional_foreign_enum != Self::OPTIONAL_FOREIGN_ENUM_DEFAULT_VALUE {
                output.write_raw_tag_bytes(&[176, 1])?;
                output.write_enum_value(optional_foreign_enum)?;
            }
        }
        let optional_string_piece = &self.optional_string_piece;
        if let ::std::option::Option::Some(optional_string_piece) = optional_string_piece {
            if optional_string_piece != Self::OPTIONAL_STRING_PIECE_DEFAULT_VALUE {
                output.write_raw_tag_bytes(&[194, 1])?;
                output.write_string(optional_string_piece)?;
            }
        }
        let optional_cord = &self.optional_cord;
        if let ::std::option::Option::Some(optional_cord) = optional_cord {
            if optional_cord != Self::OPTIONAL_CORD_DEFAULT_VALUE {
                output.write_raw_tag_bytes(&[202, 1])?;
                output.write_string(optional_cord)?;
            }
        }
        let recursive_message = &self.recursive_message;
        if let ::std::option::Option::Some(recursive_message) = recursive_message {
            output.write_raw_tag_bytes(&[218, 1])?;
            output.write_message(recursive_message)?;
        }
        self.repeated_int32.write_to(output, &TEST_ALL_TYPES_PROTO2_REPEATED_INT32_CODEC)?;
        self.repeated_int64.write_to(output, &TEST_ALL_TYPES_PROTO2_REPEATED_INT64_CODEC)?;
        self.repeated_uint32.write_to(output, &TEST_ALL_TYPES_PROTO2_REPEATED_UINT32_CODEC)?;
        self.repeated_uint64.write_to(output, &TEST_ALL_TYPES_PROTO2_REPEATED_UINT64_CODEC)?;
        self.repeated_sint32.write_to(output, &TEST_ALL_TYPES_PROTO2_REPEATED_SINT32_CODEC)?;
        self.repeated_sint64.write_to(output, &TEST_ALL_TYPES_PROTO2_REPEATED_SINT64_CODEC)?;
        self.repeated_fixed32.write_to(output, &TEST_ALL_TYPES_PROTO2_REPEATED_FIXED32_CODEC)?;
        self.repeated_fixed64.write_to(output, &TEST_ALL_TYPES_PROTO2_REPEATED_FIXED64_CODEC)?;
        self.repeated_sfixed32.write_to(output, &TEST_ALL_TYPES_PROTO2_REPEATED_SFIXED32_CODEC)?;
        self.repeated_sfixed64.write_to(output, &TEST_ALL_TYPES_PROTO2_REPEATED_SFIXED64_CODEC)?;
        self.repeated_float.write_to(output, &TEST_ALL_TYPES_PROTO2_REPEATED_FLOAT_CODEC)?;
        self.repeated_double.write_to(output, &TEST_ALL_TYPES_PROTO2_REPEATED_DOUBLE_CODEC)?;
        self.repeated_bool.write_to(output, &TEST_ALL_TYPES_PROTO2_REPEATED_BOOL_CODEC)?;
        self.repeated_string.write_to(output, &TEST_ALL_TYPES_PROTO2_REPEATED_STRING_CODEC)?;
        self.repeated_bytes.write_to(output, &TEST_ALL_TYPES_PROTO2_REPEATED_BYTES_CODEC)?;
        self.repeated_nested_message.write_to(output, &TEST_ALL_TYPES_PROTO2_REPEATED_NESTED_MESSAGE_CODEC)?;
        self.repeated_foreign_message.write_to(output, &TEST_ALL_TYPES_PROTO2_REPEATED_FOREIGN_MESSAGE_CODEC)?;
        self.repeated_nested_enum.write_to(output, &TEST_ALL_TYPES_PROTO2_REPEATED_NESTED_ENUM_CODEC)?;
        self.repeated_foreign_enum.write_to(output, &TEST_ALL_TYPES_PROTO2_REPEATED_FOREIGN_ENUM_CODEC)?;
        self.repeated_string_piece.write_to(output, &TEST_ALL_TYPES_PROTO2_REPEATED_STRING_PIECE_CODEC)?;
        self.repeated_cord.write_to(output, &TEST_ALL_TYPES_PROTO2_REPEATED_CORD_CODEC)?;
        self.map_int32_int32.write_to(output, &TEST_ALL_TYPES_PROTO2_MAP_INT32_INT32_CODEC)?;
        self.map_int64_int64.write_to(output, &TEST_ALL_TYPES_PROTO2_MAP_INT64_INT64_CODEC)?;
        self.map_uint32_uint32.write_to(output, &TEST_ALL_TYPES_PROTO2_MAP_UINT32_UINT32_CODEC)?;
        self.map_uint64_uint64.write_to(output, &TEST_ALL_TYPES_PROTO2_MAP_UINT64_UINT64_CODEC)?;
        self.map_sint32_sint32.write_to(output, &TEST_ALL_TYPES_PROTO2_MAP_SINT32_SINT32_CODEC)?;
        self.map_sint64_sint64.write_to(output, &TEST_ALL_TYPES_PROTO2_MAP_SINT64_SINT64_CODEC)?;
        self.map_fixed32_fixed32.write_to(output, &TEST_ALL_TYPES_PROTO2_MAP_FIXED32_FIXED32_CODEC)?;
        self.map_fixed64_fixed64.write_to(output, &TEST_ALL_TYPES_PROTO2_MAP_FIXED64_FIXED64_CODEC)?;
        self.map_sfixed32_sfixed32.write_to(output, &TEST_ALL_TYPES_PROTO2_MAP_SFIXED32_SFIXED32_CODEC)?;
        self.map_sfixed64_sfixed64.write_to(output, &TEST_ALL_TYPES_PROTO2_MAP_SFIXED64_SFIXED64_CODEC)?;
        self.map_int32_float.write_to(output, &TEST_ALL_TYPES_PROTO2_MAP_INT32_FLOAT_CODEC)?;
        self.map_int32_double.write_to(output, &TEST_ALL_TYPES_PROTO2_MAP_INT32_DOUBLE_CODEC)?;
        self.map_bool_bool.write_to(output, &TEST_ALL_TYPES_PROTO2_MAP_BOOL_BOOL_CODEC)?;
        self.map_string_string.write_to(output, &TEST_ALL_TYPES_PROTO2_MAP_STRING_STRING_CODEC)?;
        self.map_string_bytes.write_to(output, &TEST_ALL_TYPES_PROTO2_MAP_STRING_BYTES_CODEC)?;
        self.map_string_nested_message.write_to(output, &TEST_ALL_TYPES_PROTO2_MAP_STRING_NESTED_MESSAGE_CODEC)?;
        self.map_string_foreign_message.write_to(output, &TEST_ALL_TYPES_PROTO2_MAP_STRING_FOREIGN_MESSAGE_CODEC)?;
        self.map_string_nested_enum.write_to(output, &TEST_ALL_TYPES_PROTO2_MAP_STRING_NESTED_ENUM_CODEC)?;
        self.map_string_foreign_enum.write_to(output, &TEST_ALL_TYPES_PROTO2_MAP_STRING_FOREIGN_ENUM_CODEC)?;
        if let self::TestAllTypesProto2_OneofField::OneofUint32(oneof_field) = self.oneof_field {
            output.write_raw_tag_bytes(&[248, 6])?;
            output.write_uint32(oneof_field)?;
        }
        if let self::TestAllTypesProto2_OneofField::OneofNestedMessage(oneof_field) = &self.oneof_field {
            output.write_raw_tag_bytes(&[130, 7])?;
            output.write_message(oneof_field)?;
        }
        if let self::TestAllTypesProto2_OneofField::OneofString(oneof_field) = &self.oneof_field {
            output.write_raw_tag_bytes(&[138, 7])?;
            output.write_string(oneof_field)?;
        }
        if let self::TestAllTypesProto2_OneofField::OneofBytes(oneof_field) = &self.oneof_field {
            output.write_raw_tag_bytes(&[146, 7])?;
            output.write_bytes(oneof_field)?;
        }
        if let self::TestAllTypesProto2_OneofField::OneofBool(oneof_field) = self.oneof_field {
            output.write_raw_tag_bytes(&[152, 7])?;
            output.write_bool(oneof_field)?;
        }
        if let self::TestAllTypesProto2_OneofField::OneofUint64(oneof_field) = self.oneof_field {
            output.write_raw_tag_bytes(&[160, 7])?;
            output.write_uint64(oneof_field)?;
        }
        if let self::TestAllTypesProto2_OneofField::OneofFloat(oneof_field) = self.oneof_field {
            output.write_raw_tag_bytes(&[173, 7])?;
            output.write_float(oneof_field)?;
        }
        if let self::TestAllTypesProto2_OneofField::OneofDouble(oneof_field) = self.oneof_field {
            output.write_raw_tag_bytes(&[177, 7])?;
            output.write_double(oneof_field)?;
        }
        if let self::TestAllTypesProto2_OneofField::OneofEnum(oneof_field) = self.oneof_field {
            output.write_raw_tag_bytes(&[184, 7])?;
            output.write_enum_value(oneof_field)?;
        }
        let data = &self.data;
        if let ::std::option::Option::Some(data) = data {
            output.write_raw_tag_bytes(&[203, 12])?;
            output.write_group(data)?;
            output.write_raw_tag_bytes(&[204, 12])?;
        }
        let fieldname1 = self.fieldname1;
        if let ::std::option::Option::Some(fieldname1) = fieldname1 {
            if fieldname1 != Self::FIELDNAME1_DEFAULT_VALUE {
                output.write_raw_tag_bytes(&[136, 25])?;
                output.write_int32(fieldname1)?;
            }
        }
        let field_name2 = self.field_name2;
        if let ::std::option::Option::Some(field_name2) = field_name2 {
            if field_name2 != Self::FIELD_NAME2_DEFAULT_VALUE {
                output.write_raw_tag_bytes(&[144, 25])?;
                output.write_int32(field_name2)?;
            }
        }
        let _field_name3 = self._field_name3;
        if let ::std::option::Option::Some(_field_name3) = _field_name3 {
            if _field_name3 != Self::_FIELD_NAME3_DEFAULT_VALUE {
                output.write_raw_tag_bytes(&[152, 25])?;
                output.write_int32(_field_name3)?;
            }
        }
        let field__name4_ = self.field__name4_;
        if let ::std::option::Option::Some(field__name4_) = field__name4_ {
            if field__name4_ != Self::FIELD__NAME4__DEFAULT_VALUE {
                output.write_raw_tag_bytes(&[160, 25])?;
                output.write_int32(field__name4_)?;
            }
        }
        let field0name5 = self.field0name5;
        if let ::std::option::Option::Some(field0name5) = field0name5 {
            if field0name5 != Self::FIELD0NAME5_DEFAULT_VALUE {
                output.write_raw_tag_bytes(&[168, 25])?;
                output.write_int32(field0name5)?;
            }
        }
        let field_0_name6 = self.field_0_name6;
        if let ::std::option::Option::Some(field_0_name6) = field_0_name6 {
            if field_0_name6 != Self::FIELD_0_NAME6_DEFAULT_VALUE {
                output.write_raw_tag_bytes(&[176, 25])?;
                output.write_int32(field_0_name6)?;
            }
        }
        let fieldName7 = self.fieldName7;
        if let ::std::option::Option::Some(fieldName7) = fieldName7 {
            if fieldName7 != Self::FIELDNAME7_DEFAULT_VALUE {
                output.write_raw_tag_bytes(&[184, 25])?;
                output.write_int32(fieldName7)?;
            }
        }
        let FieldName8 = self.FieldName8;
        if let ::std::option::Option::Some(FieldName8) = FieldName8 {
            if FieldName8 != Self::FIELDNAME8_DEFAULT_VALUE {
                output.write_raw_tag_bytes(&[192, 25])?;
                output.write_int32(FieldName8)?;
            }
        }
        let field_Name9 = self.field_Name9;
        if let ::std::option::Option::Some(field_Name9) = field_Name9 {
            if field_Name9 != Self::FIELD_NAME9_DEFAULT_VALUE {
                output.write_raw_tag_bytes(&[200, 25])?;
                output.write_int32(field_Name9)?;
            }
        }
        let Field_Name10 = self.Field_Name10;
        if let ::std::option::Option::Some(Field_Name10) = Field_Name10 {
            if Field_Name10 != Self::FIELD_NAME10_DEFAULT_VALUE {
                output.write_raw_tag_bytes(&[208, 25])?;
                output.write_int32(Field_Name10)?;
            }
        }
        let FIELD_NAME11 = self.FIELD_NAME11;
        if let ::std::option::Option::Some(FIELD_NAME11) = FIELD_NAME11 {
            if FIELD_NAME11 != Self::FIELD_NAME11_DEFAULT_VALUE {
                output.write_raw_tag_bytes(&[216, 25])?;
                output.write_int32(FIELD_NAME11)?;
            }
        }
        let FIELD_name12 = self.FIELD_name12;
        if let ::std::option::Option::Some(FIELD_name12) = FIELD_name12 {
            if FIELD_name12 != Self::FIELD_NAME12_DEFAULT_VALUE {
                output.write_raw_tag_bytes(&[224, 25])?;
                output.write_int32(FIELD_name12)?;
            }
        }
        let __field_name13 = self.__field_name13;
        if let ::std::option::Option::Some(__field_name13) = __field_name13 {
            if __field_name13 != Self::__FIELD_NAME13_DEFAULT_VALUE {
                output.write_raw_tag_bytes(&[232, 25])?;
                output.write_int32(__field_name13)?;
            }
        }
        let __Field_name14 = self.__Field_name14;
        if let ::std::option::Option::Some(__Field_name14) = __Field_name14 {
            if __Field_name14 != Self::__FIELD_NAME14_DEFAULT_VALUE {
                output.write_raw_tag_bytes(&[240, 25])?;
                output.write_int32(__Field_name14)?;
            }
        }
        let field__name15 = self.field__name15;
        if let ::std::option::Option::Some(field__name15) = field__name15 {
            if field__name15 != Self::FIELD__NAME15_DEFAULT_VALUE {
                output.write_raw_tag_bytes(&[248, 25])?;
                output.write_int32(field__name15)?;
            }
        }
        let field__Name16 = self.field__Name16;
        if let ::std::option::Option::Some(field__Name16) = field__Name16 {
            if field__Name16 != Self::FIELD__NAME16_DEFAULT_VALUE {
                output.write_raw_tag_bytes(&[128, 26])?;
                output.write_int32(field__Name16)?;
            }
        }
        let field_name17__ = self.field_name17__;
        if let ::std::option::Option::Some(field_name17__) = field_name17__ {
            if field_name17__ != Self::FIELD_NAME17___DEFAULT_VALUE {
                output.write_raw_tag_bytes(&[136, 26])?;
                output.write_int32(field_name17__)?;
            }
        }
        let Field_name18__ = self.Field_name18__;
        if let ::std::option::Option::Some(Field_name18__) = Field_name18__ {
            if Field_name18__ != Self::FIELD_NAME18___DEFAULT_VALUE {
                output.write_raw_tag_bytes(&[144, 26])?;
                output.write_int32(Field_name18__)?;
            }
        }
        self.unknown_fields.write_to(output)?;
        ::std::result::Result::Ok(())
    }
}
impl ::protrust::LiteMessage for self::TestAllTypesProto2 {
    fn new() -> Self {
        Self {
            optional_int32: ::std::option::Option::None,
            optional_int64: ::std::option::Option::None,
            optional_uint32: ::std::option::Option::None,
            optional_uint64: ::std::option::Option::None,
            optional_sint32: ::std::option::Option::None,
            optional_sint64: ::std::option::Option::None,
            optional_fixed32: ::std::option::Option::None,
            optional_fixed64: ::std::option::Option::None,
            optional_sfixed32: ::std::option::Option::None,
            optional_sfixed64: ::std::option::Option::None,
            optional_float: ::std::option::Option::None,
            optional_double: ::std::option::Option::None,
            optional_bool: ::std::option::Option::None,
            optional_string: ::std::option::Option::None,
            optional_bytes: ::std::option::Option::None,
            optional_nested_message: ::std::option::Option::None,
            optional_foreign_message: ::std::option::Option::None,
            optional_nested_enum: ::std::option::Option::None,
            optional_foreign_enum: ::std::option::Option::None,
            optional_string_piece: ::std::option::Option::None,
            optional_cord: ::std::option::Option::None,
            recursive_message: ::std::option::Option::None,
            repeated_int32: ::protrust::collections::RepeatedField::new(),
            repeated_int64: ::protrust::collections::RepeatedField::new(),
            repeated_uint32: ::protrust::collections::RepeatedField::new(),
            repeated_uint64: ::protrust::collections::RepeatedField::new(),
            repeated_sint32: ::protrust::collections::RepeatedField::new(),
            repeated_sint64: ::protrust::collections::RepeatedField::new(),
            repeated_fixed32: ::protrust::collections::RepeatedField::new(),
            repeated_fixed64: ::protrust::collections::RepeatedField::new(),
            repeated_sfixed32: ::protrust::collections::RepeatedField::new(),
            repeated_sfixed64: ::protrust::collections::RepeatedField::new(),
            repeated_float: ::protrust::collections::RepeatedField::new(),
            repeated_double: ::protrust::collections::RepeatedField::new(),
            repeated_bool: ::protrust::collections::RepeatedField::new(),
            repeated_string: ::protrust::collections::RepeatedField::new(),
            repeated_bytes: ::protrust::collections::RepeatedField::new(),
            repeated_nested_message: ::protrust::collections::RepeatedField::new(),
            repeated_foreign_message: ::protrust::collections::RepeatedField::new(),
            repeated_nested_enum: ::protrust::collections::RepeatedField::new(),
            repeated_foreign_enum: ::protrust::collections::RepeatedField::new(),
            repeated_string_piece: ::protrust::collections::RepeatedField::new(),
            repeated_cord: ::protrust::collections::RepeatedField::new(),
            map_int32_int32: ::protrust::collections::MapField::new(),
            map_int64_int64: ::protrust::collections::MapField::new(),
            map_uint32_uint32: ::protrust::collections::MapField::new(),
            map_uint64_uint64: ::protrust::collections::MapField::new(),
            map_sint32_sint32: ::protrust::collections::MapField::new(),
            map_sint64_sint64: ::protrust::collections::MapField::new(),
            map_fixed32_fixed32: ::protrust::collections::MapField::new(),
            map_fixed64_fixed64: ::protrust::collections::MapField::new(),
            map_sfixed32_sfixed32: ::protrust::collections::MapField::new(),
            map_sfixed64_sfixed64: ::protrust::collections::MapField::new(),
            map_int32_float: ::protrust::collections::MapField::new(),
            map_int32_double: ::protrust::collections::MapField::new(),
            map_bool_bool: ::protrust::collections::MapField::new(),
            map_string_string: ::protrust::collections::MapField::new(),
            map_string_bytes: ::protrust::collections::MapField::new(),
            map_string_nested_message: ::protrust::collections::MapField::new(),
            map_string_foreign_message: ::protrust::collections::MapField::new(),
            map_string_nested_enum: ::protrust::collections::MapField::new(),
            map_string_foreign_enum: ::protrust::collections::MapField::new(),
            data: ::std::option::Option::None,
            fieldname1: ::std::option::Option::None,
            field_name2: ::std::option::Option::None,
            _field_name3: ::std::option::Option::None,
            field__name4_: ::std::option::Option::None,
            field0name5: ::std::option::Option::None,
            field_0_name6: ::std::option::Option::None,
            fieldName7: ::std::option::Option::None,
            FieldName8: ::std::option::Option::None,
            field_Name9: ::std::option::Option::None,
            Field_Name10: ::std::option::Option::None,
            FIELD_NAME11: ::std::option::Option::None,
            FIELD_name12: ::std::option::Option::None,
            __field_name13: ::std::option::Option::None,
            __Field_name14: ::std::option::Option::None,
            field__name15: ::std::option::Option::None,
            field__Name16: ::std::option::Option::None,
            field_name17__: ::std::option::Option::None,
            Field_name18__: ::std::option::Option::None,
            oneof_field: self::TestAllTypesProto2_OneofField::None,
            unknown_fields: ::protrust::UnknownFieldSet::new()
        }
    }
    fn merge(&mut self, other: &Self) {
        self.optional_int32 = other.optional_int32;
        self.optional_int64 = other.optional_int64;
        self.optional_uint32 = other.optional_uint32;
        self.optional_uint64 = other.optional_uint64;
        self.optional_sint32 = other.optional_sint32;
        self.optional_sint64 = other.optional_sint64;
        self.optional_fixed32 = other.optional_fixed32;
        self.optional_fixed64 = other.optional_fixed64;
        self.optional_sfixed32 = other.optional_sfixed32;
        self.optional_sfixed64 = other.optional_sfixed64;
        self.optional_float = other.optional_float;
        self.optional_double = other.optional_double;
        self.optional_bool = other.optional_bool;
        self.optional_string = other.optional_string.clone();
        self.optional_bytes = other.optional_bytes.clone();
        if let ::std::option::Option::Some(optional_nested_message) = &other.optional_nested_message {
            self.optional_nested_message.get_or_insert_with(::protrust::LiteMessage::new).merge(optional_nested_message);
        }
        if let ::std::option::Option::Some(optional_foreign_message) = &other.optional_foreign_message {
            self.optional_foreign_message.get_or_insert_with(::protrust::LiteMessage::new).merge(optional_foreign_message);
        }
        self.optional_nested_enum = other.optional_nested_enum;
        self.optional_foreign_enum = other.optional_foreign_enum;
        self.optional_string_piece = other.optional_string_piece.clone();
        self.optional_cord = other.optional_cord.clone();
        if let ::std::option::Option::Some(recursive_message) = &other.recursive_message {
            self.recursive_message.get_or_insert_with(::protrust::LiteMessage::new).merge(recursive_message);
        }
        self.repeated_int32.merge(&other.repeated_int32);
        self.repeated_int64.merge(&other.repeated_int64);
        self.repeated_uint32.merge(&other.repeated_uint32);
        self.repeated_uint64.merge(&other.repeated_uint64);
        self.repeated_sint32.merge(&other.repeated_sint32);
        self.repeated_sint64.merge(&other.repeated_sint64);
        self.repeated_fixed32.merge(&other.repeated_fixed32);
        self.repeated_fixed64.merge(&other.repeated_fixed64);
        self.repeated_sfixed32.merge(&other.repeated_sfixed32);
        self.repeated_sfixed64.merge(&other.repeated_sfixed64);
        self.repeated_float.merge(&other.repeated_float);
        self.repeated_double.merge(&other.repeated_double);
        self.repeated_bool.merge(&other.repeated_bool);
        self.repeated_string.merge(&other.repeated_string);
        self.repeated_bytes.merge(&other.repeated_bytes);
        self.repeated_nested_message.merge(&other.repeated_nested_message);
        self.repeated_foreign_message.merge(&other.repeated_foreign_message);
        self.repeated_nested_enum.merge(&other.repeated_nested_enum);
        self.repeated_foreign_enum.merge(&other.repeated_foreign_enum);
        self.repeated_string_piece.merge(&other.repeated_string_piece);
        self.repeated_cord.merge(&other.repeated_cord);
        self.map_int32_int32.merge(&other.map_int32_int32);
        self.map_int64_int64.merge(&other.map_int64_int64);
        self.map_uint32_uint32.merge(&other.map_uint32_uint32);
        self.map_uint64_uint64.merge(&other.map_uint64_uint64);
        self.map_sint32_sint32.merge(&other.map_sint32_sint32);
        self.map_sint64_sint64.merge(&other.map_sint64_sint64);
        self.map_fixed32_fixed32.merge(&other.map_fixed32_fixed32);
        self.map_fixed64_fixed64.merge(&other.map_fixed64_fixed64);
        self.map_sfixed32_sfixed32.merge(&other.map_sfixed32_sfixed32);
        self.map_sfixed64_sfixed64.merge(&other.map_sfixed64_sfixed64);
        self.map_int32_float.merge(&other.map_int32_float);
        self.map_int32_double.merge(&other.map_int32_double);
        self.map_bool_bool.merge(&other.map_bool_bool);
        self.map_string_string.merge(&other.map_string_string);
        self.map_string_bytes.merge(&other.map_string_bytes);
        self.map_string_nested_message.merge(&other.map_string_nested_message);
        self.map_string_foreign_message.merge(&other.map_string_foreign_message);
        self.map_string_nested_enum.merge(&other.map_string_nested_enum);
        self.map_string_foreign_enum.merge(&other.map_string_foreign_enum);
        if let self::TestAllTypesProto2_OneofField::OneofUint32(oneof_field) = other.oneof_field {
            self.oneof_field = self::TestAllTypesProto2_OneofField::OneofUint32(oneof_field);
        }
        if let self::TestAllTypesProto2_OneofField::OneofNestedMessage(oneof_field) = &other.oneof_field {
            if let self::TestAllTypesProto2_OneofField::OneofNestedMessage(existing) = &mut self.oneof_field {
                existing.merge(oneof_field);
            } else {
                self.oneof_field = self::TestAllTypesProto2_OneofField::OneofNestedMessage(oneof_field.clone());
            }
        }
        if let self::TestAllTypesProto2_OneofField::OneofString(oneof_field) = &other.oneof_field {
            self.oneof_field = self::TestAllTypesProto2_OneofField::OneofString(oneof_field.clone());
        }
        if let self::TestAllTypesProto2_OneofField::OneofBytes(oneof_field) = &other.oneof_field {
            self.oneof_field = self::TestAllTypesProto2_OneofField::OneofBytes(oneof_field.clone());
        }
        if let self::TestAllTypesProto2_OneofField::OneofBool(oneof_field) = other.oneof_field {
            self.oneof_field = self::TestAllTypesProto2_OneofField::OneofBool(oneof_field);
        }
        if let self::TestAllTypesProto2_OneofField::OneofUint64(oneof_field) = other.oneof_field {
            self.oneof_field = self::TestAllTypesProto2_OneofField::OneofUint64(oneof_field);
        }
        if let self::TestAllTypesProto2_OneofField::OneofFloat(oneof_field) = other.oneof_field {
            self.oneof_field = self::TestAllTypesProto2_OneofField::OneofFloat(oneof_field);
        }
        if let self::TestAllTypesProto2_OneofField::OneofDouble(oneof_field) = other.oneof_field {
            self.oneof_field = self::TestAllTypesProto2_OneofField::OneofDouble(oneof_field);
        }
        if let self::TestAllTypesProto2_OneofField::OneofEnum(oneof_field) = other.oneof_field {
            self.oneof_field = self::TestAllTypesProto2_OneofField::OneofEnum(oneof_field);
        }
        if let ::std::option::Option::Some(data) = &other.data {
            self.data.get_or_insert_with(::protrust::LiteMessage::new).merge(data);
        }
        self.fieldname1 = other.fieldname1;
        self.field_name2 = other.field_name2;
        self._field_name3 = other._field_name3;
        self.field__name4_ = other.field__name4_;
        self.field0name5 = other.field0name5;
        self.field_0_name6 = other.field_0_name6;
        self.fieldName7 = other.fieldName7;
        self.FieldName8 = other.FieldName8;
        self.field_Name9 = other.field_Name9;
        self.Field_Name10 = other.Field_Name10;
        self.FIELD_NAME11 = other.FIELD_NAME11;
        self.FIELD_name12 = other.FIELD_name12;
        self.__field_name13 = other.__field_name13;
        self.__Field_name14 = other.__Field_name14;
        self.field__name15 = other.field__name15;
        self.field__Name16 = other.field__Name16;
        self.field_name17__ = other.field_name17__;
        self.Field_name18__ = other.Field_name18__;
        self.unknown_fields.merge(&other.unknown_fields);
    }
}
impl ::protrust::Message for self::TestAllTypesProto2 {
    fn descriptor() -> &'static ::protrust::reflect::MessageDescriptor {
        &self::file().messages()[0]
    }
}
impl self::TestAllTypesProto2 {
    /// Gets the field number of the [`optional_int32`] field
    ///
    /// [`optional_int32`]: #method.optional_int32
    pub const OPTIONAL_INT32_FIELD_NUMBER: i32 = 1;
    /// A constant value representing the default value of the [`optional_int32`] field
    ///
    /// [`optional_int32`]: #method.optional_int32
    pub const OPTIONAL_INT32_DEFAULT_VALUE: i32 = 0;
    /// Singular
    pub fn optional_int32(&self) -> i32 {
        self.optional_int32.unwrap_or(Self::OPTIONAL_INT32_DEFAULT_VALUE)
    }
    /// Returns an [`Option`] representing the presence of the [`optional_int32`] field
    ///
    /// [`optional_int32`]: #method.optional_int32
    /// [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html
    pub fn optional_int32_option(&self) -> ::std::option::Option<i32> {
        self.optional_int32
    }
    /// Returns a bool indicating the presence of the [`optional_int32`] field
    ///
    /// [`optional_int32`]: #method.optional_int32
    pub fn has_optional_int32(&self) -> bool {
        self.optional_int32.is_some()
    }
    /// Sets the value of the [`optional_int32`] field
    ///
    /// [`optional_int32`]: #method.optional_int32
    pub fn set_optional_int32(&mut self, value: i32) {
        self.optional_int32 = ::std::option::Option::Some(value)
    }
    /// Clears the value of the [`optional_int32`] field
    ///
    /// [`optional_int32`]: #method.optional_int32
    pub fn clear_optional_int32(&mut self) {
        self.optional_int32 = ::std::option::Option::None
    }
    /// Gets the field number of the [`optional_int64`] field
    ///
    /// [`optional_int64`]: #method.optional_int64
    pub const OPTIONAL_INT64_FIELD_NUMBER: i32 = 2;
    /// A constant value representing the default value of the [`optional_int64`] field
    ///
    /// [`optional_int64`]: #method.optional_int64
    pub const OPTIONAL_INT64_DEFAULT_VALUE: i64 = 0;
    pub fn optional_int64(&self) -> i64 {
        self.optional_int64.unwrap_or(Self::OPTIONAL_INT64_DEFAULT_VALUE)
    }
    /// Returns an [`Option`] representing the presence of the [`optional_int64`] field
    ///
    /// [`optional_int64`]: #method.optional_int64
    /// [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html
    pub fn optional_int64_option(&self) -> ::std::option::Option<i64> {
        self.optional_int64
    }
    /// Returns a bool indicating the presence of the [`optional_int64`] field
    ///
    /// [`optional_int64`]: #method.optional_int64
    pub fn has_optional_int64(&self) -> bool {
        self.optional_int64.is_some()
    }
    /// Sets the value of the [`optional_int64`] field
    ///
    /// [`optional_int64`]: #method.optional_int64
    pub fn set_optional_int64(&mut self, value: i64) {
        self.optional_int64 = ::std::option::Option::Some(value)
    }
    /// Clears the value of the [`optional_int64`] field
    ///
    /// [`optional_int64`]: #method.optional_int64
    pub fn clear_optional_int64(&mut self) {
        self.optional_int64 = ::std::option::Option::None
    }
    /// Gets the field number of the [`optional_uint32`] field
    ///
    /// [`optional_uint32`]: #method.optional_uint32
    pub const OPTIONAL_UINT32_FIELD_NUMBER: i32 = 3;
    /// A constant value representing the default value of the [`optional_uint32`] field
    ///
    /// [`optional_uint32`]: #method.optional_uint32
    pub const OPTIONAL_UINT32_DEFAULT_VALUE: u32 = 0;
    pub fn optional_uint32(&self) -> u32 {
        self.optional_uint32.unwrap_or(Self::OPTIONAL_UINT32_DEFAULT_VALUE)
    }
    /// Returns an [`Option`] representing the presence of the [`optional_uint32`] field
    ///
    /// [`optional_uint32`]: #method.optional_uint32
    /// [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html
    pub fn optional_uint32_option(&self) -> ::std::option::Option<u32> {
        self.optional_uint32
    }
    /// Returns a bool indicating the presence of the [`optional_uint32`] field
    ///
    /// [`optional_uint32`]: #method.optional_uint32
    pub fn has_optional_uint32(&self) -> bool {
        self.optional_uint32.is_some()
    }
    /// Sets the value of the [`optional_uint32`] field
    ///
    /// [`optional_uint32`]: #method.optional_uint32
    pub fn set_optional_uint32(&mut self, value: u32) {
        self.optional_uint32 = ::std::option::Option::Some(value)
    }
    /// Clears the value of the [`optional_uint32`] field
    ///
    /// [`optional_uint32`]: #method.optional_uint32
    pub fn clear_optional_uint32(&mut self) {
        self.optional_uint32 = ::std::option::Option::None
    }
    /// Gets the field number of the [`optional_uint64`] field
    ///
    /// [`optional_uint64`]: #method.optional_uint64
    pub const OPTIONAL_UINT64_FIELD_NUMBER: i32 = 4;
    /// A constant value representing the default value of the [`optional_uint64`] field
    ///
    /// [`optional_uint64`]: #method.optional_uint64
    pub const OPTIONAL_UINT64_DEFAULT_VALUE: u64 = 0;
    pub fn optional_uint64(&self) -> u64 {
        self.optional_uint64.unwrap_or(Self::OPTIONAL_UINT64_DEFAULT_VALUE)
    }
    /// Returns an [`Option`] representing the presence of the [`optional_uint64`] field
    ///
    /// [`optional_uint64`]: #method.optional_uint64
    /// [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html
    pub fn optional_uint64_option(&self) -> ::std::option::Option<u64> {
        self.optional_uint64
    }
    /// Returns a bool indicating the presence of the [`optional_uint64`] field
    ///
    /// [`optional_uint64`]: #method.optional_uint64
    pub fn has_optional_uint64(&self) -> bool {
        self.optional_uint64.is_some()
    }
    /// Sets the value of the [`optional_uint64`] field
    ///
    /// [`optional_uint64`]: #method.optional_uint64
    pub fn set_optional_uint64(&mut self, value: u64) {
        self.optional_uint64 = ::std::option::Option::Some(value)
    }
    /// Clears the value of the [`optional_uint64`] field
    ///
    /// [`optional_uint64`]: #method.optional_uint64
    pub fn clear_optional_uint64(&mut self) {
        self.optional_uint64 = ::std::option::Option::None
    }
    /// Gets the field number of the [`optional_sint32`] field
    ///
    /// [`optional_sint32`]: #method.optional_sint32
    pub const OPTIONAL_SINT32_FIELD_NUMBER: i32 = 5;
    /// A constant value representing the default value of the [`optional_sint32`] field
    ///
    /// [`optional_sint32`]: #method.optional_sint32
    pub const OPTIONAL_SINT32_DEFAULT_VALUE: i32 = 0;
    pub fn optional_sint32(&self) -> i32 {
        self.optional_sint32.unwrap_or(Self::OPTIONAL_SINT32_DEFAULT_VALUE)
    }
    /// Returns an [`Option`] representing the presence of the [`optional_sint32`] field
    ///
    /// [`optional_sint32`]: #method.optional_sint32
    /// [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html
    pub fn optional_sint32_option(&self) -> ::std::option::Option<i32> {
        self.optional_sint32
    }
    /// Returns a bool indicating the presence of the [`optional_sint32`] field
    ///
    /// [`optional_sint32`]: #method.optional_sint32
    pub fn has_optional_sint32(&self) -> bool {
        self.optional_sint32.is_some()
    }
    /// Sets the value of the [`optional_sint32`] field
    ///
    /// [`optional_sint32`]: #method.optional_sint32
    pub fn set_optional_sint32(&mut self, value: i32) {
        self.optional_sint32 = ::std::option::Option::Some(value)
    }
    /// Clears the value of the [`optional_sint32`] field
    ///
    /// [`optional_sint32`]: #method.optional_sint32
    pub fn clear_optional_sint32(&mut self) {
        self.optional_sint32 = ::std::option::Option::None
    }
    /// Gets the field number of the [`optional_sint64`] field
    ///
    /// [`optional_sint64`]: #method.optional_sint64
    pub const OPTIONAL_SINT64_FIELD_NUMBER: i32 = 6;
    /// A constant value representing the default value of the [`optional_sint64`] field
    ///
    /// [`optional_sint64`]: #method.optional_sint64
    pub const OPTIONAL_SINT64_DEFAULT_VALUE: i64 = 0;
    pub fn optional_sint64(&self) -> i64 {
        self.optional_sint64.unwrap_or(Self::OPTIONAL_SINT64_DEFAULT_VALUE)
    }
    /// Returns an [`Option`] representing the presence of the [`optional_sint64`] field
    ///
    /// [`optional_sint64`]: #method.optional_sint64
    /// [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html
    pub fn optional_sint64_option(&self) -> ::std::option::Option<i64> {
        self.optional_sint64
    }
    /// Returns a bool indicating the presence of the [`optional_sint64`] field
    ///
    /// [`optional_sint64`]: #method.optional_sint64
    pub fn has_optional_sint64(&self) -> bool {
        self.optional_sint64.is_some()
    }
    /// Sets the value of the [`optional_sint64`] field
    ///
    /// [`optional_sint64`]: #method.optional_sint64
    pub fn set_optional_sint64(&mut self, value: i64) {
        self.optional_sint64 = ::std::option::Option::Some(value)
    }
    /// Clears the value of the [`optional_sint64`] field
    ///
    /// [`optional_sint64`]: #method.optional_sint64
    pub fn clear_optional_sint64(&mut self) {
        self.optional_sint64 = ::std::option::Option::None
    }
    /// Gets the field number of the [`optional_fixed32`] field
    ///
    /// [`optional_fixed32`]: #method.optional_fixed32
    pub const OPTIONAL_FIXED32_FIELD_NUMBER: i32 = 7;
    /// A constant value representing the default value of the [`optional_fixed32`] field
    ///
    /// [`optional_fixed32`]: #method.optional_fixed32
    pub const OPTIONAL_FIXED32_DEFAULT_VALUE: u32 = 0;
    pub fn optional_fixed32(&self) -> u32 {
        self.optional_fixed32.unwrap_or(Self::OPTIONAL_FIXED32_DEFAULT_VALUE)
    }
    /// Returns an [`Option`] representing the presence of the [`optional_fixed32`] field
    ///
    /// [`optional_fixed32`]: #method.optional_fixed32
    /// [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html
    pub fn optional_fixed32_option(&self) -> ::std::option::Option<u32> {
        self.optional_fixed32
    }
    /// Returns a bool indicating the presence of the [`optional_fixed32`] field
    ///
    /// [`optional_fixed32`]: #method.optional_fixed32
    pub fn has_optional_fixed32(&self) -> bool {
        self.optional_fixed32.is_some()
    }
    /// Sets the value of the [`optional_fixed32`] field
    ///
    /// [`optional_fixed32`]: #method.optional_fixed32
    pub fn set_optional_fixed32(&mut self, value: u32) {
        self.optional_fixed32 = ::std::option::Option::Some(value)
    }
    /// Clears the value of the [`optional_fixed32`] field
    ///
    /// [`optional_fixed32`]: #method.optional_fixed32
    pub fn clear_optional_fixed32(&mut self) {
        self.optional_fixed32 = ::std::option::Option::None
    }
    /// Gets the field number of the [`optional_fixed64`] field
    ///
    /// [`optional_fixed64`]: #method.optional_fixed64
    pub const OPTIONAL_FIXED64_FIELD_NUMBER: i32 = 8;
    /// A constant value representing the default value of the [`optional_fixed64`] field
    ///
    /// [`optional_fixed64`]: #method.optional_fixed64
    pub const OPTIONAL_FIXED64_DEFAULT_VALUE: u64 = 0;
    pub fn optional_fixed64(&self) -> u64 {
        self.optional_fixed64.unwrap_or(Self::OPTIONAL_FIXED64_DEFAULT_VALUE)
    }
    /// Returns an [`Option`] representing the presence of the [`optional_fixed64`] field
    ///
    /// [`optional_fixed64`]: #method.optional_fixed64
    /// [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html
    pub fn optional_fixed64_option(&self) -> ::std::option::Option<u64> {
        self.optional_fixed64
    }
    /// Returns a bool indicating the presence of the [`optional_fixed64`] field
    ///
    /// [`optional_fixed64`]: #method.optional_fixed64
    pub fn has_optional_fixed64(&self) -> bool {
        self.optional_fixed64.is_some()
    }
    /// Sets the value of the [`optional_fixed64`] field
    ///
    /// [`optional_fixed64`]: #method.optional_fixed64
    pub fn set_optional_fixed64(&mut self, value: u64) {
        self.optional_fixed64 = ::std::option::Option::Some(value)
    }
    /// Clears the value of the [`optional_fixed64`] field
    ///
    /// [`optional_fixed64`]: #method.optional_fixed64
    pub fn clear_optional_fixed64(&mut self) {
        self.optional_fixed64 = ::std::option::Option::None
    }
    /// Gets the field number of the [`optional_sfixed32`] field
    ///
    /// [`optional_sfixed32`]: #method.optional_sfixed32
    pub const OPTIONAL_SFIXED32_FIELD_NUMBER: i32 = 9;
    /// A constant value representing the default value of the [`optional_sfixed32`] field
    ///
    /// [`optional_sfixed32`]: #method.optional_sfixed32
    pub const OPTIONAL_SFIXED32_DEFAULT_VALUE: i32 = 0;
    pub fn optional_sfixed32(&self) -> i32 {
        self.optional_sfixed32.unwrap_or(Self::OPTIONAL_SFIXED32_DEFAULT_VALUE)
    }
    /// Returns an [`Option`] representing the presence of the [`optional_sfixed32`] field
    ///
    /// [`optional_sfixed32`]: #method.optional_sfixed32
    /// [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html
    pub fn optional_sfixed32_option(&self) -> ::std::option::Option<i32> {
        self.optional_sfixed32
    }
    /// Returns a bool indicating the presence of the [`optional_sfixed32`] field
    ///
    /// [`optional_sfixed32`]: #method.optional_sfixed32
    pub fn has_optional_sfixed32(&self) -> bool {
        self.optional_sfixed32.is_some()
    }
    /// Sets the value of the [`optional_sfixed32`] field
    ///
    /// [`optional_sfixed32`]: #method.optional_sfixed32
    pub fn set_optional_sfixed32(&mut self, value: i32) {
        self.optional_sfixed32 = ::std::option::Option::Some(value)
    }
    /// Clears the value of the [`optional_sfixed32`] field
    ///
    /// [`optional_sfixed32`]: #method.optional_sfixed32
    pub fn clear_optional_sfixed32(&mut self) {
        self.optional_sfixed32 = ::std::option::Option::None
    }
    /// Gets the field number of the [`optional_sfixed64`] field
    ///
    /// [`optional_sfixed64`]: #method.optional_sfixed64
    pub const OPTIONAL_SFIXED64_FIELD_NUMBER: i32 = 10;
    /// A constant value representing the default value of the [`optional_sfixed64`] field
    ///
    /// [`optional_sfixed64`]: #method.optional_sfixed64
    pub const OPTIONAL_SFIXED64_DEFAULT_VALUE: i64 = 0;
    pub fn optional_sfixed64(&self) -> i64 {
        self.optional_sfixed64.unwrap_or(Self::OPTIONAL_SFIXED64_DEFAULT_VALUE)
    }
    /// Returns an [`Option`] representing the presence of the [`optional_sfixed64`] field
    ///
    /// [`optional_sfixed64`]: #method.optional_sfixed64
    /// [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html
    pub fn optional_sfixed64_option(&self) -> ::std::option::Option<i64> {
        self.optional_sfixed64
    }
    /// Returns a bool indicating the presence of the [`optional_sfixed64`] field
    ///
    /// [`optional_sfixed64`]: #method.optional_sfixed64
    pub fn has_optional_sfixed64(&self) -> bool {
        self.optional_sfixed64.is_some()
    }
    /// Sets the value of the [`optional_sfixed64`] field
    ///
    /// [`optional_sfixed64`]: #method.optional_sfixed64
    pub fn set_optional_sfixed64(&mut self, value: i64) {
        self.optional_sfixed64 = ::std::option::Option::Some(value)
    }
    /// Clears the value of the [`optional_sfixed64`] field
    ///
    /// [`optional_sfixed64`]: #method.optional_sfixed64
    pub fn clear_optional_sfixed64(&mut self) {
        self.optional_sfixed64 = ::std::option::Option::None
    }
    /// Gets the field number of the [`optional_float`] field
    ///
    /// [`optional_float`]: #method.optional_float
    pub const OPTIONAL_FLOAT_FIELD_NUMBER: i32 = 11;
    /// A constant value representing the default value of the [`optional_float`] field
    ///
    /// [`optional_float`]: #method.optional_float
    pub const OPTIONAL_FLOAT_DEFAULT_VALUE: f32 = 0.0;
    pub fn optional_float(&self) -> f32 {
        self.optional_float.unwrap_or(Self::OPTIONAL_FLOAT_DEFAULT_VALUE)
    }
    /// Returns an [`Option`] representing the presence of the [`optional_float`] field
    ///
    /// [`optional_float`]: #method.optional_float
    /// [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html
    pub fn optional_float_option(&self) -> ::std::option::Option<f32> {
        self.optional_float
    }
    /// Returns a bool indicating the presence of the [`optional_float`] field
    ///
    /// [`optional_float`]: #method.optional_float
    pub fn has_optional_float(&self) -> bool {
        self.optional_float.is_some()
    }
    /// Sets the value of the [`optional_float`] field
    ///
    /// [`optional_float`]: #method.optional_float
    pub fn set_optional_float(&mut self, value: f32) {
        self.optional_float = ::std::option::Option::Some(value)
    }
    /// Clears the value of the [`optional_float`] field
    ///
    /// [`optional_float`]: #method.optional_float
    pub fn clear_optional_float(&mut self) {
        self.optional_float = ::std::option::Option::None
    }
    /// Gets the field number of the [`optional_double`] field
    ///
    /// [`optional_double`]: #method.optional_double
    pub const OPTIONAL_DOUBLE_FIELD_NUMBER: i32 = 12;
    /// A constant value representing the default value of the [`optional_double`] field
    ///
    /// [`optional_double`]: #method.optional_double
    pub const OPTIONAL_DOUBLE_DEFAULT_VALUE: f64 = 0.0;
    pub fn optional_double(&self) -> f64 {
        self.optional_double.unwrap_or(Self::OPTIONAL_DOUBLE_DEFAULT_VALUE)
    }
    /// Returns an [`Option`] representing the presence of the [`optional_double`] field
    ///
    /// [`optional_double`]: #method.optional_double
    /// [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html
    pub fn optional_double_option(&self) -> ::std::option::Option<f64> {
        self.optional_double
    }
    /// Returns a bool indicating the presence of the [`optional_double`] field
    ///
    /// [`optional_double`]: #method.optional_double
    pub fn has_optional_double(&self) -> bool {
        self.optional_double.is_some()
    }
    /// Sets the value of the [`optional_double`] field
    ///
    /// [`optional_double`]: #method.optional_double
    pub fn set_optional_double(&mut self, value: f64) {
        self.optional_double = ::std::option::Option::Some(value)
    }
    /// Clears the value of the [`optional_double`] field
    ///
    /// [`optional_double`]: #method.optional_double
    pub fn clear_optional_double(&mut self) {
        self.optional_double = ::std::option::Option::None
    }
    /// Gets the field number of the [`optional_bool`] field
    ///
    /// [`optional_bool`]: #method.optional_bool
    pub const OPTIONAL_BOOL_FIELD_NUMBER: i32 = 13;
    /// A constant value representing the default value of the [`optional_bool`] field
    ///
    /// [`optional_bool`]: #method.optional_bool
    pub const OPTIONAL_BOOL_DEFAULT_VALUE: bool = false;
    pub fn optional_bool(&self) -> bool {
        self.optional_bool.unwrap_or(Self::OPTIONAL_BOOL_DEFAULT_VALUE)
    }
    /// Returns an [`Option`] representing the presence of the [`optional_bool`] field
    ///
    /// [`optional_bool`]: #method.optional_bool
    /// [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html
    pub fn optional_bool_option(&self) -> ::std::option::Option<bool> {
        self.optional_bool
    }
    /// Returns a bool indicating the presence of the [`optional_bool`] field
    ///
    /// [`optional_bool`]: #method.optional_bool
    pub fn has_optional_bool(&self) -> bool {
        self.optional_bool.is_some()
    }
    /// Sets the value of the [`optional_bool`] field
    ///
    /// [`optional_bool`]: #method.optional_bool
    pub fn set_optional_bool(&mut self, value: bool) {
        self.optional_bool = ::std::option::Option::Some(value)
    }
    /// Clears the value of the [`optional_bool`] field
    ///
    /// [`optional_bool`]: #method.optional_bool
    pub fn clear_optional_bool(&mut self) {
        self.optional_bool = ::std::option::Option::None
    }
    /// Gets the field number of the [`optional_string`] field
    ///
    /// [`optional_string`]: #method.optional_string
    pub const OPTIONAL_STRING_FIELD_NUMBER: i32 = 14;
    /// A constant value representing the default value of the [`optional_string`] field
    ///
    /// [`optional_string`]: #method.optional_string
    pub const OPTIONAL_STRING_DEFAULT_VALUE: &'static str = "";
    pub fn optional_string(&self) -> &str {
        self.optional_string.as_ref().map(|v| &**v).unwrap_or(Self::OPTIONAL_STRING_DEFAULT_VALUE)
    }
    /// Returns an [`Option`] representing the presence of the [`optional_string`] field
    ///
    /// [`optional_string`]: #method.optional_string
    /// [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html
    pub fn optional_string_option(&self) -> ::std::option::Option<&::std::string::String> {
        self.optional_string.as_ref()
    }
    /// Returns a unique reference to the [`optional_string`] field
    ///
    /// [`optional_string`]: #method.optional_string
    pub fn optional_string_mut(&mut self) -> &mut ::std::string::String {
        self.optional_string.get_or_insert_with(::std::string::String::new)
    }
    /// Returns a bool indicating the presence of the [`optional_string`] field
    ///
    /// [`optional_string`]: #method.optional_string
    pub fn has_optional_string(&self) -> bool {
        self.optional_string.is_some()
    }
    /// Sets the value of the [`optional_string`] field
    ///
    /// [`optional_string`]: #method.optional_string
    pub fn set_optional_string(&mut self, value: ::std::string::String) {
        self.optional_string = ::std::option::Option::Some(value)
    }
    /// Takes the value of the [`optional_string`] field, leaving it empty
    ///
    /// [`optional_string`]: #method.optional_string
    pub fn take_optional_string(&mut self) -> ::std::option::Option<::std::string::String> {
        self.optional_string.take()
    }
    /// Clears the value of the [`optional_string`] field
    ///
    /// [`optional_string`]: #method.optional_string
    pub fn clear_optional_string(&mut self) {
        self.optional_string = ::std::option::Option::None
    }
    /// Gets the field number of the [`optional_bytes`] field
    ///
    /// [`optional_bytes`]: #method.optional_bytes
    pub const OPTIONAL_BYTES_FIELD_NUMBER: i32 = 15;
    /// A constant value representing the default value of the [`optional_bytes`] field
    ///
    /// [`optional_bytes`]: #method.optional_bytes
    pub const OPTIONAL_BYTES_DEFAULT_VALUE: &'static [u8] = &[];
    pub fn optional_bytes(&self) -> &[u8] {
        self.optional_bytes.as_ref().map(|v| &**v).unwrap_or(Self::OPTIONAL_BYTES_DEFAULT_VALUE)
    }
    /// Returns an [`Option`] representing the presence of the [`optional_bytes`] field
    ///
    /// [`optional_bytes`]: #method.optional_bytes
    /// [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html
    pub fn optional_bytes_option(&self) -> ::std::option::Option<&::std::vec::Vec<u8>> {
        self.optional_bytes.as_ref()
    }
    /// Returns a unique reference to the [`optional_bytes`] field
    ///
    /// [`optional_bytes`]: #method.optional_bytes
    pub fn optional_bytes_mut(&mut self) -> &mut ::std::vec::Vec<u8> {
        self.optional_bytes.get_or_insert_with(::std::vec::Vec::new)
    }
    /// Returns a bool indicating the presence of the [`optional_bytes`] field
    ///
    /// [`optional_bytes`]: #method.optional_bytes
    pub fn has_optional_bytes(&self) -> bool {
        self.optional_bytes.is_some()
    }
    /// Sets the value of the [`optional_bytes`] field
    ///
    /// [`optional_bytes`]: #method.optional_bytes
    pub fn set_optional_bytes(&mut self, value: ::std::vec::Vec<u8>) {
        self.optional_bytes = ::std::option::Option::Some(value)
    }
    /// Takes the value of the [`optional_bytes`] field, leaving it empty
    ///
    /// [`optional_bytes`]: #method.optional_bytes
    pub fn take_optional_bytes(&mut self) -> ::std::option::Option<::std::vec::Vec<u8>> {
        self.optional_bytes.take()
    }
    /// Clears the value of the [`optional_bytes`] field
    ///
    /// [`optional_bytes`]: #method.optional_bytes
    pub fn clear_optional_bytes(&mut self) {
        self.optional_bytes = ::std::option::Option::None
    }
    /// Gets the field number of the [`optional_nested_message`] field
    ///
    /// [`optional_nested_message`]: #method.optional_nested_message
    pub const OPTIONAL_NESTED_MESSAGE_FIELD_NUMBER: i32 = 18;
    pub fn optional_nested_message_option(&self) -> ::std::option::Option<&self::TestAllTypesProto2_NestedMessage> {
        self.optional_nested_message.as_ref().map(|b| &**b)
    }
    /// Returns a unique reference to the [`optional_nested_message`] field
    ///
    /// [`optional_nested_message`]: #method.optional_nested_message
    pub fn optional_nested_message_mut(&mut self) -> &mut self::TestAllTypesProto2_NestedMessage {
        self.optional_nested_message.get_or_insert_with(::protrust::LiteMessage::new)
    }
    /// Returns a bool indicating the presence of the [`optional_nested_message`] field
    ///
    /// [`optional_nested_message`]: #method.optional_nested_message
    pub fn has_optional_nested_message(&self) -> bool {
        self.optional_nested_message.is_some()
    }
    /// Sets the value of the [`optional_nested_message`] field
    ///
    /// [`optional_nested_message`]: #method.optional_nested_message
    pub fn set_optional_nested_message(&mut self, value: self::TestAllTypesProto2_NestedMessage) {
        self.optional_nested_message = ::std::option::Option::Some(::std::boxed::Box::new(value))
    }
    /// Takes the value of the [`optional_nested_message`] field, leaving it empty
    ///
    /// [`optional_nested_message`]: #method.optional_nested_message
    pub fn take_optional_nested_message(&mut self) -> ::std::option::Option<self::TestAllTypesProto2_NestedMessage> {
        self.optional_nested_message.take().map(|b| *b)
    }
    /// Clears the value of the [`optional_nested_message`] field
    ///
    /// [`optional_nested_message`]: #method.optional_nested_message
    pub fn clear_optional_nested_message(&mut self) {
        self.optional_nested_message = ::std::option::Option::None
    }
    /// Gets the field number of the [`optional_foreign_message`] field
    ///
    /// [`optional_foreign_message`]: #method.optional_foreign_message
    pub const OPTIONAL_FOREIGN_MESSAGE_FIELD_NUMBER: i32 = 19;
    pub fn optional_foreign_message_option(&self) -> ::std::option::Option<&self::ForeignMessageProto2> {
        self.optional_foreign_message.as_ref().map(|b| &**b)
    }
    /// Returns a unique reference to the [`optional_foreign_message`] field
    ///
    /// [`optional_foreign_message`]: #method.optional_foreign_message
    pub fn optional_foreign_message_mut(&mut self) -> &mut self::ForeignMessageProto2 {
        self.optional_foreign_message.get_or_insert_with(::protrust::LiteMessage::new)
    }
    /// Returns a bool indicating the presence of the [`optional_foreign_message`] field
    ///
    /// [`optional_foreign_message`]: #method.optional_foreign_message
    pub fn has_optional_foreign_message(&self) -> bool {
        self.optional_foreign_message.is_some()
    }
    /// Sets the value of the [`optional_foreign_message`] field
    ///
    /// [`optional_foreign_message`]: #method.optional_foreign_message
    pub fn set_optional_foreign_message(&mut self, value: self::ForeignMessageProto2) {
        self.optional_foreign_message = ::std::option::Option::Some(::std::boxed::Box::new(value))
    }
    /// Takes the value of the [`optional_foreign_message`] field, leaving it empty
    ///
    /// [`optional_foreign_message`]: #method.optional_foreign_message
    pub fn take_optional_foreign_message(&mut self) -> ::std::option::Option<self::ForeignMessageProto2> {
        self.optional_foreign_message.take().map(|b| *b)
    }
    /// Clears the value of the [`optional_foreign_message`] field
    ///
    /// [`optional_foreign_message`]: #method.optional_foreign_message
    pub fn clear_optional_foreign_message(&mut self) {
        self.optional_foreign_message = ::std::option::Option::None
    }
    /// Gets the field number of the [`optional_nested_enum`] field
    ///
    /// [`optional_nested_enum`]: #method.optional_nested_enum
    pub const OPTIONAL_NESTED_ENUM_FIELD_NUMBER: i32 = 21;
    /// A constant value representing the default value of the [`optional_nested_enum`] field
    ///
    /// [`optional_nested_enum`]: #method.optional_nested_enum
    pub const OPTIONAL_NESTED_ENUM_DEFAULT_VALUE: ::protrust::EnumValue<self::TestAllTypesProto2_NestedEnum> = ::protrust::EnumValue::Defined(self::TestAllTypesProto2_NestedEnum::Foo);
    pub fn optional_nested_enum(&self) -> ::protrust::EnumValue<self::TestAllTypesProto2_NestedEnum> {
        self.optional_nested_enum.unwrap_or(Self::OPTIONAL_NESTED_ENUM_DEFAULT_VALUE)
    }
    /// Returns an [`Option`] representing the presence of the [`optional_nested_enum`] field
    ///
    /// [`optional_nested_enum`]: #method.optional_nested_enum
    /// [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html
    pub fn optional_nested_enum_option(&self) -> ::std::option::Option<::protrust::EnumValue<self::TestAllTypesProto2_NestedEnum>> {
        self.optional_nested_enum
    }
    /// Returns a bool indicating the presence of the [`optional_nested_enum`] field
    ///
    /// [`optional_nested_enum`]: #method.optional_nested_enum
    pub fn has_optional_nested_enum(&self) -> bool {
        self.optional_nested_enum.is_some()
    }
    /// Sets the value of the [`optional_nested_enum`] field
    ///
    /// [`optional_nested_enum`]: #method.optional_nested_enum
    pub fn set_optional_nested_enum(&mut self, value: ::protrust::EnumValue<self::TestAllTypesProto2_NestedEnum>) {
        self.optional_nested_enum = ::std::option::Option::Some(value)
    }
    /// Clears the value of the [`optional_nested_enum`] field
    ///
    /// [`optional_nested_enum`]: #method.optional_nested_enum
    pub fn clear_optional_nested_enum(&mut self) {
        self.optional_nested_enum = ::std::option::Option::None
    }
    /// Gets the field number of the [`optional_foreign_enum`] field
    ///
    /// [`optional_foreign_enum`]: #method.optional_foreign_enum
    pub const OPTIONAL_FOREIGN_ENUM_FIELD_NUMBER: i32 = 22;
    /// A constant value representing the default value of the [`optional_foreign_enum`] field
    ///
    /// [`optional_foreign_enum`]: #method.optional_foreign_enum
    pub const OPTIONAL_FOREIGN_ENUM_DEFAULT_VALUE: ::protrust::EnumValue<self::ForeignEnumProto2> = ::protrust::EnumValue::Defined(self::ForeignEnumProto2::ForeignFoo);
    pub fn optional_foreign_enum(&self) -> ::protrust::EnumValue<self::ForeignEnumProto2> {
        self.optional_foreign_enum.unwrap_or(Self::OPTIONAL_FOREIGN_ENUM_DEFAULT_VALUE)
    }
    /// Returns an [`Option`] representing the presence of the [`optional_foreign_enum`] field
    ///
    /// [`optional_foreign_enum`]: #method.optional_foreign_enum
    /// [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html
    pub fn optional_foreign_enum_option(&self) -> ::std::option::Option<::protrust::EnumValue<self::ForeignEnumProto2>> {
        self.optional_foreign_enum
    }
    /// Returns a bool indicating the presence of the [`optional_foreign_enum`] field
    ///
    /// [`optional_foreign_enum`]: #method.optional_foreign_enum
    pub fn has_optional_foreign_enum(&self) -> bool {
        self.optional_foreign_enum.is_some()
    }
    /// Sets the value of the [`optional_foreign_enum`] field
    ///
    /// [`optional_foreign_enum`]: #method.optional_foreign_enum
    pub fn set_optional_foreign_enum(&mut self, value: ::protrust::EnumValue<self::ForeignEnumProto2>) {
        self.optional_foreign_enum = ::std::option::Option::Some(value)
    }
    /// Clears the value of the [`optional_foreign_enum`] field
    ///
    /// [`optional_foreign_enum`]: #method.optional_foreign_enum
    pub fn clear_optional_foreign_enum(&mut self) {
        self.optional_foreign_enum = ::std::option::Option::None
    }
    /// Gets the field number of the [`optional_string_piece`] field
    ///
    /// [`optional_string_piece`]: #method.optional_string_piece
    pub const OPTIONAL_STRING_PIECE_FIELD_NUMBER: i32 = 24;
    /// A constant value representing the default value of the [`optional_string_piece`] field
    ///
    /// [`optional_string_piece`]: #method.optional_string_piece
    pub const OPTIONAL_STRING_PIECE_DEFAULT_VALUE: &'static str = "";
    pub fn optional_string_piece(&self) -> &str {
        self.optional_string_piece.as_ref().map(|v| &**v).unwrap_or(Self::OPTIONAL_STRING_PIECE_DEFAULT_VALUE)
    }
    /// Returns an [`Option`] representing the presence of the [`optional_string_piece`] field
    ///
    /// [`optional_string_piece`]: #method.optional_string_piece
    /// [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html
    pub fn optional_string_piece_option(&self) -> ::std::option::Option<&::std::string::String> {
        self.optional_string_piece.as_ref()
    }
    /// Returns a unique reference to the [`optional_string_piece`] field
    ///
    /// [`optional_string_piece`]: #method.optional_string_piece
    pub fn optional_string_piece_mut(&mut self) -> &mut ::std::string::String {
        self.optional_string_piece.get_or_insert_with(::std::string::String::new)
    }
    /// Returns a bool indicating the presence of the [`optional_string_piece`] field
    ///
    /// [`optional_string_piece`]: #method.optional_string_piece
    pub fn has_optional_string_piece(&self) -> bool {
        self.optional_string_piece.is_some()
    }
    /// Sets the value of the [`optional_string_piece`] field
    ///
    /// [`optional_string_piece`]: #method.optional_string_piece
    pub fn set_optional_string_piece(&mut self, value: ::std::string::String) {
        self.optional_string_piece = ::std::option::Option::Some(value)
    }
    /// Takes the value of the [`optional_string_piece`] field, leaving it empty
    ///
    /// [`optional_string_piece`]: #method.optional_string_piece
    pub fn take_optional_string_piece(&mut self) -> ::std::option::Option<::std::string::String> {
        self.optional_string_piece.take()
    }
    /// Clears the value of the [`optional_string_piece`] field
    ///
    /// [`optional_string_piece`]: #method.optional_string_piece
    pub fn clear_optional_string_piece(&mut self) {
        self.optional_string_piece = ::std::option::Option::None
    }
    /// Gets the field number of the [`optional_cord`] field
    ///
    /// [`optional_cord`]: #method.optional_cord
    pub const OPTIONAL_CORD_FIELD_NUMBER: i32 = 25;
    /// A constant value representing the default value of the [`optional_cord`] field
    ///
    /// [`optional_cord`]: #method.optional_cord
    pub const OPTIONAL_CORD_DEFAULT_VALUE: &'static str = "";
    pub fn optional_cord(&self) -> &str {
        self.optional_cord.as_ref().map(|v| &**v).unwrap_or(Self::OPTIONAL_CORD_DEFAULT_VALUE)
    }
    /// Returns an [`Option`] representing the presence of the [`optional_cord`] field
    ///
    /// [`optional_cord`]: #method.optional_cord
    /// [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html
    pub fn optional_cord_option(&self) -> ::std::option::Option<&::std::string::String> {
        self.optional_cord.as_ref()
    }
    /// Returns a unique reference to the [`optional_cord`] field
    ///
    /// [`optional_cord`]: #method.optional_cord
    pub fn optional_cord_mut(&mut self) -> &mut ::std::string::String {
        self.optional_cord.get_or_insert_with(::std::string::String::new)
    }
    /// Returns a bool indicating the presence of the [`optional_cord`] field
    ///
    /// [`optional_cord`]: #method.optional_cord
    pub fn has_optional_cord(&self) -> bool {
        self.optional_cord.is_some()
    }
    /// Sets the value of the [`optional_cord`] field
    ///
    /// [`optional_cord`]: #method.optional_cord
    pub fn set_optional_cord(&mut self, value: ::std::string::String) {
        self.optional_cord = ::std::option::Option::Some(value)
    }
    /// Takes the value of the [`optional_cord`] field, leaving it empty
    ///
    /// [`optional_cord`]: #method.optional_cord
    pub fn take_optional_cord(&mut self) -> ::std::option::Option<::std::string::String> {
        self.optional_cord.take()
    }
    /// Clears the value of the [`optional_cord`] field
    ///
    /// [`optional_cord`]: #method.optional_cord
    pub fn clear_optional_cord(&mut self) {
        self.optional_cord = ::std::option::Option::None
    }
    /// Gets the field number of the [`recursive_message`] field
    ///
    /// [`recursive_message`]: #method.recursive_message
    pub const RECURSIVE_MESSAGE_FIELD_NUMBER: i32 = 27;
    pub fn recursive_message_option(&self) -> ::std::option::Option<&self::TestAllTypesProto2> {
        self.recursive_message.as_ref().map(|b| &**b)
    }
    /// Returns a unique reference to the [`recursive_message`] field
    ///
    /// [`recursive_message`]: #method.recursive_message
    pub fn recursive_message_mut(&mut self) -> &mut self::TestAllTypesProto2 {
        self.recursive_message.get_or_insert_with(::protrust::LiteMessage::new)
    }
    /// Returns a bool indicating the presence of the [`recursive_message`] field
    ///
    /// [`recursive_message`]: #method.recursive_message
    pub fn has_recursive_message(&self) -> bool {
        self.recursive_message.is_some()
    }
    /// Sets the value of the [`recursive_message`] field
    ///
    /// [`recursive_message`]: #method.recursive_message
    pub fn set_recursive_message(&mut self, value: self::TestAllTypesProto2) {
        self.recursive_message = ::std::option::Option::Some(::std::boxed::Box::new(value))
    }
    /// Takes the value of the [`recursive_message`] field, leaving it empty
    ///
    /// [`recursive_message`]: #method.recursive_message
    pub fn take_recursive_message(&mut self) -> ::std::option::Option<self::TestAllTypesProto2> {
        self.recursive_message.take().map(|b| *b)
    }
    /// Clears the value of the [`recursive_message`] field
    ///
    /// [`recursive_message`]: #method.recursive_message
    pub fn clear_recursive_message(&mut self) {
        self.recursive_message = ::std::option::Option::None
    }
    /// Gets the field number of the [`repeated_int32`] field
    ///
    /// [`repeated_int32`]: #method.repeated_int32
    pub const REPEATED_INT32_FIELD_NUMBER: i32 = 31;
    /// Repeated
    pub fn repeated_int32(&self) -> &::protrust::collections::RepeatedField<i32> {
        &self.repeated_int32
    }
    /// Returns a unique reference to the [`repeated_int32`] field
    ///
    /// [`repeated_int32`]: #method.repeated_int32
    pub fn repeated_int32_mut(&mut self) -> &mut ::protrust::collections::RepeatedField<i32> {
        &mut self.repeated_int32
    }
    /// Gets the field number of the [`repeated_int64`] field
    ///
    /// [`repeated_int64`]: #method.repeated_int64
    pub const REPEATED_INT64_FIELD_NUMBER: i32 = 32;
    pub fn repeated_int64(&self) -> &::protrust::collections::RepeatedField<i64> {
        &self.repeated_int64
    }
    /// Returns a unique reference to the [`repeated_int64`] field
    ///
    /// [`repeated_int64`]: #method.repeated_int64
    pub fn repeated_int64_mut(&mut self) -> &mut ::protrust::collections::RepeatedField<i64> {
        &mut self.repeated_int64
    }
    /// Gets the field number of the [`repeated_uint32`] field
    ///
    /// [`repeated_uint32`]: #method.repeated_uint32
    pub const REPEATED_UINT32_FIELD_NUMBER: i32 = 33;
    pub fn repeated_uint32(&self) -> &::protrust::collections::RepeatedField<u32> {
        &self.repeated_uint32
    }
    /// Returns a unique reference to the [`repeated_uint32`] field
    ///
    /// [`repeated_uint32`]: #method.repeated_uint32
    pub fn repeated_uint32_mut(&mut self) -> &mut ::protrust::collections::RepeatedField<u32> {
        &mut self.repeated_uint32
    }
    /// Gets the field number of the [`repeated_uint64`] field
    ///
    /// [`repeated_uint64`]: #method.repeated_uint64
    pub const REPEATED_UINT64_FIELD_NUMBER: i32 = 34;
    pub fn repeated_uint64(&self) -> &::protrust::collections::RepeatedField<u64> {
        &self.repeated_uint64
    }
    /// Returns a unique reference to the [`repeated_uint64`] field
    ///
    /// [`repeated_uint64`]: #method.repeated_uint64
    pub fn repeated_uint64_mut(&mut self) -> &mut ::protrust::collections::RepeatedField<u64> {
        &mut self.repeated_uint64
    }
    /// Gets the field number of the [`repeated_sint32`] field
    ///
    /// [`repeated_sint32`]: #method.repeated_sint32
    pub const REPEATED_SINT32_FIELD_NUMBER: i32 = 35;
    pub fn repeated_sint32(&self) -> &::protrust::collections::RepeatedField<i32> {
        &self.repeated_sint32
    }
    /// Returns a unique reference to the [`repeated_sint32`] field
    ///
    /// [`repeated_sint32`]: #method.repeated_sint32
    pub fn repeated_sint32_mut(&mut self) -> &mut ::protrust::collections::RepeatedField<i32> {
        &mut self.repeated_sint32
    }
    /// Gets the field number of the [`repeated_sint64`] field
    ///
    /// [`repeated_sint64`]: #method.repeated_sint64
    pub const REPEATED_SINT64_FIELD_NUMBER: i32 = 36;
    pub fn repeated_sint64(&self) -> &::protrust::collections::RepeatedField<i64> {
        &self.repeated_sint64
    }
    /// Returns a unique reference to the [`repeated_sint64`] field
    ///
    /// [`repeated_sint64`]: #method.repeated_sint64
    pub fn repeated_sint64_mut(&mut self) -> &mut ::protrust::collections::RepeatedField<i64> {
        &mut self.repeated_sint64
    }
    /// Gets the field number of the [`repeated_fixed32`] field
    ///
    /// [`repeated_fixed32`]: #method.repeated_fixed32
    pub const REPEATED_FIXED32_FIELD_NUMBER: i32 = 37;
    pub fn repeated_fixed32(&self) -> &::protrust::collections::RepeatedField<u32> {
        &self.repeated_fixed32
    }
    /// Returns a unique reference to the [`repeated_fixed32`] field
    ///
    /// [`repeated_fixed32`]: #method.repeated_fixed32
    pub fn repeated_fixed32_mut(&mut self) -> &mut ::protrust::collections::RepeatedField<u32> {
        &mut self.repeated_fixed32
    }
    /// Gets the field number of the [`repeated_fixed64`] field
    ///
    /// [`repeated_fixed64`]: #method.repeated_fixed64
    pub const REPEATED_FIXED64_FIELD_NUMBER: i32 = 38;
    pub fn repeated_fixed64(&self) -> &::protrust::collections::RepeatedField<u64> {
        &self.repeated_fixed64
    }
    /// Returns a unique reference to the [`repeated_fixed64`] field
    ///
    /// [`repeated_fixed64`]: #method.repeated_fixed64
    pub fn repeated_fixed64_mut(&mut self) -> &mut ::protrust::collections::RepeatedField<u64> {
        &mut self.repeated_fixed64
    }
    /// Gets the field number of the [`repeated_sfixed32`] field
    ///
    /// [`repeated_sfixed32`]: #method.repeated_sfixed32
    pub const REPEATED_SFIXED32_FIELD_NUMBER: i32 = 39;
    pub fn repeated_sfixed32(&self) -> &::protrust::collections::RepeatedField<i32> {
        &self.repeated_sfixed32
    }
    /// Returns a unique reference to the [`repeated_sfixed32`] field
    ///
    /// [`repeated_sfixed32`]: #method.repeated_sfixed32
    pub fn repeated_sfixed32_mut(&mut self) -> &mut ::protrust::collections::RepeatedField<i32> {
        &mut self.repeated_sfixed32
    }
    /// Gets the field number of the [`repeated_sfixed64`] field
    ///
    /// [`repeated_sfixed64`]: #method.repeated_sfixed64
    pub const REPEATED_SFIXED64_FIELD_NUMBER: i32 = 40;
    pub fn repeated_sfixed64(&self) -> &::protrust::collections::RepeatedField<i64> {
        &self.repeated_sfixed64
    }
    /// Returns a unique reference to the [`repeated_sfixed64`] field
    ///
    /// [`repeated_sfixed64`]: #method.repeated_sfixed64
    pub fn repeated_sfixed64_mut(&mut self) -> &mut ::protrust::collections::RepeatedField<i64> {
        &mut self.repeated_sfixed64
    }
    /// Gets the field number of the [`repeated_float`] field
    ///
    /// [`repeated_float`]: #method.repeated_float
    pub const REPEATED_FLOAT_FIELD_NUMBER: i32 = 41;
    pub fn repeated_float(&self) -> &::protrust::collections::RepeatedField<f32> {
        &self.repeated_float
    }
    /// Returns a unique reference to the [`repeated_float`] field
    ///
    /// [`repeated_float`]: #method.repeated_float
    pub fn repeated_float_mut(&mut self) -> &mut ::protrust::collections::RepeatedField<f32> {
        &mut self.repeated_float
    }
    /// Gets the field number of the [`repeated_double`] field
    ///
    /// [`repeated_double`]: #method.repeated_double
    pub const REPEATED_DOUBLE_FIELD_NUMBER: i32 = 42;
    pub fn repeated_double(&self) -> &::protrust::collections::RepeatedField<f64> {
        &self.repeated_double
    }
    /// Returns a unique reference to the [`repeated_double`] field
    ///
    /// [`repeated_double`]: #method.repeated_double
    pub fn repeated_double_mut(&mut self) -> &mut ::protrust::collections::RepeatedField<f64> {
        &mut self.repeated_double
    }
    /// Gets the field number of the [`repeated_bool`] field
    ///
    /// [`repeated_bool`]: #method.repeated_bool
    pub const REPEATED_BOOL_FIELD_NUMBER: i32 = 43;
    pub fn repeated_bool(&self) -> &::protrust::collections::RepeatedField<bool> {
        &self.repeated_bool
    }
    /// Returns a unique reference to the [`repeated_bool`] field
    ///
    /// [`repeated_bool`]: #method.repeated_bool
    pub fn repeated_bool_mut(&mut self) -> &mut ::protrust::collections::RepeatedField<bool> {
        &mut self.repeated_bool
    }
    /// Gets the field number of the [`repeated_string`] field
    ///
    /// [`repeated_string`]: #method.repeated_string
    pub const REPEATED_STRING_FIELD_NUMBER: i32 = 44;
    pub fn repeated_string(&self) -> &::protrust::collections::RepeatedField<::std::string::String> {
        &self.repeated_string
    }
    /// Returns a unique reference to the [`repeated_string`] field
    ///
    /// [`repeated_string`]: #method.repeated_string
    pub fn repeated_string_mut(&mut self) -> &mut ::protrust::collections::RepeatedField<::std::string::String> {
        &mut self.repeated_string
    }
    /// Gets the field number of the [`repeated_bytes`] field
    ///
    /// [`repeated_bytes`]: #method.repeated_bytes
    pub const REPEATED_BYTES_FIELD_NUMBER: i32 = 45;
    pub fn repeated_bytes(&self) -> &::protrust::collections::RepeatedField<::std::vec::Vec<u8>> {
        &self.repeated_bytes
    }
    /// Returns a unique reference to the [`repeated_bytes`] field
    ///
    /// [`repeated_bytes`]: #method.repeated_bytes
    pub fn repeated_bytes_mut(&mut self) -> &mut ::protrust::collections::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.repeated_bytes
    }
    /// Gets the field number of the [`repeated_nested_message`] field
    ///
    /// [`repeated_nested_message`]: #method.repeated_nested_message
    pub const REPEATED_NESTED_MESSAGE_FIELD_NUMBER: i32 = 48;
    pub fn repeated_nested_message(&self) -> &::protrust::collections::RepeatedField<self::TestAllTypesProto2_NestedMessage> {
        &self.repeated_nested_message
    }
    /// Returns a unique reference to the [`repeated_nested_message`] field
    ///
    /// [`repeated_nested_message`]: #method.repeated_nested_message
    pub fn repeated_nested_message_mut(&mut self) -> &mut ::protrust::collections::RepeatedField<self::TestAllTypesProto2_NestedMessage> {
        &mut self.repeated_nested_message
    }
    /// Gets the field number of the [`repeated_foreign_message`] field
    ///
    /// [`repeated_foreign_message`]: #method.repeated_foreign_message
    pub const REPEATED_FOREIGN_MESSAGE_FIELD_NUMBER: i32 = 49;
    pub fn repeated_foreign_message(&self) -> &::protrust::collections::RepeatedField<self::ForeignMessageProto2> {
        &self.repeated_foreign_message
    }
    /// Returns a unique reference to the [`repeated_foreign_message`] field
    ///
    /// [`repeated_foreign_message`]: #method.repeated_foreign_message
    pub fn repeated_foreign_message_mut(&mut self) -> &mut ::protrust::collections::RepeatedField<self::ForeignMessageProto2> {
        &mut self.repeated_foreign_message
    }
    /// Gets the field number of the [`repeated_nested_enum`] field
    ///
    /// [`repeated_nested_enum`]: #method.repeated_nested_enum
    pub const REPEATED_NESTED_ENUM_FIELD_NUMBER: i32 = 51;
    pub fn repeated_nested_enum(&self) -> &::protrust::collections::RepeatedField<::protrust::EnumValue<self::TestAllTypesProto2_NestedEnum>> {
        &self.repeated_nested_enum
    }
    /// Returns a unique reference to the [`repeated_nested_enum`] field
    ///
    /// [`repeated_nested_enum`]: #method.repeated_nested_enum
    pub fn repeated_nested_enum_mut(&mut self) -> &mut ::protrust::collections::RepeatedField<::protrust::EnumValue<self::TestAllTypesProto2_NestedEnum>> {
        &mut self.repeated_nested_enum
    }
    /// Gets the field number of the [`repeated_foreign_enum`] field
    ///
    /// [`repeated_foreign_enum`]: #method.repeated_foreign_enum
    pub const REPEATED_FOREIGN_ENUM_FIELD_NUMBER: i32 = 52;
    pub fn repeated_foreign_enum(&self) -> &::protrust::collections::RepeatedField<::protrust::EnumValue<self::ForeignEnumProto2>> {
        &self.repeated_foreign_enum
    }
    /// Returns a unique reference to the [`repeated_foreign_enum`] field
    ///
    /// [`repeated_foreign_enum`]: #method.repeated_foreign_enum
    pub fn repeated_foreign_enum_mut(&mut self) -> &mut ::protrust::collections::RepeatedField<::protrust::EnumValue<self::ForeignEnumProto2>> {
        &mut self.repeated_foreign_enum
    }
    /// Gets the field number of the [`repeated_string_piece`] field
    ///
    /// [`repeated_string_piece`]: #method.repeated_string_piece
    pub const REPEATED_STRING_PIECE_FIELD_NUMBER: i32 = 54;
    pub fn repeated_string_piece(&self) -> &::protrust::collections::RepeatedField<::std::string::String> {
        &self.repeated_string_piece
    }
    /// Returns a unique reference to the [`repeated_string_piece`] field
    ///
    /// [`repeated_string_piece`]: #method.repeated_string_piece
    pub fn repeated_string_piece_mut(&mut self) -> &mut ::protrust::collections::RepeatedField<::std::string::String> {
        &mut self.repeated_string_piece
    }
    /// Gets the field number of the [`repeated_cord`] field
    ///
    /// [`repeated_cord`]: #method.repeated_cord
    pub const REPEATED_CORD_FIELD_NUMBER: i32 = 55;
    pub fn repeated_cord(&self) -> &::protrust::collections::RepeatedField<::std::string::String> {
        &self.repeated_cord
    }
    /// Returns a unique reference to the [`repeated_cord`] field
    ///
    /// [`repeated_cord`]: #method.repeated_cord
    pub fn repeated_cord_mut(&mut self) -> &mut ::protrust::collections::RepeatedField<::std::string::String> {
        &mut self.repeated_cord
    }
    /// Gets the field number of the [`map_int32_int32`] field
    ///
    /// [`map_int32_int32`]: #method.map_int32_int32
    pub const MAP_INT32_INT32_FIELD_NUMBER: i32 = 56;
    /// Map
    pub fn map_int32_int32(&self) -> &::protrust::collections::MapField<i32, i32> {
        &self.map_int32_int32
    }
    /// Returns a unique reference to the [`map_int32_int32`] field
    ///
    /// [`map_int32_int32`]: #method.map_int32_int32
    pub fn map_int32_int32_mut(&mut self) -> &mut ::protrust::collections::MapField<i32, i32> {
        &mut self.map_int32_int32
    }
    /// Gets the field number of the [`map_int64_int64`] field
    ///
    /// [`map_int64_int64`]: #method.map_int64_int64
    pub const MAP_INT64_INT64_FIELD_NUMBER: i32 = 57;
    pub fn map_int64_int64(&self) -> &::protrust::collections::MapField<i64, i64> {
        &self.map_int64_int64
    }
    /// Returns a unique reference to the [`map_int64_int64`] field
    ///
    /// [`map_int64_int64`]: #method.map_int64_int64
    pub fn map_int64_int64_mut(&mut self) -> &mut ::protrust::collections::MapField<i64, i64> {
        &mut self.map_int64_int64
    }
    /// Gets the field number of the [`map_uint32_uint32`] field
    ///
    /// [`map_uint32_uint32`]: #method.map_uint32_uint32
    pub const MAP_UINT32_UINT32_FIELD_NUMBER: i32 = 58;
    pub fn map_uint32_uint32(&self) -> &::protrust::collections::MapField<u32, u32> {
        &self.map_uint32_uint32
    }
    /// Returns a unique reference to the [`map_uint32_uint32`] field
    ///
    /// [`map_uint32_uint32`]: #method.map_uint32_uint32
    pub fn map_uint32_uint32_mut(&mut self) -> &mut ::protrust::collections::MapField<u32, u32> {
        &mut self.map_uint32_uint32
    }
    /// Gets the field number of the [`map_uint64_uint64`] field
    ///
    /// [`map_uint64_uint64`]: #method.map_uint64_uint64
    pub const MAP_UINT64_UINT64_FIELD_NUMBER: i32 = 59;
    pub fn map_uint64_uint64(&self) -> &::protrust::collections::MapField<u64, u64> {
        &self.map_uint64_uint64
    }
    /// Returns a unique reference to the [`map_uint64_uint64`] field
    ///
    /// [`map_uint64_uint64`]: #method.map_uint64_uint64
    pub fn map_uint64_uint64_mut(&mut self) -> &mut ::protrust::collections::MapField<u64, u64> {
        &mut self.map_uint64_uint64
    }
    /// Gets the field number of the [`map_sint32_sint32`] field
    ///
    /// [`map_sint32_sint32`]: #method.map_sint32_sint32
    pub const MAP_SINT32_SINT32_FIELD_NUMBER: i32 = 60;
    pub fn map_sint32_sint32(&self) -> &::protrust::collections::MapField<i32, i32> {
        &self.map_sint32_sint32
    }
    /// Returns a unique reference to the [`map_sint32_sint32`] field
    ///
    /// [`map_sint32_sint32`]: #method.map_sint32_sint32
    pub fn map_sint32_sint32_mut(&mut self) -> &mut ::protrust::collections::MapField<i32, i32> {
        &mut self.map_sint32_sint32
    }
    /// Gets the field number of the [`map_sint64_sint64`] field
    ///
    /// [`map_sint64_sint64`]: #method.map_sint64_sint64
    pub const MAP_SINT64_SINT64_FIELD_NUMBER: i32 = 61;
    pub fn map_sint64_sint64(&self) -> &::protrust::collections::MapField<i64, i64> {
        &self.map_sint64_sint64
    }
    /// Returns a unique reference to the [`map_sint64_sint64`] field
    ///
    /// [`map_sint64_sint64`]: #method.map_sint64_sint64
    pub fn map_sint64_sint64_mut(&mut self) -> &mut ::protrust::collections::MapField<i64, i64> {
        &mut self.map_sint64_sint64
    }
    /// Gets the field number of the [`map_fixed32_fixed32`] field
    ///
    /// [`map_fixed32_fixed32`]: #method.map_fixed32_fixed32
    pub const MAP_FIXED32_FIXED32_FIELD_NUMBER: i32 = 62;
    pub fn map_fixed32_fixed32(&self) -> &::protrust::collections::MapField<u32, u32> {
        &self.map_fixed32_fixed32
    }
    /// Returns a unique reference to the [`map_fixed32_fixed32`] field
    ///
    /// [`map_fixed32_fixed32`]: #method.map_fixed32_fixed32
    pub fn map_fixed32_fixed32_mut(&mut self) -> &mut ::protrust::collections::MapField<u32, u32> {
        &mut self.map_fixed32_fixed32
    }
    /// Gets the field number of the [`map_fixed64_fixed64`] field
    ///
    /// [`map_fixed64_fixed64`]: #method.map_fixed64_fixed64
    pub const MAP_FIXED64_FIXED64_FIELD_NUMBER: i32 = 63;
    pub fn map_fixed64_fixed64(&self) -> &::protrust::collections::MapField<u64, u64> {
        &self.map_fixed64_fixed64
    }
    /// Returns a unique reference to the [`map_fixed64_fixed64`] field
    ///
    /// [`map_fixed64_fixed64`]: #method.map_fixed64_fixed64
    pub fn map_fixed64_fixed64_mut(&mut self) -> &mut ::protrust::collections::MapField<u64, u64> {
        &mut self.map_fixed64_fixed64
    }
    /// Gets the field number of the [`map_sfixed32_sfixed32`] field
    ///
    /// [`map_sfixed32_sfixed32`]: #method.map_sfixed32_sfixed32
    pub const MAP_SFIXED32_SFIXED32_FIELD_NUMBER: i32 = 64;
    pub fn map_sfixed32_sfixed32(&self) -> &::protrust::collections::MapField<i32, i32> {
        &self.map_sfixed32_sfixed32
    }
    /// Returns a unique reference to the [`map_sfixed32_sfixed32`] field
    ///
    /// [`map_sfixed32_sfixed32`]: #method.map_sfixed32_sfixed32
    pub fn map_sfixed32_sfixed32_mut(&mut self) -> &mut ::protrust::collections::MapField<i32, i32> {
        &mut self.map_sfixed32_sfixed32
    }
    /// Gets the field number of the [`map_sfixed64_sfixed64`] field
    ///
    /// [`map_sfixed64_sfixed64`]: #method.map_sfixed64_sfixed64
    pub const MAP_SFIXED64_SFIXED64_FIELD_NUMBER: i32 = 65;
    pub fn map_sfixed64_sfixed64(&self) -> &::protrust::collections::MapField<i64, i64> {
        &self.map_sfixed64_sfixed64
    }
    /// Returns a unique reference to the [`map_sfixed64_sfixed64`] field
    ///
    /// [`map_sfixed64_sfixed64`]: #method.map_sfixed64_sfixed64
    pub fn map_sfixed64_sfixed64_mut(&mut self) -> &mut ::protrust::collections::MapField<i64, i64> {
        &mut self.map_sfixed64_sfixed64
    }
    /// Gets the field number of the [`map_int32_float`] field
    ///
    /// [`map_int32_float`]: #method.map_int32_float
    pub const MAP_INT32_FLOAT_FIELD_NUMBER: i32 = 66;
    pub fn map_int32_float(&self) -> &::protrust::collections::MapField<i32, f32> {
        &self.map_int32_float
    }
    /// Returns a unique reference to the [`map_int32_float`] field
    ///
    /// [`map_int32_float`]: #method.map_int32_float
    pub fn map_int32_float_mut(&mut self) -> &mut ::protrust::collections::MapField<i32, f32> {
        &mut self.map_int32_float
    }
    /// Gets the field number of the [`map_int32_double`] field
    ///
    /// [`map_int32_double`]: #method.map_int32_double
    pub const MAP_INT32_DOUBLE_FIELD_NUMBER: i32 = 67;
    pub fn map_int32_double(&self) -> &::protrust::collections::MapField<i32, f64> {
        &self.map_int32_double
    }
    /// Returns a unique reference to the [`map_int32_double`] field
    ///
    /// [`map_int32_double`]: #method.map_int32_double
    pub fn map_int32_double_mut(&mut self) -> &mut ::protrust::collections::MapField<i32, f64> {
        &mut self.map_int32_double
    }
    /// Gets the field number of the [`map_bool_bool`] field
    ///
    /// [`map_bool_bool`]: #method.map_bool_bool
    pub const MAP_BOOL_BOOL_FIELD_NUMBER: i32 = 68;
    pub fn map_bool_bool(&self) -> &::protrust::collections::MapField<bool, bool> {
        &self.map_bool_bool
    }
    /// Returns a unique reference to the [`map_bool_bool`] field
    ///
    /// [`map_bool_bool`]: #method.map_bool_bool
    pub fn map_bool_bool_mut(&mut self) -> &mut ::protrust::collections::MapField<bool, bool> {
        &mut self.map_bool_bool
    }
    /// Gets the field number of the [`map_string_string`] field
    ///
    /// [`map_string_string`]: #method.map_string_string
    pub const MAP_STRING_STRING_FIELD_NUMBER: i32 = 69;
    pub fn map_string_string(&self) -> &::protrust::collections::MapField<::std::string::String, ::std::string::String> {
        &self.map_string_string
    }
    /// Returns a unique reference to the [`map_string_string`] field
    ///
    /// [`map_string_string`]: #method.map_string_string
    pub fn map_string_string_mut(&mut self) -> &mut ::protrust::collections::MapField<::std::string::String, ::std::string::String> {
        &mut self.map_string_string
    }
    /// Gets the field number of the [`map_string_bytes`] field
    ///
    /// [`map_string_bytes`]: #method.map_string_bytes
    pub const MAP_STRING_BYTES_FIELD_NUMBER: i32 = 70;
    pub fn map_string_bytes(&self) -> &::protrust::collections::MapField<::std::string::String, ::std::vec::Vec<u8>> {
        &self.map_string_bytes
    }
    /// Returns a unique reference to the [`map_string_bytes`] field
    ///
    /// [`map_string_bytes`]: #method.map_string_bytes
    pub fn map_string_bytes_mut(&mut self) -> &mut ::protrust::collections::MapField<::std::string::String, ::std::vec::Vec<u8>> {
        &mut self.map_string_bytes
    }
    /// Gets the field number of the [`map_string_nested_message`] field
    ///
    /// [`map_string_nested_message`]: #method.map_string_nested_message
    pub const MAP_STRING_NESTED_MESSAGE_FIELD_NUMBER: i32 = 71;
    pub fn map_string_nested_message(&self) -> &::protrust::collections::MapField<::std::string::String, self::TestAllTypesProto2_NestedMessage> {
        &self.map_string_nested_message
    }
    /// Returns a unique reference to the [`map_string_nested_message`] field
    ///
    /// [`map_string_nested_message`]: #method.map_string_nested_message
    pub fn map_string_nested_message_mut(&mut self) -> &mut ::protrust::collections::MapField<::std::string::String, self::TestAllTypesProto2_NestedMessage> {
        &mut self.map_string_nested_message
    }
    /// Gets the field number of the [`map_string_foreign_message`] field
    ///
    /// [`map_string_foreign_message`]: #method.map_string_foreign_message
    pub const MAP_STRING_FOREIGN_MESSAGE_FIELD_NUMBER: i32 = 72;
    pub fn map_string_foreign_message(&self) -> &::protrust::collections::MapField<::std::string::String, self::ForeignMessageProto2> {
        &self.map_string_foreign_message
    }
    /// Returns a unique reference to the [`map_string_foreign_message`] field
    ///
    /// [`map_string_foreign_message`]: #method.map_string_foreign_message
    pub fn map_string_foreign_message_mut(&mut self) -> &mut ::protrust::collections::MapField<::std::string::String, self::ForeignMessageProto2> {
        &mut self.map_string_foreign_message
    }
    /// Gets the field number of the [`map_string_nested_enum`] field
    ///
    /// [`map_string_nested_enum`]: #method.map_string_nested_enum
    pub const MAP_STRING_NESTED_ENUM_FIELD_NUMBER: i32 = 73;
    pub fn map_string_nested_enum(&self) -> &::protrust::collections::MapField<::std::string::String, ::protrust::EnumValue<self::TestAllTypesProto2_NestedEnum>> {
        &self.map_string_nested_enum
    }
    /// Returns a unique reference to the [`map_string_nested_enum`] field
    ///
    /// [`map_string_nested_enum`]: #method.map_string_nested_enum
    pub fn map_string_nested_enum_mut(&mut self) -> &mut ::protrust::collections::MapField<::std::string::String, ::protrust::EnumValue<self::TestAllTypesProto2_NestedEnum>> {
        &mut self.map_string_nested_enum
    }
    /// Gets the field number of the [`map_string_foreign_enum`] field
    ///
    /// [`map_string_foreign_enum`]: #method.map_string_foreign_enum
    pub const MAP_STRING_FOREIGN_ENUM_FIELD_NUMBER: i32 = 74;
    pub fn map_string_foreign_enum(&self) -> &::protrust::collections::MapField<::std::string::String, ::protrust::EnumValue<self::ForeignEnumProto2>> {
        &self.map_string_foreign_enum
    }
    /// Returns a unique reference to the [`map_string_foreign_enum`] field
    ///
    /// [`map_string_foreign_enum`]: #method.map_string_foreign_enum
    pub fn map_string_foreign_enum_mut(&mut self) -> &mut ::protrust::collections::MapField<::std::string::String, ::protrust::EnumValue<self::ForeignEnumProto2>> {
        &mut self.map_string_foreign_enum
    }
    /// Gets the field number of the [`data`] field
    ///
    /// [`data`]: #method.data
    pub const DATA_FIELD_NUMBER: i32 = 201;
    pub fn data_option(&self) -> ::std::option::Option<&self::TestAllTypesProto2_Data> {
        self.data.as_ref().map(|b| &**b)
    }
    /// Returns a unique reference to the [`data`] field
    ///
    /// [`data`]: #method.data
    pub fn data_mut(&mut self) -> &mut self::TestAllTypesProto2_Data {
        self.data.get_or_insert_with(::protrust::LiteMessage::new)
    }
    /// Returns a bool indicating the presence of the [`data`] field
    ///
    /// [`data`]: #method.data
    pub fn has_data(&self) -> bool {
        self.data.is_some()
    }
    /// Sets the value of the [`data`] field
    ///
    /// [`data`]: #method.data
    pub fn set_data(&mut self, value: self::TestAllTypesProto2_Data) {
        self.data = ::std::option::Option::Some(::std::boxed::Box::new(value))
    }
    /// Takes the value of the [`data`] field, leaving it empty
    ///
    /// [`data`]: #method.data
    pub fn take_data(&mut self) -> ::std::option::Option<self::TestAllTypesProto2_Data> {
        self.data.take().map(|b| *b)
    }
    /// Clears the value of the [`data`] field
    ///
    /// [`data`]: #method.data
    pub fn clear_data(&mut self) {
        self.data = ::std::option::Option::None
    }
    /// Gets the field number of the [`fieldname1`] field
    ///
    /// [`fieldname1`]: #method.fieldname1
    pub const FIELDNAME1_FIELD_NUMBER: i32 = 401;
    /// A constant value representing the default value of the [`fieldname1`] field
    ///
    /// [`fieldname1`]: #method.fieldname1
    pub const FIELDNAME1_DEFAULT_VALUE: i32 = 0;
    /// Test field-name-to-JSON-name convention.
    /// (protobuf says names can be any valid C/C++ identifier.)
    pub fn fieldname1(&self) -> i32 {
        self.fieldname1.unwrap_or(Self::FIELDNAME1_DEFAULT_VALUE)
    }
    /// Returns an [`Option`] representing the presence of the [`fieldname1`] field
    ///
    /// [`fieldname1`]: #method.fieldname1
    /// [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html
    pub fn fieldname1_option(&self) -> ::std::option::Option<i32> {
        self.fieldname1
    }
    /// Returns a bool indicating the presence of the [`fieldname1`] field
    ///
    /// [`fieldname1`]: #method.fieldname1
    pub fn has_fieldname1(&self) -> bool {
        self.fieldname1.is_some()
    }
    /// Sets the value of the [`fieldname1`] field
    ///
    /// [`fieldname1`]: #method.fieldname1
    pub fn set_fieldname1(&mut self, value: i32) {
        self.fieldname1 = ::std::option::Option::Some(value)
    }
    /// Clears the value of the [`fieldname1`] field
    ///
    /// [`fieldname1`]: #method.fieldname1
    pub fn clear_fieldname1(&mut self) {
        self.fieldname1 = ::std::option::Option::None
    }
    /// Gets the field number of the [`field_name2`] field
    ///
    /// [`field_name2`]: #method.field_name2
    pub const FIELD_NAME2_FIELD_NUMBER: i32 = 402;
    /// A constant value representing the default value of the [`field_name2`] field
    ///
    /// [`field_name2`]: #method.field_name2
    pub const FIELD_NAME2_DEFAULT_VALUE: i32 = 0;
    pub fn field_name2(&self) -> i32 {
        self.field_name2.unwrap_or(Self::FIELD_NAME2_DEFAULT_VALUE)
    }
    /// Returns an [`Option`] representing the presence of the [`field_name2`] field
    ///
    /// [`field_name2`]: #method.field_name2
    /// [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html
    pub fn field_name2_option(&self) -> ::std::option::Option<i32> {
        self.field_name2
    }
    /// Returns a bool indicating the presence of the [`field_name2`] field
    ///
    /// [`field_name2`]: #method.field_name2
    pub fn has_field_name2(&self) -> bool {
        self.field_name2.is_some()
    }
    /// Sets the value of the [`field_name2`] field
    ///
    /// [`field_name2`]: #method.field_name2
    pub fn set_field_name2(&mut self, value: i32) {
        self.field_name2 = ::std::option::Option::Some(value)
    }
    /// Clears the value of the [`field_name2`] field
    ///
    /// [`field_name2`]: #method.field_name2
    pub fn clear_field_name2(&mut self) {
        self.field_name2 = ::std::option::Option::None
    }
    /// Gets the field number of the [`_field_name3`] field
    ///
    /// [`_field_name3`]: #method._field_name3
    pub const _FIELD_NAME3_FIELD_NUMBER: i32 = 403;
    /// A constant value representing the default value of the [`_field_name3`] field
    ///
    /// [`_field_name3`]: #method._field_name3
    pub const _FIELD_NAME3_DEFAULT_VALUE: i32 = 0;
    pub fn _field_name3(&self) -> i32 {
        self._field_name3.unwrap_or(Self::_FIELD_NAME3_DEFAULT_VALUE)
    }
    /// Returns an [`Option`] representing the presence of the [`_field_name3`] field
    ///
    /// [`_field_name3`]: #method._field_name3
    /// [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html
    pub fn _field_name3_option(&self) -> ::std::option::Option<i32> {
        self._field_name3
    }
    /// Returns a bool indicating the presence of the [`_field_name3`] field
    ///
    /// [`_field_name3`]: #method._field_name3
    pub fn has__field_name3(&self) -> bool {
        self._field_name3.is_some()
    }
    /// Sets the value of the [`_field_name3`] field
    ///
    /// [`_field_name3`]: #method._field_name3
    pub fn set__field_name3(&mut self, value: i32) {
        self._field_name3 = ::std::option::Option::Some(value)
    }
    /// Clears the value of the [`_field_name3`] field
    ///
    /// [`_field_name3`]: #method._field_name3
    pub fn clear__field_name3(&mut self) {
        self._field_name3 = ::std::option::Option::None
    }
    /// Gets the field number of the [`field__name4_`] field
    ///
    /// [`field__name4_`]: #method.field__name4_
    pub const FIELD__NAME4__FIELD_NUMBER: i32 = 404;
    /// A constant value representing the default value of the [`field__name4_`] field
    ///
    /// [`field__name4_`]: #method.field__name4_
    pub const FIELD__NAME4__DEFAULT_VALUE: i32 = 0;
    pub fn field__name4_(&self) -> i32 {
        self.field__name4_.unwrap_or(Self::FIELD__NAME4__DEFAULT_VALUE)
    }
    /// Returns an [`Option`] representing the presence of the [`field__name4_`] field
    ///
    /// [`field__name4_`]: #method.field__name4_
    /// [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html
    pub fn field__name4__option(&self) -> ::std::option::Option<i32> {
        self.field__name4_
    }
    /// Returns a bool indicating the presence of the [`field__name4_`] field
    ///
    /// [`field__name4_`]: #method.field__name4_
    pub fn has_field__name4_(&self) -> bool {
        self.field__name4_.is_some()
    }
    /// Sets the value of the [`field__name4_`] field
    ///
    /// [`field__name4_`]: #method.field__name4_
    pub fn set_field__name4_(&mut self, value: i32) {
        self.field__name4_ = ::std::option::Option::Some(value)
    }
    /// Clears the value of the [`field__name4_`] field
    ///
    /// [`field__name4_`]: #method.field__name4_
    pub fn clear_field__name4_(&mut self) {
        self.field__name4_ = ::std::option::Option::None
    }
    /// Gets the field number of the [`field0name5`] field
    ///
    /// [`field0name5`]: #method.field0name5
    pub const FIELD0NAME5_FIELD_NUMBER: i32 = 405;
    /// A constant value representing the default value of the [`field0name5`] field
    ///
    /// [`field0name5`]: #method.field0name5
    pub const FIELD0NAME5_DEFAULT_VALUE: i32 = 0;
    pub fn field0name5(&self) -> i32 {
        self.field0name5.unwrap_or(Self::FIELD0NAME5_DEFAULT_VALUE)
    }
    /// Returns an [`Option`] representing the presence of the [`field0name5`] field
    ///
    /// [`field0name5`]: #method.field0name5
    /// [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html
    pub fn field0name5_option(&self) -> ::std::option::Option<i32> {
        self.field0name5
    }
    /// Returns a bool indicating the presence of the [`field0name5`] field
    ///
    /// [`field0name5`]: #method.field0name5
    pub fn has_field0name5(&self) -> bool {
        self.field0name5.is_some()
    }
    /// Sets the value of the [`field0name5`] field
    ///
    /// [`field0name5`]: #method.field0name5
    pub fn set_field0name5(&mut self, value: i32) {
        self.field0name5 = ::std::option::Option::Some(value)
    }
    /// Clears the value of the [`field0name5`] field
    ///
    /// [`field0name5`]: #method.field0name5
    pub fn clear_field0name5(&mut self) {
        self.field0name5 = ::std::option::Option::None
    }
    /// Gets the field number of the [`field_0_name6`] field
    ///
    /// [`field_0_name6`]: #method.field_0_name6
    pub const FIELD_0_NAME6_FIELD_NUMBER: i32 = 406;
    /// A constant value representing the default value of the [`field_0_name6`] field
    ///
    /// [`field_0_name6`]: #method.field_0_name6
    pub const FIELD_0_NAME6_DEFAULT_VALUE: i32 = 0;
    pub fn field_0_name6(&self) -> i32 {
        self.field_0_name6.unwrap_or(Self::FIELD_0_NAME6_DEFAULT_VALUE)
    }
    /// Returns an [`Option`] representing the presence of the [`field_0_name6`] field
    ///
    /// [`field_0_name6`]: #method.field_0_name6
    /// [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html
    pub fn field_0_name6_option(&self) -> ::std::option::Option<i32> {
        self.field_0_name6
    }
    /// Returns a bool indicating the presence of the [`field_0_name6`] field
    ///
    /// [`field_0_name6`]: #method.field_0_name6
    pub fn has_field_0_name6(&self) -> bool {
        self.field_0_name6.is_some()
    }
    /// Sets the value of the [`field_0_name6`] field
    ///
    /// [`field_0_name6`]: #method.field_0_name6
    pub fn set_field_0_name6(&mut self, value: i32) {
        self.field_0_name6 = ::std::option::Option::Some(value)
    }
    /// Clears the value of the [`field_0_name6`] field
    ///
    /// [`field_0_name6`]: #method.field_0_name6
    pub fn clear_field_0_name6(&mut self) {
        self.field_0_name6 = ::std::option::Option::None
    }
    /// Gets the field number of the [`fieldName7`] field
    ///
    /// [`fieldName7`]: #method.fieldName7
    pub const FIELDNAME7_FIELD_NUMBER: i32 = 407;
    /// A constant value representing the default value of the [`fieldName7`] field
    ///
    /// [`fieldName7`]: #method.fieldName7
    pub const FIELDNAME7_DEFAULT_VALUE: i32 = 0;
    pub fn fieldName7(&self) -> i32 {
        self.fieldName7.unwrap_or(Self::FIELDNAME7_DEFAULT_VALUE)
    }
    /// Returns an [`Option`] representing the presence of the [`fieldName7`] field
    ///
    /// [`fieldName7`]: #method.fieldName7
    /// [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html
    pub fn fieldName7_option(&self) -> ::std::option::Option<i32> {
        self.fieldName7
    }
    /// Returns a bool indicating the presence of the [`fieldName7`] field
    ///
    /// [`fieldName7`]: #method.fieldName7
    pub fn has_fieldName7(&self) -> bool {
        self.fieldName7.is_some()
    }
    /// Sets the value of the [`fieldName7`] field
    ///
    /// [`fieldName7`]: #method.fieldName7
    pub fn set_fieldName7(&mut self, value: i32) {
        self.fieldName7 = ::std::option::Option::Some(value)
    }
    /// Clears the value of the [`fieldName7`] field
    ///
    /// [`fieldName7`]: #method.fieldName7
    pub fn clear_fieldName7(&mut self) {
        self.fieldName7 = ::std::option::Option::None
    }
    /// Gets the field number of the [`FieldName8`] field
    ///
    /// [`FieldName8`]: #method.FieldName8
    pub const FIELDNAME8_FIELD_NUMBER: i32 = 408;
    /// A constant value representing the default value of the [`FieldName8`] field
    ///
    /// [`FieldName8`]: #method.FieldName8
    pub const FIELDNAME8_DEFAULT_VALUE: i32 = 0;
    pub fn FieldName8(&self) -> i32 {
        self.FieldName8.unwrap_or(Self::FIELDNAME8_DEFAULT_VALUE)
    }
    /// Returns an [`Option`] representing the presence of the [`FieldName8`] field
    ///
    /// [`FieldName8`]: #method.FieldName8
    /// [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html
    pub fn FieldName8_option(&self) -> ::std::option::Option<i32> {
        self.FieldName8
    }
    /// Returns a bool indicating the presence of the [`FieldName8`] field
    ///
    /// [`FieldName8`]: #method.FieldName8
    pub fn has_FieldName8(&self) -> bool {
        self.FieldName8.is_some()
    }
    /// Sets the value of the [`FieldName8`] field
    ///
    /// [`FieldName8`]: #method.FieldName8
    pub fn set_FieldName8(&mut self, value: i32) {
        self.FieldName8 = ::std::option::Option::Some(value)
    }
    /// Clears the value of the [`FieldName8`] field
    ///
    /// [`FieldName8`]: #method.FieldName8
    pub fn clear_FieldName8(&mut self) {
        self.FieldName8 = ::std::option::Option::None
    }
    /// Gets the field number of the [`field_Name9`] field
    ///
    /// [`field_Name9`]: #method.field_Name9
    pub const FIELD_NAME9_FIELD_NUMBER: i32 = 409;
    /// A constant value representing the default value of the [`field_Name9`] field
    ///
    /// [`field_Name9`]: #method.field_Name9
    pub const FIELD_NAME9_DEFAULT_VALUE: i32 = 0;
    pub fn field_Name9(&self) -> i32 {
        self.field_Name9.unwrap_or(Self::FIELD_NAME9_DEFAULT_VALUE)
    }
    /// Returns an [`Option`] representing the presence of the [`field_Name9`] field
    ///
    /// [`field_Name9`]: #method.field_Name9
    /// [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html
    pub fn field_Name9_option(&self) -> ::std::option::Option<i32> {
        self.field_Name9
    }
    /// Returns a bool indicating the presence of the [`field_Name9`] field
    ///
    /// [`field_Name9`]: #method.field_Name9
    pub fn has_field_Name9(&self) -> bool {
        self.field_Name9.is_some()
    }
    /// Sets the value of the [`field_Name9`] field
    ///
    /// [`field_Name9`]: #method.field_Name9
    pub fn set_field_Name9(&mut self, value: i32) {
        self.field_Name9 = ::std::option::Option::Some(value)
    }
    /// Clears the value of the [`field_Name9`] field
    ///
    /// [`field_Name9`]: #method.field_Name9
    pub fn clear_field_Name9(&mut self) {
        self.field_Name9 = ::std::option::Option::None
    }
    /// Gets the field number of the [`Field_Name10`] field
    ///
    /// [`Field_Name10`]: #method.Field_Name10
    pub const FIELD_NAME10_FIELD_NUMBER: i32 = 410;
    /// A constant value representing the default value of the [`Field_Name10`] field
    ///
    /// [`Field_Name10`]: #method.Field_Name10
    pub const FIELD_NAME10_DEFAULT_VALUE: i32 = 0;
    pub fn Field_Name10(&self) -> i32 {
        self.Field_Name10.unwrap_or(Self::FIELD_NAME10_DEFAULT_VALUE)
    }
    /// Returns an [`Option`] representing the presence of the [`Field_Name10`] field
    ///
    /// [`Field_Name10`]: #method.Field_Name10
    /// [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html
    pub fn Field_Name10_option(&self) -> ::std::option::Option<i32> {
        self.Field_Name10
    }
    /// Returns a bool indicating the presence of the [`Field_Name10`] field
    ///
    /// [`Field_Name10`]: #method.Field_Name10
    pub fn has_Field_Name10(&self) -> bool {
        self.Field_Name10.is_some()
    }
    /// Sets the value of the [`Field_Name10`] field
    ///
    /// [`Field_Name10`]: #method.Field_Name10
    pub fn set_Field_Name10(&mut self, value: i32) {
        self.Field_Name10 = ::std::option::Option::Some(value)
    }
    /// Clears the value of the [`Field_Name10`] field
    ///
    /// [`Field_Name10`]: #method.Field_Name10
    pub fn clear_Field_Name10(&mut self) {
        self.Field_Name10 = ::std::option::Option::None
    }
    /// Gets the field number of the [`FIELD_NAME11`] field
    ///
    /// [`FIELD_NAME11`]: #method.FIELD_NAME11
    pub const FIELD_NAME11_FIELD_NUMBER: i32 = 411;
    /// A constant value representing the default value of the [`FIELD_NAME11`] field
    ///
    /// [`FIELD_NAME11`]: #method.FIELD_NAME11
    pub const FIELD_NAME11_DEFAULT_VALUE: i32 = 0;
    pub fn FIELD_NAME11(&self) -> i32 {
        self.FIELD_NAME11.unwrap_or(Self::FIELD_NAME11_DEFAULT_VALUE)
    }
    /// Returns an [`Option`] representing the presence of the [`FIELD_NAME11`] field
    ///
    /// [`FIELD_NAME11`]: #method.FIELD_NAME11
    /// [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html
    pub fn FIELD_NAME11_option(&self) -> ::std::option::Option<i32> {
        self.FIELD_NAME11
    }
    /// Returns a bool indicating the presence of the [`FIELD_NAME11`] field
    ///
    /// [`FIELD_NAME11`]: #method.FIELD_NAME11
    pub fn has_FIELD_NAME11(&self) -> bool {
        self.FIELD_NAME11.is_some()
    }
    /// Sets the value of the [`FIELD_NAME11`] field
    ///
    /// [`FIELD_NAME11`]: #method.FIELD_NAME11
    pub fn set_FIELD_NAME11(&mut self, value: i32) {
        self.FIELD_NAME11 = ::std::option::Option::Some(value)
    }
    /// Clears the value of the [`FIELD_NAME11`] field
    ///
    /// [`FIELD_NAME11`]: #method.FIELD_NAME11
    pub fn clear_FIELD_NAME11(&mut self) {
        self.FIELD_NAME11 = ::std::option::Option::None
    }
    /// Gets the field number of the [`FIELD_name12`] field
    ///
    /// [`FIELD_name12`]: #method.FIELD_name12
    pub const FIELD_NAME12_FIELD_NUMBER: i32 = 412;
    /// A constant value representing the default value of the [`FIELD_name12`] field
    ///
    /// [`FIELD_name12`]: #method.FIELD_name12
    pub const FIELD_NAME12_DEFAULT_VALUE: i32 = 0;
    pub fn FIELD_name12(&self) -> i32 {
        self.FIELD_name12.unwrap_or(Self::FIELD_NAME12_DEFAULT_VALUE)
    }
    /// Returns an [`Option`] representing the presence of the [`FIELD_name12`] field
    ///
    /// [`FIELD_name12`]: #method.FIELD_name12
    /// [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html
    pub fn FIELD_name12_option(&self) -> ::std::option::Option<i32> {
        self.FIELD_name12
    }
    /// Returns a bool indicating the presence of the [`FIELD_name12`] field
    ///
    /// [`FIELD_name12`]: #method.FIELD_name12
    pub fn has_FIELD_name12(&self) -> bool {
        self.FIELD_name12.is_some()
    }
    /// Sets the value of the [`FIELD_name12`] field
    ///
    /// [`FIELD_name12`]: #method.FIELD_name12
    pub fn set_FIELD_name12(&mut self, value: i32) {
        self.FIELD_name12 = ::std::option::Option::Some(value)
    }
    /// Clears the value of the [`FIELD_name12`] field
    ///
    /// [`FIELD_name12`]: #method.FIELD_name12
    pub fn clear_FIELD_name12(&mut self) {
        self.FIELD_name12 = ::std::option::Option::None
    }
    /// Gets the field number of the [`__field_name13`] field
    ///
    /// [`__field_name13`]: #method.__field_name13
    pub const __FIELD_NAME13_FIELD_NUMBER: i32 = 413;
    /// A constant value representing the default value of the [`__field_name13`] field
    ///
    /// [`__field_name13`]: #method.__field_name13
    pub const __FIELD_NAME13_DEFAULT_VALUE: i32 = 0;
    pub fn __field_name13(&self) -> i32 {
        self.__field_name13.unwrap_or(Self::__FIELD_NAME13_DEFAULT_VALUE)
    }
    /// Returns an [`Option`] representing the presence of the [`__field_name13`] field
    ///
    /// [`__field_name13`]: #method.__field_name13
    /// [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html
    pub fn __field_name13_option(&self) -> ::std::option::Option<i32> {
        self.__field_name13
    }
    /// Returns a bool indicating the presence of the [`__field_name13`] field
    ///
    /// [`__field_name13`]: #method.__field_name13
    pub fn has___field_name13(&self) -> bool {
        self.__field_name13.is_some()
    }
    /// Sets the value of the [`__field_name13`] field
    ///
    /// [`__field_name13`]: #method.__field_name13
    pub fn set___field_name13(&mut self, value: i32) {
        self.__field_name13 = ::std::option::Option::Some(value)
    }
    /// Clears the value of the [`__field_name13`] field
    ///
    /// [`__field_name13`]: #method.__field_name13
    pub fn clear___field_name13(&mut self) {
        self.__field_name13 = ::std::option::Option::None
    }
    /// Gets the field number of the [`__Field_name14`] field
    ///
    /// [`__Field_name14`]: #method.__Field_name14
    pub const __FIELD_NAME14_FIELD_NUMBER: i32 = 414;
    /// A constant value representing the default value of the [`__Field_name14`] field
    ///
    /// [`__Field_name14`]: #method.__Field_name14
    pub const __FIELD_NAME14_DEFAULT_VALUE: i32 = 0;
    pub fn __Field_name14(&self) -> i32 {
        self.__Field_name14.unwrap_or(Self::__FIELD_NAME14_DEFAULT_VALUE)
    }
    /// Returns an [`Option`] representing the presence of the [`__Field_name14`] field
    ///
    /// [`__Field_name14`]: #method.__Field_name14
    /// [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html
    pub fn __Field_name14_option(&self) -> ::std::option::Option<i32> {
        self.__Field_name14
    }
    /// Returns a bool indicating the presence of the [`__Field_name14`] field
    ///
    /// [`__Field_name14`]: #method.__Field_name14
    pub fn has___Field_name14(&self) -> bool {
        self.__Field_name14.is_some()
    }
    /// Sets the value of the [`__Field_name14`] field
    ///
    /// [`__Field_name14`]: #method.__Field_name14
    pub fn set___Field_name14(&mut self, value: i32) {
        self.__Field_name14 = ::std::option::Option::Some(value)
    }
    /// Clears the value of the [`__Field_name14`] field
    ///
    /// [`__Field_name14`]: #method.__Field_name14
    pub fn clear___Field_name14(&mut self) {
        self.__Field_name14 = ::std::option::Option::None
    }
    /// Gets the field number of the [`field__name15`] field
    ///
    /// [`field__name15`]: #method.field__name15
    pub const FIELD__NAME15_FIELD_NUMBER: i32 = 415;
    /// A constant value representing the default value of the [`field__name15`] field
    ///
    /// [`field__name15`]: #method.field__name15
    pub const FIELD__NAME15_DEFAULT_VALUE: i32 = 0;
    pub fn field__name15(&self) -> i32 {
        self.field__name15.unwrap_or(Self::FIELD__NAME15_DEFAULT_VALUE)
    }
    /// Returns an [`Option`] representing the presence of the [`field__name15`] field
    ///
    /// [`field__name15`]: #method.field__name15
    /// [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html
    pub fn field__name15_option(&self) -> ::std::option::Option<i32> {
        self.field__name15
    }
    /// Returns a bool indicating the presence of the [`field__name15`] field
    ///
    /// [`field__name15`]: #method.field__name15
    pub fn has_field__name15(&self) -> bool {
        self.field__name15.is_some()
    }
    /// Sets the value of the [`field__name15`] field
    ///
    /// [`field__name15`]: #method.field__name15
    pub fn set_field__name15(&mut self, value: i32) {
        self.field__name15 = ::std::option::Option::Some(value)
    }
    /// Clears the value of the [`field__name15`] field
    ///
    /// [`field__name15`]: #method.field__name15
    pub fn clear_field__name15(&mut self) {
        self.field__name15 = ::std::option::Option::None
    }
    /// Gets the field number of the [`field__Name16`] field
    ///
    /// [`field__Name16`]: #method.field__Name16
    pub const FIELD__NAME16_FIELD_NUMBER: i32 = 416;
    /// A constant value representing the default value of the [`field__Name16`] field
    ///
    /// [`field__Name16`]: #method.field__Name16
    pub const FIELD__NAME16_DEFAULT_VALUE: i32 = 0;
    pub fn field__Name16(&self) -> i32 {
        self.field__Name16.unwrap_or(Self::FIELD__NAME16_DEFAULT_VALUE)
    }
    /// Returns an [`Option`] representing the presence of the [`field__Name16`] field
    ///
    /// [`field__Name16`]: #method.field__Name16
    /// [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html
    pub fn field__Name16_option(&self) -> ::std::option::Option<i32> {
        self.field__Name16
    }
    /// Returns a bool indicating the presence of the [`field__Name16`] field
    ///
    /// [`field__Name16`]: #method.field__Name16
    pub fn has_field__Name16(&self) -> bool {
        self.field__Name16.is_some()
    }
    /// Sets the value of the [`field__Name16`] field
    ///
    /// [`field__Name16`]: #method.field__Name16
    pub fn set_field__Name16(&mut self, value: i32) {
        self.field__Name16 = ::std::option::Option::Some(value)
    }
    /// Clears the value of the [`field__Name16`] field
    ///
    /// [`field__Name16`]: #method.field__Name16
    pub fn clear_field__Name16(&mut self) {
        self.field__Name16 = ::std::option::Option::None
    }
    /// Gets the field number of the [`field_name17__`] field
    ///
    /// [`field_name17__`]: #method.field_name17__
    pub const FIELD_NAME17___FIELD_NUMBER: i32 = 417;
    /// A constant value representing the default value of the [`field_name17__`] field
    ///
    /// [`field_name17__`]: #method.field_name17__
    pub const FIELD_NAME17___DEFAULT_VALUE: i32 = 0;
    pub fn field_name17__(&self) -> i32 {
        self.field_name17__.unwrap_or(Self::FIELD_NAME17___DEFAULT_VALUE)
    }
    /// Returns an [`Option`] representing the presence of the [`field_name17__`] field
    ///
    /// [`field_name17__`]: #method.field_name17__
    /// [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html
    pub fn field_name17___option(&self) -> ::std::option::Option<i32> {
        self.field_name17__
    }
    /// Returns a bool indicating the presence of the [`field_name17__`] field
    ///
    /// [`field_name17__`]: #method.field_name17__
    pub fn has_field_name17__(&self) -> bool {
        self.field_name17__.is_some()
    }
    /// Sets the value of the [`field_name17__`] field
    ///
    /// [`field_name17__`]: #method.field_name17__
    pub fn set_field_name17__(&mut self, value: i32) {
        self.field_name17__ = ::std::option::Option::Some(value)
    }
    /// Clears the value of the [`field_name17__`] field
    ///
    /// [`field_name17__`]: #method.field_name17__
    pub fn clear_field_name17__(&mut self) {
        self.field_name17__ = ::std::option::Option::None
    }
    /// Gets the field number of the [`Field_name18__`] field
    ///
    /// [`Field_name18__`]: #method.Field_name18__
    pub const FIELD_NAME18___FIELD_NUMBER: i32 = 418;
    /// A constant value representing the default value of the [`Field_name18__`] field
    ///
    /// [`Field_name18__`]: #method.Field_name18__
    pub const FIELD_NAME18___DEFAULT_VALUE: i32 = 0;
    pub fn Field_name18__(&self) -> i32 {
        self.Field_name18__.unwrap_or(Self::FIELD_NAME18___DEFAULT_VALUE)
    }
    /// Returns an [`Option`] representing the presence of the [`Field_name18__`] field
    ///
    /// [`Field_name18__`]: #method.Field_name18__
    /// [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html
    pub fn Field_name18___option(&self) -> ::std::option::Option<i32> {
        self.Field_name18__
    }
    /// Returns a bool indicating the presence of the [`Field_name18__`] field
    ///
    /// [`Field_name18__`]: #method.Field_name18__
    pub fn has_Field_name18__(&self) -> bool {
        self.Field_name18__.is_some()
    }
    /// Sets the value of the [`Field_name18__`] field
    ///
    /// [`Field_name18__`]: #method.Field_name18__
    pub fn set_Field_name18__(&mut self, value: i32) {
        self.Field_name18__ = ::std::option::Option::Some(value)
    }
    /// Clears the value of the [`Field_name18__`] field
    ///
    /// [`Field_name18__`]: #method.Field_name18__
    pub fn clear_Field_name18__(&mut self) {
        self.Field_name18__ = ::std::option::Option::None
    }
    /// Gets a shared reference to the [`oneof_field`] oneof field
    ///
    /// [`oneof_field`]: enum.TestAllTypesProto2_OneofField.html
    pub fn oneof_field(&self) -> &self::TestAllTypesProto2_OneofField {
        &self.oneof_field
    }
    /// Gets a unique reference to the [`oneof_field`] oneof field
    ///
    /// [`oneof_field`]: enum.TestAllTypesProto2_OneofField.html
    pub fn oneof_field_mut(&mut self) -> &mut self::TestAllTypesProto2_OneofField {
        &mut self.oneof_field
    }
}
#[derive(Clone, Debug, PartialEq)]
pub struct TestAllTypesProto2_NestedMessage {
    a: ::std::option::Option<i32>,
    corecursive: ::std::option::Option<::std::boxed::Box<self::TestAllTypesProto2>>,
    unknown_fields: ::protrust::UnknownFieldSet
}
impl ::protrust::CodedMessage for self::TestAllTypesProto2_NestedMessage {
    fn merge_from(&mut self, input: &mut ::protrust::io::CodedInput) -> ::protrust::io::InputResult<()> {
        while let ::std::option::Option::Some(tag) = input.read_tag()? {
            match tag.get() {
                8 => self.a = ::std::option::Option::Some(input.read_int32()?),
                18 => input.read_message(self.corecursive.get_or_insert_with(::protrust::LiteMessage::new))?,
                tag => self.unknown_fields.merge_from(tag, input)?
            }
        }
        ::std::result::Result::Ok(())
    }
    fn calculate_size(&self) -> i32 {
        let mut size = 0i32;
        let a = self.a;
        if let ::std::option::Option::Some(a) = a {
            if a != Self::A_DEFAULT_VALUE {
                size += 1;
                size += ::protrust::io::sizes::int32(a);
            }
        }
        let corecursive = &self.corecursive;
        if let ::std::option::Option::Some(corecursive) = corecursive {
            size += 1;
            size += ::protrust::io::sizes::message(corecursive);
        }
        size += self.unknown_fields.calculate_size();
        size
    }
    fn write_to(&self, output: &mut ::protrust::io::CodedOutput) -> ::protrust::io::OutputResult {
        let a = self.a;
        if let ::std::option::Option::Some(a) = a {
            if a != Self::A_DEFAULT_VALUE {
                output.write_raw_tag_bytes(&[8])?;
                output.write_int32(a)?;
            }
        }
        let corecursive = &self.corecursive;
        if let ::std::option::Option::Some(corecursive) = corecursive {
            output.write_raw_tag_bytes(&[18])?;
            output.write_message(corecursive)?;
        }
        self.unknown_fields.write_to(output)?;
        ::std::result::Result::Ok(())
    }
}
impl ::protrust::LiteMessage for self::TestAllTypesProto2_NestedMessage {
    fn new() -> Self {
        Self {
            a: ::std::option::Option::None,
            corecursive: ::std::option::Option::None,
            unknown_fields: ::protrust::UnknownFieldSet::new()
        }
    }
    fn merge(&mut self, other: &Self) {
        self.a = other.a;
        if let ::std::option::Option::Some(corecursive) = &other.corecursive {
            self.corecursive.get_or_insert_with(::protrust::LiteMessage::new).merge(corecursive);
        }
        self.unknown_fields.merge(&other.unknown_fields);
    }
}
impl ::protrust::Message for self::TestAllTypesProto2_NestedMessage {
    fn descriptor() -> &'static ::protrust::reflect::MessageDescriptor {
        &self::file().messages()[0].messages()[0]
    }
}
impl self::TestAllTypesProto2_NestedMessage {
    /// Gets the field number of the [`a`] field
    ///
    /// [`a`]: #method.a
    pub const A_FIELD_NUMBER: i32 = 1;
    /// A constant value representing the default value of the [`a`] field
    ///
    /// [`a`]: #method.a
    pub const A_DEFAULT_VALUE: i32 = 0;
    pub fn a(&self) -> i32 {
        self.a.unwrap_or(Self::A_DEFAULT_VALUE)
    }
    /// Returns an [`Option`] representing the presence of the [`a`] field
    ///
    /// [`a`]: #method.a
    /// [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html
    pub fn a_option(&self) -> ::std::option::Option<i32> {
        self.a
    }
    /// Returns a bool indicating the presence of the [`a`] field
    ///
    /// [`a`]: #method.a
    pub fn has_a(&self) -> bool {
        self.a.is_some()
    }
    /// Sets the value of the [`a`] field
    ///
    /// [`a`]: #method.a
    pub fn set_a(&mut self, value: i32) {
        self.a = ::std::option::Option::Some(value)
    }
    /// Clears the value of the [`a`] field
    ///
    /// [`a`]: #method.a
    pub fn clear_a(&mut self) {
        self.a = ::std::option::Option::None
    }
    /// Gets the field number of the [`corecursive`] field
    ///
    /// [`corecursive`]: #method.corecursive
    pub const CORECURSIVE_FIELD_NUMBER: i32 = 2;
    pub fn corecursive_option(&self) -> ::std::option::Option<&self::TestAllTypesProto2> {
        self.corecursive.as_ref().map(|b| &**b)
    }
    /// Returns a unique reference to the [`corecursive`] field
    ///
    /// [`corecursive`]: #method.corecursive
    pub fn corecursive_mut(&mut self) -> &mut self::TestAllTypesProto2 {
        self.corecursive.get_or_insert_with(::protrust::LiteMessage::new)
    }
    /// Returns a bool indicating the presence of the [`corecursive`] field
    ///
    /// [`corecursive`]: #method.corecursive
    pub fn has_corecursive(&self) -> bool {
        self.corecursive.is_some()
    }
    /// Sets the value of the [`corecursive`] field
    ///
    /// [`corecursive`]: #method.corecursive
    pub fn set_corecursive(&mut self, value: self::TestAllTypesProto2) {
        self.corecursive = ::std::option::Option::Some(::std::boxed::Box::new(value))
    }
    /// Takes the value of the [`corecursive`] field, leaving it empty
    ///
    /// [`corecursive`]: #method.corecursive
    pub fn take_corecursive(&mut self) -> ::std::option::Option<self::TestAllTypesProto2> {
        self.corecursive.take().map(|b| *b)
    }
    /// Clears the value of the [`corecursive`] field
    ///
    /// [`corecursive`]: #method.corecursive
    pub fn clear_corecursive(&mut self) {
        self.corecursive = ::std::option::Option::None
    }
}
/// groups
#[derive(Clone, Debug, PartialEq)]
pub struct TestAllTypesProto2_Data {
    group_int32: ::std::option::Option<i32>,
    group_uint32: ::std::option::Option<u32>,
    unknown_fields: ::protrust::UnknownFieldSet
}
impl ::protrust::CodedMessage for self::TestAllTypesProto2_Data {
    fn merge_from(&mut self, input: &mut ::protrust::io::CodedInput) -> ::protrust::io::InputResult<()> {
        while let ::std::option::Option::Some(tag) = input.read_tag()? {
            match tag.get() {
                1616 => self.group_int32 = ::std::option::Option::Some(input.read_int32()?),
                1624 => self.group_uint32 = ::std::option::Option::Some(input.read_uint32()?),
                tag => self.unknown_fields.merge_from(tag, input)?
            }
        }
        ::std::result::Result::Ok(())
    }
    fn calculate_size(&self) -> i32 {
        let mut size = 0i32;
        let group_int32 = self.group_int32;
        if let ::std::option::Option::Some(group_int32) = group_int32 {
            if group_int32 != Self::GROUP_INT32_DEFAULT_VALUE {
                size += 2;
                size += ::protrust::io::sizes::int32(group_int32);
            }
        }
        let group_uint32 = self.group_uint32;
        if let ::std::option::Option::Some(group_uint32) = group_uint32 {
            if group_uint32 != Self::GROUP_UINT32_DEFAULT_VALUE {
                size += 2;
                size += ::protrust::io::sizes::uint32(group_uint32);
            }
        }
        size += self.unknown_fields.calculate_size();
        size
    }
    fn write_to(&self, output: &mut ::protrust::io::CodedOutput) -> ::protrust::io::OutputResult {
        let group_int32 = self.group_int32;
        if let ::std::option::Option::Some(group_int32) = group_int32 {
            if group_int32 != Self::GROUP_INT32_DEFAULT_VALUE {
                output.write_raw_tag_bytes(&[208, 12])?;
                output.write_int32(group_int32)?;
            }
        }
        let group_uint32 = self.group_uint32;
        if let ::std::option::Option::Some(group_uint32) = group_uint32 {
            if group_uint32 != Self::GROUP_UINT32_DEFAULT_VALUE {
                output.write_raw_tag_bytes(&[216, 12])?;
                output.write_uint32(group_uint32)?;
            }
        }
        self.unknown_fields.write_to(output)?;
        ::std::result::Result::Ok(())
    }
}
impl ::protrust::LiteMessage for self::TestAllTypesProto2_Data {
    fn new() -> Self {
        Self {
            group_int32: ::std::option::Option::None,
            group_uint32: ::std::option::Option::None,
            unknown_fields: ::protrust::UnknownFieldSet::new()
        }
    }
    fn merge(&mut self, other: &Self) {
        self.group_int32 = other.group_int32;
        self.group_uint32 = other.group_uint32;
        self.unknown_fields.merge(&other.unknown_fields);
    }
}
impl ::protrust::Message for self::TestAllTypesProto2_Data {
    fn descriptor() -> &'static ::protrust::reflect::MessageDescriptor {
        &self::file().messages()[0].messages()[20]
    }
}
impl self::TestAllTypesProto2_Data {
    /// Gets the field number of the [`group_int32`] field
    ///
    /// [`group_int32`]: #method.group_int32
    pub const GROUP_INT32_FIELD_NUMBER: i32 = 202;
    /// A constant value representing the default value of the [`group_int32`] field
    ///
    /// [`group_int32`]: #method.group_int32
    pub const GROUP_INT32_DEFAULT_VALUE: i32 = 0;
    pub fn group_int32(&self) -> i32 {
        self.group_int32.unwrap_or(Self::GROUP_INT32_DEFAULT_VALUE)
    }
    /// Returns an [`Option`] representing the presence of the [`group_int32`] field
    ///
    /// [`group_int32`]: #method.group_int32
    /// [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html
    pub fn group_int32_option(&self) -> ::std::option::Option<i32> {
        self.group_int32
    }
    /// Returns a bool indicating the presence of the [`group_int32`] field
    ///
    /// [`group_int32`]: #method.group_int32
    pub fn has_group_int32(&self) -> bool {
        self.group_int32.is_some()
    }
    /// Sets the value of the [`group_int32`] field
    ///
    /// [`group_int32`]: #method.group_int32
    pub fn set_group_int32(&mut self, value: i32) {
        self.group_int32 = ::std::option::Option::Some(value)
    }
    /// Clears the value of the [`group_int32`] field
    ///
    /// [`group_int32`]: #method.group_int32
    pub fn clear_group_int32(&mut self) {
        self.group_int32 = ::std::option::Option::None
    }
    /// Gets the field number of the [`group_uint32`] field
    ///
    /// [`group_uint32`]: #method.group_uint32
    pub const GROUP_UINT32_FIELD_NUMBER: i32 = 203;
    /// A constant value representing the default value of the [`group_uint32`] field
    ///
    /// [`group_uint32`]: #method.group_uint32
    pub const GROUP_UINT32_DEFAULT_VALUE: u32 = 0;
    pub fn group_uint32(&self) -> u32 {
        self.group_uint32.unwrap_or(Self::GROUP_UINT32_DEFAULT_VALUE)
    }
    /// Returns an [`Option`] representing the presence of the [`group_uint32`] field
    ///
    /// [`group_uint32`]: #method.group_uint32
    /// [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html
    pub fn group_uint32_option(&self) -> ::std::option::Option<u32> {
        self.group_uint32
    }
    /// Returns a bool indicating the presence of the [`group_uint32`] field
    ///
    /// [`group_uint32`]: #method.group_uint32
    pub fn has_group_uint32(&self) -> bool {
        self.group_uint32.is_some()
    }
    /// Sets the value of the [`group_uint32`] field
    ///
    /// [`group_uint32`]: #method.group_uint32
    pub fn set_group_uint32(&mut self, value: u32) {
        self.group_uint32 = ::std::option::Option::Some(value)
    }
    /// Clears the value of the [`group_uint32`] field
    ///
    /// [`group_uint32`]: #method.group_uint32
    pub fn clear_group_uint32(&mut self) {
        self.group_uint32 = ::std::option::Option::None
    }
}
/// message_set test case.
#[derive(Clone, Debug, PartialEq)]
pub struct TestAllTypesProto2_MessageSetCorrect {
    unknown_fields: ::protrust::UnknownFieldSet
}
impl ::protrust::CodedMessage for self::TestAllTypesProto2_MessageSetCorrect {
    fn merge_from(&mut self, input: &mut ::protrust::io::CodedInput) -> ::protrust::io::InputResult<()> {
        while let ::std::option::Option::Some(tag) = input.read_tag()? {
            match tag.get() {
                tag => self.unknown_fields.merge_from(tag, input)?
            }
        }
        ::std::result::Result::Ok(())
    }
    fn calculate_size(&self) -> i32 {
        let mut size = 0i32;
        size += self.unknown_fields.calculate_size();
        size
    }
    fn write_to(&self, output: &mut ::protrust::io::CodedOutput) -> ::protrust::io::OutputResult {
        self.unknown_fields.write_to(output)?;
        ::std::result::Result::Ok(())
    }
}
impl ::protrust::LiteMessage for self::TestAllTypesProto2_MessageSetCorrect {
    fn new() -> Self {
        Self {
            unknown_fields: ::protrust::UnknownFieldSet::new()
        }
    }
    fn merge(&mut self, other: &Self) {
        self.unknown_fields.merge(&other.unknown_fields);
    }
}
impl ::protrust::Message for self::TestAllTypesProto2_MessageSetCorrect {
    fn descriptor() -> &'static ::protrust::reflect::MessageDescriptor {
        &self::file().messages()[0].messages()[21]
    }
}
impl self::TestAllTypesProto2_MessageSetCorrect {
}
#[derive(Clone, Debug, PartialEq)]
pub struct TestAllTypesProto2_MessageSetCorrectExtension1 {
    str: ::std::option::Option<::std::string::String>,
    unknown_fields: ::protrust::UnknownFieldSet
}
impl ::protrust::CodedMessage for self::TestAllTypesProto2_MessageSetCorrectExtension1 {
    fn merge_from(&mut self, input: &mut ::protrust::io::CodedInput) -> ::protrust::io::InputResult<()> {
        while let ::std::option::Option::Some(tag) = input.read_tag()? {
            match tag.get() {
                202 => self.str = ::std::option::Option::Some(input.read_string()?),
                tag => self.unknown_fields.merge_from(tag, input)?
            }
        }
        ::std::result::Result::Ok(())
    }
    fn calculate_size(&self) -> i32 {
        let mut size = 0i32;
        let str = &self.str;
        if let ::std::option::Option::Some(str) = str {
            if str != Self::STR_DEFAULT_VALUE {
                size += 2;
                size += ::protrust::io::sizes::string(str);
            }
        }
        size += self.unknown_fields.calculate_size();
        size
    }
    fn write_to(&self, output: &mut ::protrust::io::CodedOutput) -> ::protrust::io::OutputResult {
        let str = &self.str;
        if let ::std::option::Option::Some(str) = str {
            if str != Self::STR_DEFAULT_VALUE {
                output.write_raw_tag_bytes(&[202, 1])?;
                output.write_string(str)?;
            }
        }
        self.unknown_fields.write_to(output)?;
        ::std::result::Result::Ok(())
    }
}
impl ::protrust::LiteMessage for self::TestAllTypesProto2_MessageSetCorrectExtension1 {
    fn new() -> Self {
        Self {
            str: ::std::option::Option::None,
            unknown_fields: ::protrust::UnknownFieldSet::new()
        }
    }
    fn merge(&mut self, other: &Self) {
        self.str = other.str.clone();
        self.unknown_fields.merge(&other.unknown_fields);
    }
}
impl ::protrust::Message for self::TestAllTypesProto2_MessageSetCorrectExtension1 {
    fn descriptor() -> &'static ::protrust::reflect::MessageDescriptor {
        &self::file().messages()[0].messages()[22]
    }
}
impl self::TestAllTypesProto2_MessageSetCorrectExtension1 {
    /// Gets the field number of the [`str`] field
    ///
    /// [`str`]: #method.str
    pub const STR_FIELD_NUMBER: i32 = 25;
    /// A constant value representing the default value of the [`str`] field
    ///
    /// [`str`]: #method.str
    pub const STR_DEFAULT_VALUE: &'static str = "";
    pub fn str(&self) -> &str {
        self.str.as_ref().map(|v| &**v).unwrap_or(Self::STR_DEFAULT_VALUE)
    }
    /// Returns an [`Option`] representing the presence of the [`str`] field
    ///
    /// [`str`]: #method.str
    /// [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html
    pub fn str_option(&self) -> ::std::option::Option<&::std::string::String> {
        self.str.as_ref()
    }
    /// Returns a unique reference to the [`str`] field
    ///
    /// [`str`]: #method.str
    pub fn str_mut(&mut self) -> &mut ::std::string::String {
        self.str.get_or_insert_with(::std::string::String::new)
    }
    /// Returns a bool indicating the presence of the [`str`] field
    ///
    /// [`str`]: #method.str
    pub fn has_str(&self) -> bool {
        self.str.is_some()
    }
    /// Sets the value of the [`str`] field
    ///
    /// [`str`]: #method.str
    pub fn set_str(&mut self, value: ::std::string::String) {
        self.str = ::std::option::Option::Some(value)
    }
    /// Takes the value of the [`str`] field, leaving it empty
    ///
    /// [`str`]: #method.str
    pub fn take_str(&mut self) -> ::std::option::Option<::std::string::String> {
        self.str.take()
    }
    /// Clears the value of the [`str`] field
    ///
    /// [`str`]: #method.str
    pub fn clear_str(&mut self) {
        self.str = ::std::option::Option::None
    }
}
#[derive(Clone, Debug, PartialEq)]
pub struct TestAllTypesProto2_MessageSetCorrectExtension2 {
    i: ::std::option::Option<i32>,
    unknown_fields: ::protrust::UnknownFieldSet
}
impl ::protrust::CodedMessage for self::TestAllTypesProto2_MessageSetCorrectExtension2 {
    fn merge_from(&mut self, input: &mut ::protrust::io::CodedInput) -> ::protrust::io::InputResult<()> {
        while let ::std::option::Option::Some(tag) = input.read_tag()? {
            match tag.get() {
                72 => self.i = ::std::option::Option::Some(input.read_int32()?),
                tag => self.unknown_fields.merge_from(tag, input)?
            }
        }
        ::std::result::Result::Ok(())
    }
    fn calculate_size(&self) -> i32 {
        let mut size = 0i32;
        let i = self.i;
        if let ::std::option::Option::Some(i) = i {
            if i != Self::I_DEFAULT_VALUE {
                size += 1;
                size += ::protrust::io::sizes::int32(i);
            }
        }
        size += self.unknown_fields.calculate_size();
        size
    }
    fn write_to(&self, output: &mut ::protrust::io::CodedOutput) -> ::protrust::io::OutputResult {
        let i = self.i;
        if let ::std::option::Option::Some(i) = i {
            if i != Self::I_DEFAULT_VALUE {
                output.write_raw_tag_bytes(&[72])?;
                output.write_int32(i)?;
            }
        }
        self.unknown_fields.write_to(output)?;
        ::std::result::Result::Ok(())
    }
}
impl ::protrust::LiteMessage for self::TestAllTypesProto2_MessageSetCorrectExtension2 {
    fn new() -> Self {
        Self {
            i: ::std::option::Option::None,
            unknown_fields: ::protrust::UnknownFieldSet::new()
        }
    }
    fn merge(&mut self, other: &Self) {
        self.i = other.i;
        self.unknown_fields.merge(&other.unknown_fields);
    }
}
impl ::protrust::Message for self::TestAllTypesProto2_MessageSetCorrectExtension2 {
    fn descriptor() -> &'static ::protrust::reflect::MessageDescriptor {
        &self::file().messages()[0].messages()[23]
    }
}
impl self::TestAllTypesProto2_MessageSetCorrectExtension2 {
    /// Gets the field number of the [`i`] field
    ///
    /// [`i`]: #method.i
    pub const I_FIELD_NUMBER: i32 = 9;
    /// A constant value representing the default value of the [`i`] field
    ///
    /// [`i`]: #method.i
    pub const I_DEFAULT_VALUE: i32 = 0;
    pub fn i(&self) -> i32 {
        self.i.unwrap_or(Self::I_DEFAULT_VALUE)
    }
    /// Returns an [`Option`] representing the presence of the [`i`] field
    ///
    /// [`i`]: #method.i
    /// [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html
    pub fn i_option(&self) -> ::std::option::Option<i32> {
        self.i
    }
    /// Returns a bool indicating the presence of the [`i`] field
    ///
    /// [`i`]: #method.i
    pub fn has_i(&self) -> bool {
        self.i.is_some()
    }
    /// Sets the value of the [`i`] field
    ///
    /// [`i`]: #method.i
    pub fn set_i(&mut self, value: i32) {
        self.i = ::std::option::Option::Some(value)
    }
    /// Clears the value of the [`i`] field
    ///
    /// [`i`]: #method.i
    pub fn clear_i(&mut self) {
        self.i = ::std::option::Option::None
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]
pub enum TestAllTypesProto2_NestedEnum {
    Foo,
    Bar,
    Baz,
    /// Intentionally negative.
    Neg,
}
impl ::std::convert::TryFrom<i32> for self::TestAllTypesProto2_NestedEnum {
    type Error = ::protrust::VariantUndefinedError;
    fn try_from(value: i32) -> ::std::result::Result<Self, ::protrust::VariantUndefinedError> {
        match value {
            0 => ::std::result::Result::Ok(self::TestAllTypesProto2_NestedEnum::Foo),
            1 => ::std::result::Result::Ok(self::TestAllTypesProto2_NestedEnum::Bar),
            2 => ::std::result::Result::Ok(self::TestAllTypesProto2_NestedEnum::Baz),
            -1 => ::std::result::Result::Ok(self::TestAllTypesProto2_NestedEnum::Neg),
            _ => ::std::result::Result::Err(::protrust::VariantUndefinedError)
        }
    }
}
impl ::std::convert::From<self::TestAllTypesProto2_NestedEnum> for i32 {
    fn from(value: self::TestAllTypesProto2_NestedEnum) -> i32 {
        match value {
            TestAllTypesProto2_NestedEnum::Foo => 0,
            TestAllTypesProto2_NestedEnum::Bar => 1,
            TestAllTypesProto2_NestedEnum::Baz => 2,
            TestAllTypesProto2_NestedEnum::Neg => -1,
        }
    }
}
#[derive(Clone, Debug, PartialEq)]
pub struct ForeignMessageProto2 {
    c: ::std::option::Option<i32>,
    unknown_fields: ::protrust::UnknownFieldSet
}
impl ::protrust::CodedMessage for self::ForeignMessageProto2 {
    fn merge_from(&mut self, input: &mut ::protrust::io::CodedInput) -> ::protrust::io::InputResult<()> {
        while let ::std::option::Option::Some(tag) = input.read_tag()? {
            match tag.get() {
                8 => self.c = ::std::option::Option::Some(input.read_int32()?),
                tag => self.unknown_fields.merge_from(tag, input)?
            }
        }
        ::std::result::Result::Ok(())
    }
    fn calculate_size(&self) -> i32 {
        let mut size = 0i32;
        let c = self.c;
        if let ::std::option::Option::Some(c) = c {
            if c != Self::C_DEFAULT_VALUE {
                size += 1;
                size += ::protrust::io::sizes::int32(c);
            }
        }
        size += self.unknown_fields.calculate_size();
        size
    }
    fn write_to(&self, output: &mut ::protrust::io::CodedOutput) -> ::protrust::io::OutputResult {
        let c = self.c;
        if let ::std::option::Option::Some(c) = c {
            if c != Self::C_DEFAULT_VALUE {
                output.write_raw_tag_bytes(&[8])?;
                output.write_int32(c)?;
            }
        }
        self.unknown_fields.write_to(output)?;
        ::std::result::Result::Ok(())
    }
}
impl ::protrust::LiteMessage for self::ForeignMessageProto2 {
    fn new() -> Self {
        Self {
            c: ::std::option::Option::None,
            unknown_fields: ::protrust::UnknownFieldSet::new()
        }
    }
    fn merge(&mut self, other: &Self) {
        self.c = other.c;
        self.unknown_fields.merge(&other.unknown_fields);
    }
}
impl ::protrust::Message for self::ForeignMessageProto2 {
    fn descriptor() -> &'static ::protrust::reflect::MessageDescriptor {
        &self::file().messages()[1]
    }
}
impl self::ForeignMessageProto2 {
    /// Gets the field number of the [`c`] field
    ///
    /// [`c`]: #method.c
    pub const C_FIELD_NUMBER: i32 = 1;
    /// A constant value representing the default value of the [`c`] field
    ///
    /// [`c`]: #method.c
    pub const C_DEFAULT_VALUE: i32 = 0;
    pub fn c(&self) -> i32 {
        self.c.unwrap_or(Self::C_DEFAULT_VALUE)
    }
    /// Returns an [`Option`] representing the presence of the [`c`] field
    ///
    /// [`c`]: #method.c
    /// [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html
    pub fn c_option(&self) -> ::std::option::Option<i32> {
        self.c
    }
    /// Returns a bool indicating the presence of the [`c`] field
    ///
    /// [`c`]: #method.c
    pub fn has_c(&self) -> bool {
        self.c.is_some()
    }
    /// Sets the value of the [`c`] field
    ///
    /// [`c`]: #method.c
    pub fn set_c(&mut self, value: i32) {
        self.c = ::std::option::Option::Some(value)
    }
    /// Clears the value of the [`c`] field
    ///
    /// [`c`]: #method.c
    pub fn clear_c(&mut self) {
        self.c = ::std::option::Option::None
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]
pub enum ForeignEnumProto2 {
    ForeignFoo,
    ForeignBar,
    ForeignBaz,
}
impl ::std::convert::TryFrom<i32> for self::ForeignEnumProto2 {
    type Error = ::protrust::VariantUndefinedError;
    fn try_from(value: i32) -> ::std::result::Result<Self, ::protrust::VariantUndefinedError> {
        match value {
            0 => ::std::result::Result::Ok(self::ForeignEnumProto2::ForeignFoo),
            1 => ::std::result::Result::Ok(self::ForeignEnumProto2::ForeignBar),
            2 => ::std::result::Result::Ok(self::ForeignEnumProto2::ForeignBaz),
            _ => ::std::result::Result::Err(::protrust::VariantUndefinedError)
        }
    }
}
impl ::std::convert::From<self::ForeignEnumProto2> for i32 {
    fn from(value: self::ForeignEnumProto2) -> i32 {
        match value {
            ForeignEnumProto2::ForeignFoo => 0,
            ForeignEnumProto2::ForeignBar => 1,
            ForeignEnumProto2::ForeignBaz => 2,
        }
    }
}