// DO NOT EDIT!
// Generated by protoc-gen-rust, part of the protrust crate.
//
// Source: test_messages_proto3.proto

static FILE_ONCE: ::std::sync::Once = ::std::sync::Once::new();
static mut FILE_POOL: ::std::option::Option<::protrust::reflect::DescriptorPool<'static>> = ::std::option::Option::None;
static mut FILE_PROTO: ::std::option::Option<[::protrust::descriptor::FileDescriptorProto; 1]> = ::std::option::Option::None;
static mut FILE_DESCRIPTOR: ::std::option::Option<&'static ::protrust::reflect::FileDescriptor> = ::std::option::Option::None;
static mut FILE_DEPS: ::std::option::Option<[&'static ::protrust::reflect::DescriptorPool<'static>; 6]> = ::std::option::Option::None;

fn file_once_init() {
    unsafe {
        FILE_PROTO = ::std::option::Option::Some([::protrust::LiteMessage::read_new(&mut [
            10, 26, 116, 101, 115, 116, 95, 109, 101, 115, 115, 97, 103, 101, 115, 95, 112, 114, 111, 116, 
            111, 51, 46, 112, 114, 111, 116, 111, 18, 29, 112, 114, 111, 116, 111, 98, 117, 102, 95, 116, 
            101, 115, 116, 95, 109, 101, 115, 115, 97, 103, 101, 115, 46, 112, 114, 111, 116, 111, 51, 26, 
            25, 103, 111, 111, 103, 108, 101, 47, 112, 114, 111, 116, 111, 98, 117, 102, 47, 97, 110, 121, 
            46, 112, 114, 111, 116, 111, 26, 30, 103, 111, 111, 103, 108, 101, 47, 112, 114, 111, 116, 111, 
            98, 117, 102, 47, 100, 117, 114, 97, 116, 105, 111, 110, 46, 112, 114, 111, 116, 111, 26, 32, 
            103, 111, 111, 103, 108, 101, 47, 112, 114, 111, 116, 111, 98, 117, 102, 47, 102, 105, 101, 108, 
            100, 95, 109, 97, 115, 107, 46, 112, 114, 111, 116, 111, 26, 28, 103, 111, 111, 103, 108, 101, 
            47, 112, 114, 111, 116, 111, 98, 117, 102, 47, 115, 116, 114, 117, 99, 116, 46, 112, 114, 111, 
            116, 111, 26, 31, 103, 111, 111, 103, 108, 101, 47, 112, 114, 111, 116, 111, 98, 117, 102, 47, 
            116, 105, 109, 101, 115, 116, 97, 109, 112, 46, 112, 114, 111, 116, 111, 26, 30, 103, 111, 111, 
            103, 108, 101, 47, 112, 114, 111, 116, 111, 98, 117, 102, 47, 119, 114, 97, 112, 112, 101, 114, 
            115, 46, 112, 114, 111, 116, 111, 34, 219, 78, 10, 18, 84, 101, 115, 116, 65, 108, 108, 84, 
            121, 112, 101, 115, 80, 114, 111, 116, 111, 51, 18, 37, 10, 14, 111, 112, 116, 105, 111, 110, 
            97, 108, 95, 105, 110, 116, 51, 50, 24, 1, 32, 1, 40, 5, 82, 13, 111, 112, 116, 105, 
            111, 110, 97, 108, 73, 110, 116, 51, 50, 18, 37, 10, 14, 111, 112, 116, 105, 111, 110, 97, 
            108, 95, 105, 110, 116, 54, 52, 24, 2, 32, 1, 40, 3, 82, 13, 111, 112, 116, 105, 111, 
            110, 97, 108, 73, 110, 116, 54, 52, 18, 39, 10, 15, 111, 112, 116, 105, 111, 110, 97, 108, 
            95, 117, 105, 110, 116, 51, 50, 24, 3, 32, 1, 40, 13, 82, 14, 111, 112, 116, 105, 111, 
            110, 97, 108, 85, 105, 110, 116, 51, 50, 18, 39, 10, 15, 111, 112, 116, 105, 111, 110, 97, 
            108, 95, 117, 105, 110, 116, 54, 52, 24, 4, 32, 1, 40, 4, 82, 14, 111, 112, 116, 105, 
            111, 110, 97, 108, 85, 105, 110, 116, 54, 52, 18, 39, 10, 15, 111, 112, 116, 105, 111, 110, 
            97, 108, 95, 115, 105, 110, 116, 51, 50, 24, 5, 32, 1, 40, 17, 82, 14, 111, 112, 116, 
            105, 111, 110, 97, 108, 83, 105, 110, 116, 51, 50, 18, 39, 10, 15, 111, 112, 116, 105, 111, 
            110, 97, 108, 95, 115, 105, 110, 116, 54, 52, 24, 6, 32, 1, 40, 18, 82, 14, 111, 112, 
            116, 105, 111, 110, 97, 108, 83, 105, 110, 116, 54, 52, 18, 41, 10, 16, 111, 112, 116, 105, 
            111, 110, 97, 108, 95, 102, 105, 120, 101, 100, 51, 50, 24, 7, 32, 1, 40, 7, 82, 15, 
            111, 112, 116, 105, 111, 110, 97, 108, 70, 105, 120, 101, 100, 51, 50, 18, 41, 10, 16, 111, 
            112, 116, 105, 111, 110, 97, 108, 95, 102, 105, 120, 101, 100, 54, 52, 24, 8, 32, 1, 40, 
            6, 82, 15, 111, 112, 116, 105, 111, 110, 97, 108, 70, 105, 120, 101, 100, 54, 52, 18, 43, 
            10, 17, 111, 112, 116, 105, 111, 110, 97, 108, 95, 115, 102, 105, 120, 101, 100, 51, 50, 24, 
            9, 32, 1, 40, 15, 82, 16, 111, 112, 116, 105, 111, 110, 97, 108, 83, 102, 105, 120, 101, 
            100, 51, 50, 18, 43, 10, 17, 111, 112, 116, 105, 111, 110, 97, 108, 95, 115, 102, 105, 120, 
            101, 100, 54, 52, 24, 10, 32, 1, 40, 16, 82, 16, 111, 112, 116, 105, 111, 110, 97, 108, 
            83, 102, 105, 120, 101, 100, 54, 52, 18, 37, 10, 14, 111, 112, 116, 105, 111, 110, 97, 108, 
            95, 102, 108, 111, 97, 116, 24, 11, 32, 1, 40, 2, 82, 13, 111, 112, 116, 105, 111, 110, 
            97, 108, 70, 108, 111, 97, 116, 18, 39, 10, 15, 111, 112, 116, 105, 111, 110, 97, 108, 95, 
            100, 111, 117, 98, 108, 101, 24, 12, 32, 1, 40, 1, 82, 14, 111, 112, 116, 105, 111, 110, 
            97, 108, 68, 111, 117, 98, 108, 101, 18, 35, 10, 13, 111, 112, 116, 105, 111, 110, 97, 108, 
            95, 98, 111, 111, 108, 24, 13, 32, 1, 40, 8, 82, 12, 111, 112, 116, 105, 111, 110, 97, 
            108, 66, 111, 111, 108, 18, 39, 10, 15, 111, 112, 116, 105, 111, 110, 97, 108, 95, 115, 116, 
            114, 105, 110, 103, 24, 14, 32, 1, 40, 9, 82, 14, 111, 112, 116, 105, 111, 110, 97, 108, 
            83, 116, 114, 105, 110, 103, 18, 37, 10, 14, 111, 112, 116, 105, 111, 110, 97, 108, 95, 98, 
            121, 116, 101, 115, 24, 15, 32, 1, 40, 12, 82, 13, 111, 112, 116, 105, 111, 110, 97, 108, 
            66, 121, 116, 101, 115, 18, 119, 10, 23, 111, 112, 116, 105, 111, 110, 97, 108, 95, 110, 101, 
            115, 116, 101, 100, 95, 109, 101, 115, 115, 97, 103, 101, 24, 18, 32, 1, 40, 11, 50, 63, 
            46, 112, 114, 111, 116, 111, 98, 117, 102, 95, 116, 101, 115, 116, 95, 109, 101, 115, 115, 97, 
            103, 101, 115, 46, 112, 114, 111, 116, 111, 51, 46, 84, 101, 115, 116, 65, 108, 108, 84, 121, 
            112, 101, 115, 80, 114, 111, 116, 111, 51, 46, 78, 101, 115, 116, 101, 100, 77, 101, 115, 115, 
            97, 103, 101, 82, 21, 111, 112, 116, 105, 111, 110, 97, 108, 78, 101, 115, 116, 101, 100, 77, 
            101, 115, 115, 97, 103, 101, 18, 103, 10, 24, 111, 112, 116, 105, 111, 110, 97, 108, 95, 102, 
            111, 114, 101, 105, 103, 110, 95, 109, 101, 115, 115, 97, 103, 101, 24, 19, 32, 1, 40, 11, 
            50, 45, 46, 112, 114, 111, 116, 111, 98, 117, 102, 95, 116, 101, 115, 116, 95, 109, 101, 115, 
            115, 97, 103, 101, 115, 46, 112, 114, 111, 116, 111, 51, 46, 70, 111, 114, 101, 105, 103, 110, 
            77, 101, 115, 115, 97, 103, 101, 82, 22, 111, 112, 116, 105, 111, 110, 97, 108, 70, 111, 114, 
            101, 105, 103, 110, 77, 101, 115, 115, 97, 103, 101, 18, 110, 10, 20, 111, 112, 116, 105, 111, 
            110, 97, 108, 95, 110, 101, 115, 116, 101, 100, 95, 101, 110, 117, 109, 24, 21, 32, 1, 40, 
            14, 50, 60, 46, 112, 114, 111, 116, 111, 98, 117, 102, 95, 116, 101, 115, 116, 95, 109, 101, 
            115, 115, 97, 103, 101, 115, 46, 112, 114, 111, 116, 111, 51, 46, 84, 101, 115, 116, 65, 108, 
            108, 84, 121, 112, 101, 115, 80, 114, 111, 116, 111, 51, 46, 78, 101, 115, 116, 101, 100, 69, 
            110, 117, 109, 82, 18, 111, 112, 116, 105, 111, 110, 97, 108, 78, 101, 115, 116, 101, 100, 69, 
            110, 117, 109, 18, 94, 10, 21, 111, 112, 116, 105, 111, 110, 97, 108, 95, 102, 111, 114, 101, 
            105, 103, 110, 95, 101, 110, 117, 109, 24, 22, 32, 1, 40, 14, 50, 42, 46, 112, 114, 111, 
            116, 111, 98, 117, 102, 95, 116, 101, 115, 116, 95, 109, 101, 115, 115, 97, 103, 101, 115, 46, 
            112, 114, 111, 116, 111, 51, 46, 70, 111, 114, 101, 105, 103, 110, 69, 110, 117, 109, 82, 19, 
            111, 112, 116, 105, 111, 110, 97, 108, 70, 111, 114, 101, 105, 103, 110, 69, 110, 117, 109, 18, 
            113, 10, 21, 111, 112, 116, 105, 111, 110, 97, 108, 95, 97, 108, 105, 97, 115, 101, 100, 95, 
            101, 110, 117, 109, 24, 23, 32, 1, 40, 14, 50, 61, 46, 112, 114, 111, 116, 111, 98, 117, 
            102, 95, 116, 101, 115, 116, 95, 109, 101, 115, 115, 97, 103, 101, 115, 46, 112, 114, 111, 116, 
            111, 51, 46, 84, 101, 115, 116, 65, 108, 108, 84, 121, 112, 101, 115, 80, 114, 111, 116, 111, 
            51, 46, 65, 108, 105, 97, 115, 101, 100, 69, 110, 117, 109, 82, 19, 111, 112, 116, 105, 111, 
            110, 97, 108, 65, 108, 105, 97, 115, 101, 100, 69, 110, 117, 109, 18, 54, 10, 21, 111, 112, 
            116, 105, 111, 110, 97, 108, 95, 115, 116, 114, 105, 110, 103, 95, 112, 105, 101, 99, 101, 24, 
            24, 32, 1, 40, 9, 82, 19, 111, 112, 116, 105, 111, 110, 97, 108, 83, 116, 114, 105, 110, 
            103, 80, 105, 101, 99, 101, 66, 2, 8, 2, 18, 39, 10, 13, 111, 112, 116, 105, 111, 110, 
            97, 108, 95, 99, 111, 114, 100, 24, 25, 32, 1, 40, 9, 82, 12, 111, 112, 116, 105, 111, 
            110, 97, 108, 67, 111, 114, 100, 66, 2, 8, 1, 18, 94, 10, 17, 114, 101, 99, 117, 114, 
            115, 105, 118, 101, 95, 109, 101, 115, 115, 97, 103, 101, 24, 27, 32, 1, 40, 11, 50, 49, 
            46, 112, 114, 111, 116, 111, 98, 117, 102, 95, 116, 101, 115, 116, 95, 109, 101, 115, 115, 97, 
            103, 101, 115, 46, 112, 114, 111, 116, 111, 51, 46, 84, 101, 115, 116, 65, 108, 108, 84, 121, 
            112, 101, 115, 80, 114, 111, 116, 111, 51, 82, 16, 114, 101, 99, 117, 114, 115, 105, 118, 101, 
            77, 101, 115, 115, 97, 103, 101, 18, 37, 10, 14, 114, 101, 112, 101, 97, 116, 101, 100, 95, 
            105, 110, 116, 51, 50, 24, 31, 32, 3, 40, 5, 82, 13, 114, 101, 112, 101, 97, 116, 101, 
            100, 73, 110, 116, 51, 50, 18, 37, 10, 14, 114, 101, 112, 101, 97, 116, 101, 100, 95, 105, 
            110, 116, 54, 52, 24, 32, 32, 3, 40, 3, 82, 13, 114, 101, 112, 101, 97, 116, 101, 100, 
            73, 110, 116, 54, 52, 18, 39, 10, 15, 114, 101, 112, 101, 97, 116, 101, 100, 95, 117, 105, 
            110, 116, 51, 50, 24, 33, 32, 3, 40, 13, 82, 14, 114, 101, 112, 101, 97, 116, 101, 100, 
            85, 105, 110, 116, 51, 50, 18, 39, 10, 15, 114, 101, 112, 101, 97, 116, 101, 100, 95, 117, 
            105, 110, 116, 54, 52, 24, 34, 32, 3, 40, 4, 82, 14, 114, 101, 112, 101, 97, 116, 101, 
            100, 85, 105, 110, 116, 54, 52, 18, 39, 10, 15, 114, 101, 112, 101, 97, 116, 101, 100, 95, 
            115, 105, 110, 116, 51, 50, 24, 35, 32, 3, 40, 17, 82, 14, 114, 101, 112, 101, 97, 116, 
            101, 100, 83, 105, 110, 116, 51, 50, 18, 39, 10, 15, 114, 101, 112, 101, 97, 116, 101, 100, 
            95, 115, 105, 110, 116, 54, 52, 24, 36, 32, 3, 40, 18, 82, 14, 114, 101, 112, 101, 97, 
            116, 101, 100, 83, 105, 110, 116, 54, 52, 18, 41, 10, 16, 114, 101, 112, 101, 97, 116, 101, 
            100, 95, 102, 105, 120, 101, 100, 51, 50, 24, 37, 32, 3, 40, 7, 82, 15, 114, 101, 112, 
            101, 97, 116, 101, 100, 70, 105, 120, 101, 100, 51, 50, 18, 41, 10, 16, 114, 101, 112, 101, 
            97, 116, 101, 100, 95, 102, 105, 120, 101, 100, 54, 52, 24, 38, 32, 3, 40, 6, 82, 15, 
            114, 101, 112, 101, 97, 116, 101, 100, 70, 105, 120, 101, 100, 54, 52, 18, 43, 10, 17, 114, 
            101, 112, 101, 97, 116, 101, 100, 95, 115, 102, 105, 120, 101, 100, 51, 50, 24, 39, 32, 3, 
            40, 15, 82, 16, 114, 101, 112, 101, 97, 116, 101, 100, 83, 102, 105, 120, 101, 100, 51, 50, 
            18, 43, 10, 17, 114, 101, 112, 101, 97, 116, 101, 100, 95, 115, 102, 105, 120, 101, 100, 54, 
            52, 24, 40, 32, 3, 40, 16, 82, 16, 114, 101, 112, 101, 97, 116, 101, 100, 83, 102, 105, 
            120, 101, 100, 54, 52, 18, 37, 10, 14, 114, 101, 112, 101, 97, 116, 101, 100, 95, 102, 108, 
            111, 97, 116, 24, 41, 32, 3, 40, 2, 82, 13, 114, 101, 112, 101, 97, 116, 101, 100, 70, 
            108, 111, 97, 116, 18, 39, 10, 15, 114, 101, 112, 101, 97, 116, 101, 100, 95, 100, 111, 117, 
            98, 108, 101, 24, 42, 32, 3, 40, 1, 82, 14, 114, 101, 112, 101, 97, 116, 101, 100, 68, 
            111, 117, 98, 108, 101, 18, 35, 10, 13, 114, 101, 112, 101, 97, 116, 101, 100, 95, 98, 111, 
            111, 108, 24, 43, 32, 3, 40, 8, 82, 12, 114, 101, 112, 101, 97, 116, 101, 100, 66, 111, 
            111, 108, 18, 39, 10, 15, 114, 101, 112, 101, 97, 116, 101, 100, 95, 115, 116, 114, 105, 110, 
            103, 24, 44, 32, 3, 40, 9, 82, 14, 114, 101, 112, 101, 97, 116, 101, 100, 83, 116, 114, 
            105, 110, 103, 18, 37, 10, 14, 114, 101, 112, 101, 97, 116, 101, 100, 95, 98, 121, 116, 101, 
            115, 24, 45, 32, 3, 40, 12, 82, 13, 114, 101, 112, 101, 97, 116, 101, 100, 66, 121, 116, 
            101, 115, 18, 119, 10, 23, 114, 101, 112, 101, 97, 116, 101, 100, 95, 110, 101, 115, 116, 101, 
            100, 95, 109, 101, 115, 115, 97, 103, 101, 24, 48, 32, 3, 40, 11, 50, 63, 46, 112, 114, 
            111, 116, 111, 98, 117, 102, 95, 116, 101, 115, 116, 95, 109, 101, 115, 115, 97, 103, 101, 115, 
            46, 112, 114, 111, 116, 111, 51, 46, 84, 101, 115, 116, 65, 108, 108, 84, 121, 112, 101, 115, 
            80, 114, 111, 116, 111, 51, 46, 78, 101, 115, 116, 101, 100, 77, 101, 115, 115, 97, 103, 101, 
            82, 21, 114, 101, 112, 101, 97, 116, 101, 100, 78, 101, 115, 116, 101, 100, 77, 101, 115, 115, 
            97, 103, 101, 18, 103, 10, 24, 114, 101, 112, 101, 97, 116, 101, 100, 95, 102, 111, 114, 101, 
            105, 103, 110, 95, 109, 101, 115, 115, 97, 103, 101, 24, 49, 32, 3, 40, 11, 50, 45, 46, 
            112, 114, 111, 116, 111, 98, 117, 102, 95, 116, 101, 115, 116, 95, 109, 101, 115, 115, 97, 103, 
            101, 115, 46, 112, 114, 111, 116, 111, 51, 46, 70, 111, 114, 101, 105, 103, 110, 77, 101, 115, 
            115, 97, 103, 101, 82, 22, 114, 101, 112, 101, 97, 116, 101, 100, 70, 111, 114, 101, 105, 103, 
            110, 77, 101, 115, 115, 97, 103, 101, 18, 110, 10, 20, 114, 101, 112, 101, 97, 116, 101, 100, 
            95, 110, 101, 115, 116, 101, 100, 95, 101, 110, 117, 109, 24, 51, 32, 3, 40, 14, 50, 60, 
            46, 112, 114, 111, 116, 111, 98, 117, 102, 95, 116, 101, 115, 116, 95, 109, 101, 115, 115, 97, 
            103, 101, 115, 46, 112, 114, 111, 116, 111, 51, 46, 84, 101, 115, 116, 65, 108, 108, 84, 121, 
            112, 101, 115, 80, 114, 111, 116, 111, 51, 46, 78, 101, 115, 116, 101, 100, 69, 110, 117, 109, 
            82, 18, 114, 101, 112, 101, 97, 116, 101, 100, 78, 101, 115, 116, 101, 100, 69, 110, 117, 109, 
            18, 94, 10, 21, 114, 101, 112, 101, 97, 116, 101, 100, 95, 102, 111, 114, 101, 105, 103, 110, 
            95, 101, 110, 117, 109, 24, 52, 32, 3, 40, 14, 50, 42, 46, 112, 114, 111, 116, 111, 98, 
            117, 102, 95, 116, 101, 115, 116, 95, 109, 101, 115, 115, 97, 103, 101, 115, 46, 112, 114, 111, 
            116, 111, 51, 46, 70, 111, 114, 101, 105, 103, 110, 69, 110, 117, 109, 82, 19, 114, 101, 112, 
            101, 97, 116, 101, 100, 70, 111, 114, 101, 105, 103, 110, 69, 110, 117, 109, 18, 54, 10, 21, 
            114, 101, 112, 101, 97, 116, 101, 100, 95, 115, 116, 114, 105, 110, 103, 95, 112, 105, 101, 99, 
            101, 24, 54, 32, 3, 40, 9, 82, 19, 114, 101, 112, 101, 97, 116, 101, 100, 83, 116, 114, 
            105, 110, 103, 80, 105, 101, 99, 101, 66, 2, 8, 2, 18, 39, 10, 13, 114, 101, 112, 101, 
            97, 116, 101, 100, 95, 99, 111, 114, 100, 24, 55, 32, 3, 40, 9, 82, 12, 114, 101, 112, 
            101, 97, 116, 101, 100, 67, 111, 114, 100, 66, 2, 8, 1, 18, 108, 10, 15, 109, 97, 112, 
            95, 105, 110, 116, 51, 50, 95, 105, 110, 116, 51, 50, 24, 56, 32, 3, 40, 11, 50, 68, 
            46, 112, 114, 111, 116, 111, 98, 117, 102, 95, 116, 101, 115, 116, 95, 109, 101, 115, 115, 97, 
            103, 101, 115, 46, 112, 114, 111, 116, 111, 51, 46, 84, 101, 115, 116, 65, 108, 108, 84, 121, 
            112, 101, 115, 80, 114, 111, 116, 111, 51, 46, 77, 97, 112, 73, 110, 116, 51, 50, 73, 110, 
            116, 51, 50, 69, 110, 116, 114, 121, 82, 13, 109, 97, 112, 73, 110, 116, 51, 50, 73, 110, 
            116, 51, 50, 18, 108, 10, 15, 109, 97, 112, 95, 105, 110, 116, 54, 52, 95, 105, 110, 116, 
            54, 52, 24, 57, 32, 3, 40, 11, 50, 68, 46, 112, 114, 111, 116, 111, 98, 117, 102, 95, 
            116, 101, 115, 116, 95, 109, 101, 115, 115, 97, 103, 101, 115, 46, 112, 114, 111, 116, 111, 51, 
            46, 84, 101, 115, 116, 65, 108, 108, 84, 121, 112, 101, 115, 80, 114, 111, 116, 111, 51, 46, 
            77, 97, 112, 73, 110, 116, 54, 52, 73, 110, 116, 54, 52, 69, 110, 116, 114, 121, 82, 13, 
            109, 97, 112, 73, 110, 116, 54, 52, 73, 110, 116, 54, 52, 18, 114, 10, 17, 109, 97, 112, 
            95, 117, 105, 110, 116, 51, 50, 95, 117, 105, 110, 116, 51, 50, 24, 58, 32, 3, 40, 11, 
            50, 70, 46, 112, 114, 111, 116, 111, 98, 117, 102, 95, 116, 101, 115, 116, 95, 109, 101, 115, 
            115, 97, 103, 101, 115, 46, 112, 114, 111, 116, 111, 51, 46, 84, 101, 115, 116, 65, 108, 108, 
            84, 121, 112, 101, 115, 80, 114, 111, 116, 111, 51, 46, 77, 97, 112, 85, 105, 110, 116, 51, 
            50, 85, 105, 110, 116, 51, 50, 69, 110, 116, 114, 121, 82, 15, 109, 97, 112, 85, 105, 110, 
            116, 51, 50, 85, 105, 110, 116, 51, 50, 18, 114, 10, 17, 109, 97, 112, 95, 117, 105, 110, 
            116, 54, 52, 95, 117, 105, 110, 116, 54, 52, 24, 59, 32, 3, 40, 11, 50, 70, 46, 112, 
            114, 111, 116, 111, 98, 117, 102, 95, 116, 101, 115, 116, 95, 109, 101, 115, 115, 97, 103, 101, 
            115, 46, 112, 114, 111, 116, 111, 51, 46, 84, 101, 115, 116, 65, 108, 108, 84, 121, 112, 101, 
            115, 80, 114, 111, 116, 111, 51, 46, 77, 97, 112, 85, 105, 110, 116, 54, 52, 85, 105, 110, 
            116, 54, 52, 69, 110, 116, 114, 121, 82, 15, 109, 97, 112, 85, 105, 110, 116, 54, 52, 85, 
            105, 110, 116, 54, 52, 18, 114, 10, 17, 109, 97, 112, 95, 115, 105, 110, 116, 51, 50, 95, 
            115, 105, 110, 116, 51, 50, 24, 60, 32, 3, 40, 11, 50, 70, 46, 112, 114, 111, 116, 111, 
            98, 117, 102, 95, 116, 101, 115, 116, 95, 109, 101, 115, 115, 97, 103, 101, 115, 46, 112, 114, 
            111, 116, 111, 51, 46, 84, 101, 115, 116, 65, 108, 108, 84, 121, 112, 101, 115, 80, 114, 111, 
            116, 111, 51, 46, 77, 97, 112, 83, 105, 110, 116, 51, 50, 83, 105, 110, 116, 51, 50, 69, 
            110, 116, 114, 121, 82, 15, 109, 97, 112, 83, 105, 110, 116, 51, 50, 83, 105, 110, 116, 51, 
            50, 18, 114, 10, 17, 109, 97, 112, 95, 115, 105, 110, 116, 54, 52, 95, 115, 105, 110, 116, 
            54, 52, 24, 61, 32, 3, 40, 11, 50, 70, 46, 112, 114, 111, 116, 111, 98, 117, 102, 95, 
            116, 101, 115, 116, 95, 109, 101, 115, 115, 97, 103, 101, 115, 46, 112, 114, 111, 116, 111, 51, 
            46, 84, 101, 115, 116, 65, 108, 108, 84, 121, 112, 101, 115, 80, 114, 111, 116, 111, 51, 46, 
            77, 97, 112, 83, 105, 110, 116, 54, 52, 83, 105, 110, 116, 54, 52, 69, 110, 116, 114, 121, 
            82, 15, 109, 97, 112, 83, 105, 110, 116, 54, 52, 83, 105, 110, 116, 54, 52, 18, 120, 10, 
            19, 109, 97, 112, 95, 102, 105, 120, 101, 100, 51, 50, 95, 102, 105, 120, 101, 100, 51, 50, 
            24, 62, 32, 3, 40, 11, 50, 72, 46, 112, 114, 111, 116, 111, 98, 117, 102, 95, 116, 101, 
            115, 116, 95, 109, 101, 115, 115, 97, 103, 101, 115, 46, 112, 114, 111, 116, 111, 51, 46, 84, 
            101, 115, 116, 65, 108, 108, 84, 121, 112, 101, 115, 80, 114, 111, 116, 111, 51, 46, 77, 97, 
            112, 70, 105, 120, 101, 100, 51, 50, 70, 105, 120, 101, 100, 51, 50, 69, 110, 116, 114, 121, 
            82, 17, 109, 97, 112, 70, 105, 120, 101, 100, 51, 50, 70, 105, 120, 101, 100, 51, 50, 18, 
            120, 10, 19, 109, 97, 112, 95, 102, 105, 120, 101, 100, 54, 52, 95, 102, 105, 120, 101, 100, 
            54, 52, 24, 63, 32, 3, 40, 11, 50, 72, 46, 112, 114, 111, 116, 111, 98, 117, 102, 95, 
            116, 101, 115, 116, 95, 109, 101, 115, 115, 97, 103, 101, 115, 46, 112, 114, 111, 116, 111, 51, 
            46, 84, 101, 115, 116, 65, 108, 108, 84, 121, 112, 101, 115, 80, 114, 111, 116, 111, 51, 46, 
            77, 97, 112, 70, 105, 120, 101, 100, 54, 52, 70, 105, 120, 101, 100, 54, 52, 69, 110, 116, 
            114, 121, 82, 17, 109, 97, 112, 70, 105, 120, 101, 100, 54, 52, 70, 105, 120, 101, 100, 54, 
            52, 18, 126, 10, 21, 109, 97, 112, 95, 115, 102, 105, 120, 101, 100, 51, 50, 95, 115, 102, 
            105, 120, 101, 100, 51, 50, 24, 64, 32, 3, 40, 11, 50, 74, 46, 112, 114, 111, 116, 111, 
            98, 117, 102, 95, 116, 101, 115, 116, 95, 109, 101, 115, 115, 97, 103, 101, 115, 46, 112, 114, 
            111, 116, 111, 51, 46, 84, 101, 115, 116, 65, 108, 108, 84, 121, 112, 101, 115, 80, 114, 111, 
            116, 111, 51, 46, 77, 97, 112, 83, 102, 105, 120, 101, 100, 51, 50, 83, 102, 105, 120, 101, 
            100, 51, 50, 69, 110, 116, 114, 121, 82, 19, 109, 97, 112, 83, 102, 105, 120, 101, 100, 51, 
            50, 83, 102, 105, 120, 101, 100, 51, 50, 18, 126, 10, 21, 109, 97, 112, 95, 115, 102, 105, 
            120, 101, 100, 54, 52, 95, 115, 102, 105, 120, 101, 100, 54, 52, 24, 65, 32, 3, 40, 11, 
            50, 74, 46, 112, 114, 111, 116, 111, 98, 117, 102, 95, 116, 101, 115, 116, 95, 109, 101, 115, 
            115, 97, 103, 101, 115, 46, 112, 114, 111, 116, 111, 51, 46, 84, 101, 115, 116, 65, 108, 108, 
            84, 121, 112, 101, 115, 80, 114, 111, 116, 111, 51, 46, 77, 97, 112, 83, 102, 105, 120, 101, 
            100, 54, 52, 83, 102, 105, 120, 101, 100, 54, 52, 69, 110, 116, 114, 121, 82, 19, 109, 97, 
            112, 83, 102, 105, 120, 101, 100, 54, 52, 83, 102, 105, 120, 101, 100, 54, 52, 18, 108, 10, 
            15, 109, 97, 112, 95, 105, 110, 116, 51, 50, 95, 102, 108, 111, 97, 116, 24, 66, 32, 3, 
            40, 11, 50, 68, 46, 112, 114, 111, 116, 111, 98, 117, 102, 95, 116, 101, 115, 116, 95, 109, 
            101, 115, 115, 97, 103, 101, 115, 46, 112, 114, 111, 116, 111, 51, 46, 84, 101, 115, 116, 65, 
            108, 108, 84, 121, 112, 101, 115, 80, 114, 111, 116, 111, 51, 46, 77, 97, 112, 73, 110, 116, 
            51, 50, 70, 108, 111, 97, 116, 69, 110, 116, 114, 121, 82, 13, 109, 97, 112, 73, 110, 116, 
            51, 50, 70, 108, 111, 97, 116, 18, 111, 10, 16, 109, 97, 112, 95, 105, 110, 116, 51, 50, 
            95, 100, 111, 117, 98, 108, 101, 24, 67, 32, 3, 40, 11, 50, 69, 46, 112, 114, 111, 116, 
            111, 98, 117, 102, 95, 116, 101, 115, 116, 95, 109, 101, 115, 115, 97, 103, 101, 115, 46, 112, 
            114, 111, 116, 111, 51, 46, 84, 101, 115, 116, 65, 108, 108, 84, 121, 112, 101, 115, 80, 114, 
            111, 116, 111, 51, 46, 77, 97, 112, 73, 110, 116, 51, 50, 68, 111, 117, 98, 108, 101, 69, 
            110, 116, 114, 121, 82, 14, 109, 97, 112, 73, 110, 116, 51, 50, 68, 111, 117, 98, 108, 101, 
            18, 102, 10, 13, 109, 97, 112, 95, 98, 111, 111, 108, 95, 98, 111, 111, 108, 24, 68, 32, 
            3, 40, 11, 50, 66, 46, 112, 114, 111, 116, 111, 98, 117, 102, 95, 116, 101, 115, 116, 95, 
            109, 101, 115, 115, 97, 103, 101, 115, 46, 112, 114, 111, 116, 111, 51, 46, 84, 101, 115, 116, 
            65, 108, 108, 84, 121, 112, 101, 115, 80, 114, 111, 116, 111, 51, 46, 77, 97, 112, 66, 111, 
            111, 108, 66, 111, 111, 108, 69, 110, 116, 114, 121, 82, 11, 109, 97, 112, 66, 111, 111, 108, 
            66, 111, 111, 108, 18, 114, 10, 17, 109, 97, 112, 95, 115, 116, 114, 105, 110, 103, 95, 115, 
            116, 114, 105, 110, 103, 24, 69, 32, 3, 40, 11, 50, 70, 46, 112, 114, 111, 116, 111, 98, 
            117, 102, 95, 116, 101, 115, 116, 95, 109, 101, 115, 115, 97, 103, 101, 115, 46, 112, 114, 111, 
            116, 111, 51, 46, 84, 101, 115, 116, 65, 108, 108, 84, 121, 112, 101, 115, 80, 114, 111, 116, 
            111, 51, 46, 77, 97, 112, 83, 116, 114, 105, 110, 103, 83, 116, 114, 105, 110, 103, 69, 110, 
            116, 114, 121, 82, 15, 109, 97, 112, 83, 116, 114, 105, 110, 103, 83, 116, 114, 105, 110, 103, 
            18, 111, 10, 16, 109, 97, 112, 95, 115, 116, 114, 105, 110, 103, 95, 98, 121, 116, 101, 115, 
            24, 70, 32, 3, 40, 11, 50, 69, 46, 112, 114, 111, 116, 111, 98, 117, 102, 95, 116, 101, 
            115, 116, 95, 109, 101, 115, 115, 97, 103, 101, 115, 46, 112, 114, 111, 116, 111, 51, 46, 84, 
            101, 115, 116, 65, 108, 108, 84, 121, 112, 101, 115, 80, 114, 111, 116, 111, 51, 46, 77, 97, 
            112, 83, 116, 114, 105, 110, 103, 66, 121, 116, 101, 115, 69, 110, 116, 114, 121, 82, 14, 109, 
            97, 112, 83, 116, 114, 105, 110, 103, 66, 121, 116, 101, 115, 18, 136, 1, 10, 25, 109, 97, 
            112, 95, 115, 116, 114, 105, 110, 103, 95, 110, 101, 115, 116, 101, 100, 95, 109, 101, 115, 115, 
            97, 103, 101, 24, 71, 32, 3, 40, 11, 50, 77, 46, 112, 114, 111, 116, 111, 98, 117, 102, 
            95, 116, 101, 115, 116, 95, 109, 101, 115, 115, 97, 103, 101, 115, 46, 112, 114, 111, 116, 111, 
            51, 46, 84, 101, 115, 116, 65, 108, 108, 84, 121, 112, 101, 115, 80, 114, 111, 116, 111, 51, 
            46, 77, 97, 112, 83, 116, 114, 105, 110, 103, 78, 101, 115, 116, 101, 100, 77, 101, 115, 115, 
            97, 103, 101, 69, 110, 116, 114, 121, 82, 22, 109, 97, 112, 83, 116, 114, 105, 110, 103, 78, 
            101, 115, 116, 101, 100, 77, 101, 115, 115, 97, 103, 101, 18, 139, 1, 10, 26, 109, 97, 112, 
            95, 115, 116, 114, 105, 110, 103, 95, 102, 111, 114, 101, 105, 103, 110, 95, 109, 101, 115, 115, 
            97, 103, 101, 24, 72, 32, 3, 40, 11, 50, 78, 46, 112, 114, 111, 116, 111, 98, 117, 102, 
            95, 116, 101, 115, 116, 95, 109, 101, 115, 115, 97, 103, 101, 115, 46, 112, 114, 111, 116, 111, 
            51, 46, 84, 101, 115, 116, 65, 108, 108, 84, 121, 112, 101, 115, 80, 114, 111, 116, 111, 51, 
            46, 77, 97, 112, 83, 116, 114, 105, 110, 103, 70, 111, 114, 101, 105, 103, 110, 77, 101, 115, 
            115, 97, 103, 101, 69, 110, 116, 114, 121, 82, 23, 109, 97, 112, 83, 116, 114, 105, 110, 103, 
            70, 111, 114, 101, 105, 103, 110, 77, 101, 115, 115, 97, 103, 101, 18, 127, 10, 22, 109, 97, 
            112, 95, 115, 116, 114, 105, 110, 103, 95, 110, 101, 115, 116, 101, 100, 95, 101, 110, 117, 109, 
            24, 73, 32, 3, 40, 11, 50, 74, 46, 112, 114, 111, 116, 111, 98, 117, 102, 95, 116, 101, 
            115, 116, 95, 109, 101, 115, 115, 97, 103, 101, 115, 46, 112, 114, 111, 116, 111, 51, 46, 84, 
            101, 115, 116, 65, 108, 108, 84, 121, 112, 101, 115, 80, 114, 111, 116, 111, 51, 46, 77, 97, 
            112, 83, 116, 114, 105, 110, 103, 78, 101, 115, 116, 101, 100, 69, 110, 117, 109, 69, 110, 116, 
            114, 121, 82, 19, 109, 97, 112, 83, 116, 114, 105, 110, 103, 78, 101, 115, 116, 101, 100, 69, 
            110, 117, 109, 18, 130, 1, 10, 23, 109, 97, 112, 95, 115, 116, 114, 105, 110, 103, 95, 102, 
            111, 114, 101, 105, 103, 110, 95, 101, 110, 117, 109, 24, 74, 32, 3, 40, 11, 50, 75, 46, 
            112, 114, 111, 116, 111, 98, 117, 102, 95, 116, 101, 115, 116, 95, 109, 101, 115, 115, 97, 103, 
            101, 115, 46, 112, 114, 111, 116, 111, 51, 46, 84, 101, 115, 116, 65, 108, 108, 84, 121, 112, 
            101, 115, 80, 114, 111, 116, 111, 51, 46, 77, 97, 112, 83, 116, 114, 105, 110, 103, 70, 111, 
            114, 101, 105, 103, 110, 69, 110, 117, 109, 69, 110, 116, 114, 121, 82, 20, 109, 97, 112, 83, 
            116, 114, 105, 110, 103, 70, 111, 114, 101, 105, 103, 110, 69, 110, 117, 109, 18, 33, 10, 12, 
            111, 110, 101, 111, 102, 95, 117, 105, 110, 116, 51, 50, 24, 111, 32, 1, 40, 13, 82, 11, 
            111, 110, 101, 111, 102, 85, 105, 110, 116, 51, 50, 18, 113, 10, 20, 111, 110, 101, 111, 102, 
            95, 110, 101, 115, 116, 101, 100, 95, 109, 101, 115, 115, 97, 103, 101, 24, 112, 32, 1, 40, 
            11, 50, 63, 46, 112, 114, 111, 116, 111, 98, 117, 102, 95, 116, 101, 115, 116, 95, 109, 101, 
            115, 115, 97, 103, 101, 115, 46, 112, 114, 111, 116, 111, 51, 46, 84, 101, 115, 116, 65, 108, 
            108, 84, 121, 112, 101, 115, 80, 114, 111, 116, 111, 51, 46, 78, 101, 115, 116, 101, 100, 77, 
            101, 115, 115, 97, 103, 101, 82, 18, 111, 110, 101, 111, 102, 78, 101, 115, 116, 101, 100, 77, 
            101, 115, 115, 97, 103, 101, 18, 33, 10, 12, 111, 110, 101, 111, 102, 95, 115, 116, 114, 105, 
            110, 103, 24, 113, 32, 1, 40, 9, 82, 11, 111, 110, 101, 111, 102, 83, 116, 114, 105, 110, 
            103, 18, 31, 10, 11, 111, 110, 101, 111, 102, 95, 98, 121, 116, 101, 115, 24, 114, 32, 1, 
            40, 12, 82, 10, 111, 110, 101, 111, 102, 66, 121, 116, 101, 115, 18, 29, 10, 10, 111, 110, 
            101, 111, 102, 95, 98, 111, 111, 108, 24, 115, 32, 1, 40, 8, 82, 9, 111, 110, 101, 111, 
            102, 66, 111, 111, 108, 18, 33, 10, 12, 111, 110, 101, 111, 102, 95, 117, 105, 110, 116, 54, 
            52, 24, 116, 32, 1, 40, 4, 82, 11, 111, 110, 101, 111, 102, 85, 105, 110, 116, 54, 52, 
            18, 31, 10, 11, 111, 110, 101, 111, 102, 95, 102, 108, 111, 97, 116, 24, 117, 32, 1, 40, 
            2, 82, 10, 111, 110, 101, 111, 102, 70, 108, 111, 97, 116, 18, 33, 10, 12, 111, 110, 101, 
            111, 102, 95, 100, 111, 117, 98, 108, 101, 24, 118, 32, 1, 40, 1, 82, 11, 111, 110, 101, 
            111, 102, 68, 111, 117, 98, 108, 101, 18, 91, 10, 10, 111, 110, 101, 111, 102, 95, 101, 110, 
            117, 109, 24, 119, 32, 1, 40, 14, 50, 60, 46, 112, 114, 111, 116, 111, 98, 117, 102, 95, 
            116, 101, 115, 116, 95, 109, 101, 115, 115, 97, 103, 101, 115, 46, 112, 114, 111, 116, 111, 51, 
            46, 84, 101, 115, 116, 65, 108, 108, 84, 121, 112, 101, 115, 80, 114, 111, 116, 111, 51, 46, 
            78, 101, 115, 116, 101, 100, 69, 110, 117, 109, 82, 9, 111, 110, 101, 111, 102, 69, 110, 117, 
            109, 18, 79, 10, 21, 111, 112, 116, 105, 111, 110, 97, 108, 95, 98, 111, 111, 108, 95, 119, 
            114, 97, 112, 112, 101, 114, 24, 201, 1, 32, 1, 40, 11, 50, 26, 46, 103, 111, 111, 103, 
            108, 101, 46, 112, 114, 111, 116, 111, 98, 117, 102, 46, 66, 111, 111, 108, 86, 97, 108, 117, 
            101, 82, 19, 111, 112, 116, 105, 111, 110, 97, 108, 66, 111, 111, 108, 87, 114, 97, 112, 112, 
            101, 114, 18, 82, 10, 22, 111, 112, 116, 105, 111, 110, 97, 108, 95, 105, 110, 116, 51, 50, 
            95, 119, 114, 97, 112, 112, 101, 114, 24, 202, 1, 32, 1, 40, 11, 50, 27, 46, 103, 111, 
            111, 103, 108, 101, 46, 112, 114, 111, 116, 111, 98, 117, 102, 46, 73, 110, 116, 51, 50, 86, 
            97, 108, 117, 101, 82, 20, 111, 112, 116, 105, 111, 110, 97, 108, 73, 110, 116, 51, 50, 87, 
            114, 97, 112, 112, 101, 114, 18, 82, 10, 22, 111, 112, 116, 105, 111, 110, 97, 108, 95, 105, 
            110, 116, 54, 52, 95, 119, 114, 97, 112, 112, 101, 114, 24, 203, 1, 32, 1, 40, 11, 50, 
            27, 46, 103, 111, 111, 103, 108, 101, 46, 112, 114, 111, 116, 111, 98, 117, 102, 46, 73, 110, 
            116, 54, 52, 86, 97, 108, 117, 101, 82, 20, 111, 112, 116, 105, 111, 110, 97, 108, 73, 110, 
            116, 54, 52, 87, 114, 97, 112, 112, 101, 114, 18, 85, 10, 23, 111, 112, 116, 105, 111, 110, 
            97, 108, 95, 117, 105, 110, 116, 51, 50, 95, 119, 114, 97, 112, 112, 101, 114, 24, 204, 1, 
            32, 1, 40, 11, 50, 28, 46, 103, 111, 111, 103, 108, 101, 46, 112, 114, 111, 116, 111, 98, 
            117, 102, 46, 85, 73, 110, 116, 51, 50, 86, 97, 108, 117, 101, 82, 21, 111, 112, 116, 105, 
            111, 110, 97, 108, 85, 105, 110, 116, 51, 50, 87, 114, 97, 112, 112, 101, 114, 18, 85, 10, 
            23, 111, 112, 116, 105, 111, 110, 97, 108, 95, 117, 105, 110, 116, 54, 52, 95, 119, 114, 97, 
            112, 112, 101, 114, 24, 205, 1, 32, 1, 40, 11, 50, 28, 46, 103, 111, 111, 103, 108, 101, 
            46, 112, 114, 111, 116, 111, 98, 117, 102, 46, 85, 73, 110, 116, 54, 52, 86, 97, 108, 117, 
            101, 82, 21, 111, 112, 116, 105, 111, 110, 97, 108, 85, 105, 110, 116, 54, 52, 87, 114, 97, 
            112, 112, 101, 114, 18, 82, 10, 22, 111, 112, 116, 105, 111, 110, 97, 108, 95, 102, 108, 111, 
            97, 116, 95, 119, 114, 97, 112, 112, 101, 114, 24, 206, 1, 32, 1, 40, 11, 50, 27, 46, 
            103, 111, 111, 103, 108, 101, 46, 112, 114, 111, 116, 111, 98, 117, 102, 46, 70, 108, 111, 97, 
            116, 86, 97, 108, 117, 101, 82, 20, 111, 112, 116, 105, 111, 110, 97, 108, 70, 108, 111, 97, 
            116, 87, 114, 97, 112, 112, 101, 114, 18, 85, 10, 23, 111, 112, 116, 105, 111, 110, 97, 108, 
            95, 100, 111, 117, 98, 108, 101, 95, 119, 114, 97, 112, 112, 101, 114, 24, 207, 1, 32, 1, 
            40, 11, 50, 28, 46, 103, 111, 111, 103, 108, 101, 46, 112, 114, 111, 116, 111, 98, 117, 102, 
            46, 68, 111, 117, 98, 108, 101, 86, 97, 108, 117, 101, 82, 21, 111, 112, 116, 105, 111, 110, 
            97, 108, 68, 111, 117, 98, 108, 101, 87, 114, 97, 112, 112, 101, 114, 18, 85, 10, 23, 111, 
            112, 116, 105, 111, 110, 97, 108, 95, 115, 116, 114, 105, 110, 103, 95, 119, 114, 97, 112, 112, 
            101, 114, 24, 208, 1, 32, 1, 40, 11, 50, 28, 46, 103, 111, 111, 103, 108, 101, 46, 112, 
            114, 111, 116, 111, 98, 117, 102, 46, 83, 116, 114, 105, 110, 103, 86, 97, 108, 117, 101, 82, 
            21, 111, 112, 116, 105, 111, 110, 97, 108, 83, 116, 114, 105, 110, 103, 87, 114, 97, 112, 112, 
            101, 114, 18, 82, 10, 22, 111, 112, 116, 105, 111, 110, 97, 108, 95, 98, 121, 116, 101, 115, 
            95, 119, 114, 97, 112, 112, 101, 114, 24, 209, 1, 32, 1, 40, 11, 50, 27, 46, 103, 111, 
            111, 103, 108, 101, 46, 112, 114, 111, 116, 111, 98, 117, 102, 46, 66, 121, 116, 101, 115, 86, 
            97, 108, 117, 101, 82, 20, 111, 112, 116, 105, 111, 110, 97, 108, 66, 121, 116, 101, 115, 87, 
            114, 97, 112, 112, 101, 114, 18, 79, 10, 21, 114, 101, 112, 101, 97, 116, 101, 100, 95, 98, 
            111, 111, 108, 95, 119, 114, 97, 112, 112, 101, 114, 24, 211, 1, 32, 3, 40, 11, 50, 26, 
            46, 103, 111, 111, 103, 108, 101, 46, 112, 114, 111, 116, 111, 98, 117, 102, 46, 66, 111, 111, 
            108, 86, 97, 108, 117, 101, 82, 19, 114, 101, 112, 101, 97, 116, 101, 100, 66, 111, 111, 108, 
            87, 114, 97, 112, 112, 101, 114, 18, 82, 10, 22, 114, 101, 112, 101, 97, 116, 101, 100, 95, 
            105, 110, 116, 51, 50, 95, 119, 114, 97, 112, 112, 101, 114, 24, 212, 1, 32, 3, 40, 11, 
            50, 27, 46, 103, 111, 111, 103, 108, 101, 46, 112, 114, 111, 116, 111, 98, 117, 102, 46, 73, 
            110, 116, 51, 50, 86, 97, 108, 117, 101, 82, 20, 114, 101, 112, 101, 97, 116, 101, 100, 73, 
            110, 116, 51, 50, 87, 114, 97, 112, 112, 101, 114, 18, 82, 10, 22, 114, 101, 112, 101, 97, 
            116, 101, 100, 95, 105, 110, 116, 54, 52, 95, 119, 114, 97, 112, 112, 101, 114, 24, 213, 1, 
            32, 3, 40, 11, 50, 27, 46, 103, 111, 111, 103, 108, 101, 46, 112, 114, 111, 116, 111, 98, 
            117, 102, 46, 73, 110, 116, 54, 52, 86, 97, 108, 117, 101, 82, 20, 114, 101, 112, 101, 97, 
            116, 101, 100, 73, 110, 116, 54, 52, 87, 114, 97, 112, 112, 101, 114, 18, 85, 10, 23, 114, 
            101, 112, 101, 97, 116, 101, 100, 95, 117, 105, 110, 116, 51, 50, 95, 119, 114, 97, 112, 112, 
            101, 114, 24, 214, 1, 32, 3, 40, 11, 50, 28, 46, 103, 111, 111, 103, 108, 101, 46, 112, 
            114, 111, 116, 111, 98, 117, 102, 46, 85, 73, 110, 116, 51, 50, 86, 97, 108, 117, 101, 82, 
            21, 114, 101, 112, 101, 97, 116, 101, 100, 85, 105, 110, 116, 51, 50, 87, 114, 97, 112, 112, 
            101, 114, 18, 85, 10, 23, 114, 101, 112, 101, 97, 116, 101, 100, 95, 117, 105, 110, 116, 54, 
            52, 95, 119, 114, 97, 112, 112, 101, 114, 24, 215, 1, 32, 3, 40, 11, 50, 28, 46, 103, 
            111, 111, 103, 108, 101, 46, 112, 114, 111, 116, 111, 98, 117, 102, 46, 85, 73, 110, 116, 54, 
            52, 86, 97, 108, 117, 101, 82, 21, 114, 101, 112, 101, 97, 116, 101, 100, 85, 105, 110, 116, 
            54, 52, 87, 114, 97, 112, 112, 101, 114, 18, 82, 10, 22, 114, 101, 112, 101, 97, 116, 101, 
            100, 95, 102, 108, 111, 97, 116, 95, 119, 114, 97, 112, 112, 101, 114, 24, 216, 1, 32, 3, 
            40, 11, 50, 27, 46, 103, 111, 111, 103, 108, 101, 46, 112, 114, 111, 116, 111, 98, 117, 102, 
            46, 70, 108, 111, 97, 116, 86, 97, 108, 117, 101, 82, 20, 114, 101, 112, 101, 97, 116, 101, 
            100, 70, 108, 111, 97, 116, 87, 114, 97, 112, 112, 101, 114, 18, 85, 10, 23, 114, 101, 112, 
            101, 97, 116, 101, 100, 95, 100, 111, 117, 98, 108, 101, 95, 119, 114, 97, 112, 112, 101, 114, 
            24, 217, 1, 32, 3, 40, 11, 50, 28, 46, 103, 111, 111, 103, 108, 101, 46, 112, 114, 111, 
            116, 111, 98, 117, 102, 46, 68, 111, 117, 98, 108, 101, 86, 97, 108, 117, 101, 82, 21, 114, 
            101, 112, 101, 97, 116, 101, 100, 68, 111, 117, 98, 108, 101, 87, 114, 97, 112, 112, 101, 114, 
            18, 85, 10, 23, 114, 101, 112, 101, 97, 116, 101, 100, 95, 115, 116, 114, 105, 110, 103, 95, 
            119, 114, 97, 112, 112, 101, 114, 24, 218, 1, 32, 3, 40, 11, 50, 28, 46, 103, 111, 111, 
            103, 108, 101, 46, 112, 114, 111, 116, 111, 98, 117, 102, 46, 83, 116, 114, 105, 110, 103, 86, 
            97, 108, 117, 101, 82, 21, 114, 101, 112, 101, 97, 116, 101, 100, 83, 116, 114, 105, 110, 103, 
            87, 114, 97, 112, 112, 101, 114, 18, 82, 10, 22, 114, 101, 112, 101, 97, 116, 101, 100, 95, 
            98, 121, 116, 101, 115, 95, 119, 114, 97, 112, 112, 101, 114, 24, 219, 1, 32, 3, 40, 11, 
            50, 27, 46, 103, 111, 111, 103, 108, 101, 46, 112, 114, 111, 116, 111, 98, 117, 102, 46, 66, 
            121, 116, 101, 115, 86, 97, 108, 117, 101, 82, 20, 114, 101, 112, 101, 97, 116, 101, 100, 66, 
            121, 116, 101, 115, 87, 114, 97, 112, 112, 101, 114, 18, 71, 10, 17, 111, 112, 116, 105, 111, 
            110, 97, 108, 95, 100, 117, 114, 97, 116, 105, 111, 110, 24, 173, 2, 32, 1, 40, 11, 50, 
            25, 46, 103, 111, 111, 103, 108, 101, 46, 112, 114, 111, 116, 111, 98, 117, 102, 46, 68, 117, 
            114, 97, 116, 105, 111, 110, 82, 16, 111, 112, 116, 105, 111, 110, 97, 108, 68, 117, 114, 97, 
            116, 105, 111, 110, 18, 74, 10, 18, 111, 112, 116, 105, 111, 110, 97, 108, 95, 116, 105, 109, 
            101, 115, 116, 97, 109, 112, 24, 174, 2, 32, 1, 40, 11, 50, 26, 46, 103, 111, 111, 103, 
            108, 101, 46, 112, 114, 111, 116, 111, 98, 117, 102, 46, 84, 105, 109, 101, 115, 116, 97, 109, 
            112, 82, 17, 111, 112, 116, 105, 111, 110, 97, 108, 84, 105, 109, 101, 115, 116, 97, 109, 112, 
            18, 75, 10, 19, 111, 112, 116, 105, 111, 110, 97, 108, 95, 102, 105, 101, 108, 100, 95, 109, 
            97, 115, 107, 24, 175, 2, 32, 1, 40, 11, 50, 26, 46, 103, 111, 111, 103, 108, 101, 46, 
            112, 114, 111, 116, 111, 98, 117, 102, 46, 70, 105, 101, 108, 100, 77, 97, 115, 107, 82, 17, 
            111, 112, 116, 105, 111, 110, 97, 108, 70, 105, 101, 108, 100, 77, 97, 115, 107, 18, 65, 10, 
            15, 111, 112, 116, 105, 111, 110, 97, 108, 95, 115, 116, 114, 117, 99, 116, 24, 176, 2, 32, 
            1, 40, 11, 50, 23, 46, 103, 111, 111, 103, 108, 101, 46, 112, 114, 111, 116, 111, 98, 117, 
            102, 46, 83, 116, 114, 117, 99, 116, 82, 14, 111, 112, 116, 105, 111, 110, 97, 108, 83, 116, 
            114, 117, 99, 116, 18, 56, 10, 12, 111, 112, 116, 105, 111, 110, 97, 108, 95, 97, 110, 121, 
            24, 177, 2, 32, 1, 40, 11, 50, 20, 46, 103, 111, 111, 103, 108, 101, 46, 112, 114, 111, 
            116, 111, 98, 117, 102, 46, 65, 110, 121, 82, 11, 111, 112, 116, 105, 111, 110, 97, 108, 65, 
            110, 121, 18, 62, 10, 14, 111, 112, 116, 105, 111, 110, 97, 108, 95, 118, 97, 108, 117, 101, 
            24, 178, 2, 32, 1, 40, 11, 50, 22, 46, 103, 111, 111, 103, 108, 101, 46, 112, 114, 111, 
            116, 111, 98, 117, 102, 46, 86, 97, 108, 117, 101, 82, 13, 111, 112, 116, 105, 111, 110, 97, 
            108, 86, 97, 108, 117, 101, 18, 71, 10, 17, 114, 101, 112, 101, 97, 116, 101, 100, 95, 100, 
            117, 114, 97, 116, 105, 111, 110, 24, 183, 2, 32, 3, 40, 11, 50, 25, 46, 103, 111, 111, 
            103, 108, 101, 46, 112, 114, 111, 116, 111, 98, 117, 102, 46, 68, 117, 114, 97, 116, 105, 111, 
            110, 82, 16, 114, 101, 112, 101, 97, 116, 101, 100, 68, 117, 114, 97, 116, 105, 111, 110, 18, 
            74, 10, 18, 114, 101, 112, 101, 97, 116, 101, 100, 95, 116, 105, 109, 101, 115, 116, 97, 109, 
            112, 24, 184, 2, 32, 3, 40, 11, 50, 26, 46, 103, 111, 111, 103, 108, 101, 46, 112, 114, 
            111, 116, 111, 98, 117, 102, 46, 84, 105, 109, 101, 115, 116, 97, 109, 112, 82, 17, 114, 101, 
            112, 101, 97, 116, 101, 100, 84, 105, 109, 101, 115, 116, 97, 109, 112, 18, 74, 10, 18, 114, 
            101, 112, 101, 97, 116, 101, 100, 95, 102, 105, 101, 108, 100, 109, 97, 115, 107, 24, 185, 2, 
            32, 3, 40, 11, 50, 26, 46, 103, 111, 111, 103, 108, 101, 46, 112, 114, 111, 116, 111, 98, 
            117, 102, 46, 70, 105, 101, 108, 100, 77, 97, 115, 107, 82, 17, 114, 101, 112, 101, 97, 116, 
            101, 100, 70, 105, 101, 108, 100, 109, 97, 115, 107, 18, 65, 10, 15, 114, 101, 112, 101, 97, 
            116, 101, 100, 95, 115, 116, 114, 117, 99, 116, 24, 196, 2, 32, 3, 40, 11, 50, 23, 46, 
            103, 111, 111, 103, 108, 101, 46, 112, 114, 111, 116, 111, 98, 117, 102, 46, 83, 116, 114, 117, 
            99, 116, 82, 14, 114, 101, 112, 101, 97, 116, 101, 100, 83, 116, 114, 117, 99, 116, 18, 56, 
            10, 12, 114, 101, 112, 101, 97, 116, 101, 100, 95, 97, 110, 121, 24, 187, 2, 32, 3, 40, 
            11, 50, 20, 46, 103, 111, 111, 103, 108, 101, 46, 112, 114, 111, 116, 111, 98, 117, 102, 46, 
            65, 110, 121, 82, 11, 114, 101, 112, 101, 97, 116, 101, 100, 65, 110, 121, 18, 62, 10, 14, 
            114, 101, 112, 101, 97, 116, 101, 100, 95, 118, 97, 108, 117, 101, 24, 188, 2, 32, 3, 40, 
            11, 50, 22, 46, 103, 111, 111, 103, 108, 101, 46, 112, 114, 111, 116, 111, 98, 117, 102, 46, 
            86, 97, 108, 117, 101, 82, 13, 114, 101, 112, 101, 97, 116, 101, 100, 86, 97, 108, 117, 101, 
            18, 31, 10, 10, 102, 105, 101, 108, 100, 110, 97, 109, 101, 49, 24, 145, 3, 32, 1, 40, 
            5, 82, 10, 102, 105, 101, 108, 100, 110, 97, 109, 101, 49, 18, 32, 10, 11, 102, 105, 101, 
            108, 100, 95, 110, 97, 109, 101, 50, 24, 146, 3, 32, 1, 40, 5, 82, 10, 102, 105, 101, 
            108, 100, 78, 97, 109, 101, 50, 18, 33, 10, 12, 95, 102, 105, 101, 108, 100, 95, 110, 97, 
            109, 101, 51, 24, 147, 3, 32, 1, 40, 5, 82, 10, 70, 105, 101, 108, 100, 78, 97, 109, 
            101, 51, 18, 34, 10, 13, 102, 105, 101, 108, 100, 95, 95, 110, 97, 109, 101, 52, 95, 24, 
            148, 3, 32, 1, 40, 5, 82, 10, 102, 105, 101, 108, 100, 78, 97, 109, 101, 52, 18, 33, 
            10, 11, 102, 105, 101, 108, 100, 48, 110, 97, 109, 101, 53, 24, 149, 3, 32, 1, 40, 5, 
            82, 11, 102, 105, 101, 108, 100, 48, 110, 97, 109, 101, 53, 18, 35, 10, 13, 102, 105, 101, 
            108, 100, 95, 48, 95, 110, 97, 109, 101, 54, 24, 150, 3, 32, 1, 40, 5, 82, 11, 102, 
            105, 101, 108, 100, 48, 78, 97, 109, 101, 54, 18, 31, 10, 10, 102, 105, 101, 108, 100, 78, 
            97, 109, 101, 55, 24, 151, 3, 32, 1, 40, 5, 82, 10, 102, 105, 101, 108, 100, 78, 97, 
            109, 101, 55, 18, 31, 10, 10, 70, 105, 101, 108, 100, 78, 97, 109, 101, 56, 24, 152, 3, 
            32, 1, 40, 5, 82, 10, 70, 105, 101, 108, 100, 78, 97, 109, 101, 56, 18, 32, 10, 11, 
            102, 105, 101, 108, 100, 95, 78, 97, 109, 101, 57, 24, 153, 3, 32, 1, 40, 5, 82, 10, 
            102, 105, 101, 108, 100, 78, 97, 109, 101, 57, 18, 34, 10, 12, 70, 105, 101, 108, 100, 95, 
            78, 97, 109, 101, 49, 48, 24, 154, 3, 32, 1, 40, 5, 82, 11, 70, 105, 101, 108, 100, 
            78, 97, 109, 101, 49, 48, 18, 34, 10, 12, 70, 73, 69, 76, 68, 95, 78, 65, 77, 69, 
            49, 49, 24, 155, 3, 32, 1, 40, 5, 82, 11, 70, 73, 69, 76, 68, 78, 65, 77, 69, 
            49, 49, 18, 34, 10, 12, 70, 73, 69, 76, 68, 95, 110, 97, 109, 101, 49, 50, 24, 156, 
            3, 32, 1, 40, 5, 82, 11, 70, 73, 69, 76, 68, 78, 97, 109, 101, 49, 50, 18, 36, 
            10, 14, 95, 95, 102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 49, 51, 24, 157, 3, 32, 
            1, 40, 5, 82, 11, 70, 105, 101, 108, 100, 78, 97, 109, 101, 49, 51, 18, 36, 10, 14, 
            95, 95, 70, 105, 101, 108, 100, 95, 110, 97, 109, 101, 49, 52, 24, 158, 3, 32, 1, 40, 
            5, 82, 11, 70, 105, 101, 108, 100, 78, 97, 109, 101, 49, 52, 18, 35, 10, 13, 102, 105, 
            101, 108, 100, 95, 95, 110, 97, 109, 101, 49, 53, 24, 159, 3, 32, 1, 40, 5, 82, 11, 
            102, 105, 101, 108, 100, 78, 97, 109, 101, 49, 53, 18, 35, 10, 13, 102, 105, 101, 108, 100, 
            95, 95, 78, 97, 109, 101, 49, 54, 24, 160, 3, 32, 1, 40, 5, 82, 11, 102, 105, 101, 
            108, 100, 78, 97, 109, 101, 49, 54, 18, 36, 10, 14, 102, 105, 101, 108, 100, 95, 110, 97, 
            109, 101, 49, 55, 95, 95, 24, 161, 3, 32, 1, 40, 5, 82, 11, 102, 105, 101, 108, 100, 
            78, 97, 109, 101, 49, 55, 18, 36, 10, 14, 70, 105, 101, 108, 100, 95, 110, 97, 109, 101, 
            49, 56, 95, 95, 24, 162, 3, 32, 1, 40, 5, 82, 11, 70, 105, 101, 108, 100, 78, 97, 
            109, 101, 49, 56, 26, 114, 10, 13, 78, 101, 115, 116, 101, 100, 77, 101, 115, 115, 97, 103, 
            101, 18, 12, 10, 1, 97, 24, 1, 32, 1, 40, 5, 82, 1, 97, 18, 83, 10, 11, 99, 
            111, 114, 101, 99, 117, 114, 115, 105, 118, 101, 24, 2, 32, 1, 40, 11, 50, 49, 46, 112, 
            114, 111, 116, 111, 98, 117, 102, 95, 116, 101, 115, 116, 95, 109, 101, 115, 115, 97, 103, 101, 
            115, 46, 112, 114, 111, 116, 111, 51, 46, 84, 101, 115, 116, 65, 108, 108, 84, 121, 112, 101, 
            115, 80, 114, 111, 116, 111, 51, 82, 11, 99, 111, 114, 101, 99, 117, 114, 115, 105, 118, 101, 
            26, 64, 10, 18, 77, 97, 112, 73, 110, 116, 51, 50, 73, 110, 116, 51, 50, 69, 110, 116, 
            114, 121, 18, 16, 10, 3, 107, 101, 121, 24, 1, 32, 1, 40, 5, 82, 3, 107, 101, 121, 
            18, 20, 10, 5, 118, 97, 108, 117, 101, 24, 2, 32, 1, 40, 5, 82, 5, 118, 97, 108, 
            117, 101, 58, 2, 56, 1, 26, 64, 10, 18, 77, 97, 112, 73, 110, 116, 54, 52, 73, 110, 
            116, 54, 52, 69, 110, 116, 114, 121, 18, 16, 10, 3, 107, 101, 121, 24, 1, 32, 1, 40, 
            3, 82, 3, 107, 101, 121, 18, 20, 10, 5, 118, 97, 108, 117, 101, 24, 2, 32, 1, 40, 
            3, 82, 5, 118, 97, 108, 117, 101, 58, 2, 56, 1, 26, 66, 10, 20, 77, 97, 112, 85, 
            105, 110, 116, 51, 50, 85, 105, 110, 116, 51, 50, 69, 110, 116, 114, 121, 18, 16, 10, 3, 
            107, 101, 121, 24, 1, 32, 1, 40, 13, 82, 3, 107, 101, 121, 18, 20, 10, 5, 118, 97, 
            108, 117, 101, 24, 2, 32, 1, 40, 13, 82, 5, 118, 97, 108, 117, 101, 58, 2, 56, 1, 
            26, 66, 10, 20, 77, 97, 112, 85, 105, 110, 116, 54, 52, 85, 105, 110, 116, 54, 52, 69, 
            110, 116, 114, 121, 18, 16, 10, 3, 107, 101, 121, 24, 1, 32, 1, 40, 4, 82, 3, 107, 
            101, 121, 18, 20, 10, 5, 118, 97, 108, 117, 101, 24, 2, 32, 1, 40, 4, 82, 5, 118, 
            97, 108, 117, 101, 58, 2, 56, 1, 26, 66, 10, 20, 77, 97, 112, 83, 105, 110, 116, 51, 
            50, 83, 105, 110, 116, 51, 50, 69, 110, 116, 114, 121, 18, 16, 10, 3, 107, 101, 121, 24, 
            1, 32, 1, 40, 17, 82, 3, 107, 101, 121, 18, 20, 10, 5, 118, 97, 108, 117, 101, 24, 
            2, 32, 1, 40, 17, 82, 5, 118, 97, 108, 117, 101, 58, 2, 56, 1, 26, 66, 10, 20, 
            77, 97, 112, 83, 105, 110, 116, 54, 52, 83, 105, 110, 116, 54, 52, 69, 110, 116, 114, 121, 
            18, 16, 10, 3, 107, 101, 121, 24, 1, 32, 1, 40, 18, 82, 3, 107, 101, 121, 18, 20, 
            10, 5, 118, 97, 108, 117, 101, 24, 2, 32, 1, 40, 18, 82, 5, 118, 97, 108, 117, 101, 
            58, 2, 56, 1, 26, 68, 10, 22, 77, 97, 112, 70, 105, 120, 101, 100, 51, 50, 70, 105, 
            120, 101, 100, 51, 50, 69, 110, 116, 114, 121, 18, 16, 10, 3, 107, 101, 121, 24, 1, 32, 
            1, 40, 7, 82, 3, 107, 101, 121, 18, 20, 10, 5, 118, 97, 108, 117, 101, 24, 2, 32, 
            1, 40, 7, 82, 5, 118, 97, 108, 117, 101, 58, 2, 56, 1, 26, 68, 10, 22, 77, 97, 
            112, 70, 105, 120, 101, 100, 54, 52, 70, 105, 120, 101, 100, 54, 52, 69, 110, 116, 114, 121, 
            18, 16, 10, 3, 107, 101, 121, 24, 1, 32, 1, 40, 6, 82, 3, 107, 101, 121, 18, 20, 
            10, 5, 118, 97, 108, 117, 101, 24, 2, 32, 1, 40, 6, 82, 5, 118, 97, 108, 117, 101, 
            58, 2, 56, 1, 26, 70, 10, 24, 77, 97, 112, 83, 102, 105, 120, 101, 100, 51, 50, 83, 
            102, 105, 120, 101, 100, 51, 50, 69, 110, 116, 114, 121, 18, 16, 10, 3, 107, 101, 121, 24, 
            1, 32, 1, 40, 15, 82, 3, 107, 101, 121, 18, 20, 10, 5, 118, 97, 108, 117, 101, 24, 
            2, 32, 1, 40, 15, 82, 5, 118, 97, 108, 117, 101, 58, 2, 56, 1, 26, 70, 10, 24, 
            77, 97, 112, 83, 102, 105, 120, 101, 100, 54, 52, 83, 102, 105, 120, 101, 100, 54, 52, 69, 
            110, 116, 114, 121, 18, 16, 10, 3, 107, 101, 121, 24, 1, 32, 1, 40, 16, 82, 3, 107, 
            101, 121, 18, 20, 10, 5, 118, 97, 108, 117, 101, 24, 2, 32, 1, 40, 16, 82, 5, 118, 
            97, 108, 117, 101, 58, 2, 56, 1, 26, 64, 10, 18, 77, 97, 112, 73, 110, 116, 51, 50, 
            70, 108, 111, 97, 116, 69, 110, 116, 114, 121, 18, 16, 10, 3, 107, 101, 121, 24, 1, 32, 
            1, 40, 5, 82, 3, 107, 101, 121, 18, 20, 10, 5, 118, 97, 108, 117, 101, 24, 2, 32, 
            1, 40, 2, 82, 5, 118, 97, 108, 117, 101, 58, 2, 56, 1, 26, 65, 10, 19, 77, 97, 
            112, 73, 110, 116, 51, 50, 68, 111, 117, 98, 108, 101, 69, 110, 116, 114, 121, 18, 16, 10, 
            3, 107, 101, 121, 24, 1, 32, 1, 40, 5, 82, 3, 107, 101, 121, 18, 20, 10, 5, 118, 
            97, 108, 117, 101, 24, 2, 32, 1, 40, 1, 82, 5, 118, 97, 108, 117, 101, 58, 2, 56, 
            1, 26, 62, 10, 16, 77, 97, 112, 66, 111, 111, 108, 66, 111, 111, 108, 69, 110, 116, 114, 
            121, 18, 16, 10, 3, 107, 101, 121, 24, 1, 32, 1, 40, 8, 82, 3, 107, 101, 121, 18, 
            20, 10, 5, 118, 97, 108, 117, 101, 24, 2, 32, 1, 40, 8, 82, 5, 118, 97, 108, 117, 
            101, 58, 2, 56, 1, 26, 66, 10, 20, 77, 97, 112, 83, 116, 114, 105, 110, 103, 83, 116, 
            114, 105, 110, 103, 69, 110, 116, 114, 121, 18, 16, 10, 3, 107, 101, 121, 24, 1, 32, 1, 
            40, 9, 82, 3, 107, 101, 121, 18, 20, 10, 5, 118, 97, 108, 117, 101, 24, 2, 32, 1, 
            40, 9, 82, 5, 118, 97, 108, 117, 101, 58, 2, 56, 1, 26, 65, 10, 19, 77, 97, 112, 
            83, 116, 114, 105, 110, 103, 66, 121, 116, 101, 115, 69, 110, 116, 114, 121, 18, 16, 10, 3, 
            107, 101, 121, 24, 1, 32, 1, 40, 9, 82, 3, 107, 101, 121, 18, 20, 10, 5, 118, 97, 
            108, 117, 101, 24, 2, 32, 1, 40, 12, 82, 5, 118, 97, 108, 117, 101, 58, 2, 56, 1, 
            26, 138, 1, 10, 27, 77, 97, 112, 83, 116, 114, 105, 110, 103, 78, 101, 115, 116, 101, 100, 
            77, 101, 115, 115, 97, 103, 101, 69, 110, 116, 114, 121, 18, 16, 10, 3, 107, 101, 121, 24, 
            1, 32, 1, 40, 9, 82, 3, 107, 101, 121, 18, 85, 10, 5, 118, 97, 108, 117, 101, 24, 
            2, 32, 1, 40, 11, 50, 63, 46, 112, 114, 111, 116, 111, 98, 117, 102, 95, 116, 101, 115, 
            116, 95, 109, 101, 115, 115, 97, 103, 101, 115, 46, 112, 114, 111, 116, 111, 51, 46, 84, 101, 
            115, 116, 65, 108, 108, 84, 121, 112, 101, 115, 80, 114, 111, 116, 111, 51, 46, 78, 101, 115, 
            116, 101, 100, 77, 101, 115, 115, 97, 103, 101, 82, 5, 118, 97, 108, 117, 101, 58, 2, 56, 
            1, 26, 121, 10, 28, 77, 97, 112, 83, 116, 114, 105, 110, 103, 70, 111, 114, 101, 105, 103, 
            110, 77, 101, 115, 115, 97, 103, 101, 69, 110, 116, 114, 121, 18, 16, 10, 3, 107, 101, 121, 
            24, 1, 32, 1, 40, 9, 82, 3, 107, 101, 121, 18, 67, 10, 5, 118, 97, 108, 117, 101, 
            24, 2, 32, 1, 40, 11, 50, 45, 46, 112, 114, 111, 116, 111, 98, 117, 102, 95, 116, 101, 
            115, 116, 95, 109, 101, 115, 115, 97, 103, 101, 115, 46, 112, 114, 111, 116, 111, 51, 46, 70, 
            111, 114, 101, 105, 103, 110, 77, 101, 115, 115, 97, 103, 101, 82, 5, 118, 97, 108, 117, 101, 
            58, 2, 56, 1, 26, 132, 1, 10, 24, 77, 97, 112, 83, 116, 114, 105, 110, 103, 78, 101, 
            115, 116, 101, 100, 69, 110, 117, 109, 69, 110, 116, 114, 121, 18, 16, 10, 3, 107, 101, 121, 
            24, 1, 32, 1, 40, 9, 82, 3, 107, 101, 121, 18, 82, 10, 5, 118, 97, 108, 117, 101, 
            24, 2, 32, 1, 40, 14, 50, 60, 46, 112, 114, 111, 116, 111, 98, 117, 102, 95, 116, 101, 
            115, 116, 95, 109, 101, 115, 115, 97, 103, 101, 115, 46, 112, 114, 111, 116, 111, 51, 46, 84, 
            101, 115, 116, 65, 108, 108, 84, 121, 112, 101, 115, 80, 114, 111, 116, 111, 51, 46, 78, 101, 
            115, 116, 101, 100, 69, 110, 117, 109, 82, 5, 118, 97, 108, 117, 101, 58, 2, 56, 1, 26, 
            115, 10, 25, 77, 97, 112, 83, 116, 114, 105, 110, 103, 70, 111, 114, 101, 105, 103, 110, 69, 
            110, 117, 109, 69, 110, 116, 114, 121, 18, 16, 10, 3, 107, 101, 121, 24, 1, 32, 1, 40, 
            9, 82, 3, 107, 101, 121, 18, 64, 10, 5, 118, 97, 108, 117, 101, 24, 2, 32, 1, 40, 
            14, 50, 42, 46, 112, 114, 111, 116, 111, 98, 117, 102, 95, 116, 101, 115, 116, 95, 109, 101, 
            115, 115, 97, 103, 101, 115, 46, 112, 114, 111, 116, 111, 51, 46, 70, 111, 114, 101, 105, 103, 
            110, 69, 110, 117, 109, 82, 5, 118, 97, 108, 117, 101, 58, 2, 56, 1, 34, 55, 10, 10, 
            78, 101, 115, 116, 101, 100, 69, 110, 117, 109, 18, 5, 10, 3, 70, 79, 79, 18, 7, 10, 
            3, 66, 65, 82, 16, 1, 18, 7, 10, 3, 66, 65, 90, 16, 2, 18, 16, 10, 3, 78, 
            69, 71, 16, 255, 255, 255, 255, 255, 255, 255, 255, 255, 1, 34, 87, 10, 11, 65, 108, 105, 
            97, 115, 101, 100, 69, 110, 117, 109, 18, 11, 10, 9, 65, 76, 73, 65, 83, 95, 70, 79, 
            79, 18, 13, 10, 9, 65, 76, 73, 65, 83, 95, 66, 65, 82, 16, 1, 18, 13, 10, 9, 
            65, 76, 73, 65, 83, 95, 66, 65, 90, 16, 2, 18, 7, 10, 3, 81, 85, 88, 16, 2, 
            18, 7, 10, 3, 113, 117, 120, 16, 2, 18, 7, 10, 3, 98, 65, 122, 16, 2, 26, 2, 
            16, 1, 66, 13, 10, 11, 111, 110, 101, 111, 102, 95, 102, 105, 101, 108, 100, 74, 6, 8, 
            245, 3, 16, 255, 3, 34, 30, 10, 14, 70, 111, 114, 101, 105, 103, 110, 77, 101, 115, 115, 
            97, 103, 101, 18, 12, 10, 1, 99, 24, 1, 32, 1, 40, 5, 82, 1, 99, 42, 62, 10, 
            11, 70, 111, 114, 101, 105, 103, 110, 69, 110, 117, 109, 18, 13, 10, 11, 70, 79, 82, 69, 
            73, 71, 78, 95, 70, 79, 79, 18, 15, 10, 11, 70, 79, 82, 69, 73, 71, 78, 95, 66, 
            65, 82, 16, 1, 18, 15, 10, 11, 70, 79, 82, 69, 73, 71, 78, 95, 66, 65, 90, 16, 
            2, 66, 54, 10, 40, 99, 111, 109, 46, 103, 111, 111, 103, 108, 101, 46, 112, 114, 111, 116, 
            111, 98, 117, 102, 95, 116, 101, 115, 116, 95, 109, 101, 115, 115, 97, 103, 101, 115, 46, 112, 
            114, 111, 116, 111, 51, 248, 1, 1, 162, 2, 6, 80, 114, 111, 116, 111, 51, 98, 6, 112, 
            114, 111, 116, 111, 51, 
        ].as_ref()).expect("Could not read file descriptor")]);
        FILE_DEPS = ::std::option::Option::Some([::protrust::wkt::any::pool(), ::protrust::wkt::duration::pool(), ::protrust::wkt::field_mask::pool(), ::protrust::wkt::r#struct::pool(), ::protrust::wkt::timestamp::pool(), ::protrust::wkt::wrappers::pool(), ]);
        FILE_POOL = ::std::option::Option::Some(::protrust::reflect::DescriptorPool::build_generated_pool(
            FILE_PROTO.as_ref().unwrap(),
            FILE_DEPS.as_ref().unwrap()
        ));
        FILE_DESCRIPTOR = ::std::option::Option::Some(FILE_POOL.as_ref().unwrap().find_file_by_name("test_messages_proto3.proto").unwrap());
    }
}

/// Gets the pool containing all the symbols in this proto file and its dependencies
pub fn pool() -> &'static ::protrust::reflect::DescriptorPool<'static> {
    unsafe {
        FILE_ONCE.call_once(file_once_init);
        FILE_POOL.as_ref().unwrap()
    }
}
/// Gets the file descriptor representing the proto that created this generated file
pub fn file() -> &'static ::protrust::reflect::FileDescriptor {
    unsafe {
        FILE_ONCE.call_once(file_once_init);
        FILE_DESCRIPTOR.as_ref().unwrap()
    }
}
/// This proto includes every type of field in both singular and repeated
/// forms.
///
/// Also, crucially, all messages and enums in this file are eventually
/// submessages of this message.  So for example, a fuzz test of TestAllTypes
/// could trigger bugs that occur in any message type in this file.  We verify
/// this stays true in a unit test.
#[derive(Clone, Debug, PartialEq)]
pub struct TestAllTypesProto3 {
    optional_int32: i32,
    optional_int64: i64,
    optional_uint32: u32,
    optional_uint64: u64,
    optional_sint32: i32,
    optional_sint64: i64,
    optional_fixed32: u32,
    optional_fixed64: u64,
    optional_sfixed32: i32,
    optional_sfixed64: i64,
    optional_float: f32,
    optional_double: f64,
    optional_bool: bool,
    optional_string: ::std::string::String,
    optional_bytes: ::std::vec::Vec<u8>,
    optional_nested_message: ::std::option::Option<::std::boxed::Box<self::TestAllTypesProto3_NestedMessage>>,
    optional_foreign_message: ::std::option::Option<::std::boxed::Box<self::ForeignMessage>>,
    optional_nested_enum: ::protrust::EnumValue<self::TestAllTypesProto3_NestedEnum>,
    optional_foreign_enum: ::protrust::EnumValue<self::ForeignEnum>,
    optional_aliased_enum: ::protrust::EnumValue<self::TestAllTypesProto3_AliasedEnum>,
    optional_string_piece: ::std::string::String,
    optional_cord: ::std::string::String,
    recursive_message: ::std::option::Option<::std::boxed::Box<self::TestAllTypesProto3>>,
    repeated_int32: ::protrust::collections::RepeatedField<i32>,
    repeated_int64: ::protrust::collections::RepeatedField<i64>,
    repeated_uint32: ::protrust::collections::RepeatedField<u32>,
    repeated_uint64: ::protrust::collections::RepeatedField<u64>,
    repeated_sint32: ::protrust::collections::RepeatedField<i32>,
    repeated_sint64: ::protrust::collections::RepeatedField<i64>,
    repeated_fixed32: ::protrust::collections::RepeatedField<u32>,
    repeated_fixed64: ::protrust::collections::RepeatedField<u64>,
    repeated_sfixed32: ::protrust::collections::RepeatedField<i32>,
    repeated_sfixed64: ::protrust::collections::RepeatedField<i64>,
    repeated_float: ::protrust::collections::RepeatedField<f32>,
    repeated_double: ::protrust::collections::RepeatedField<f64>,
    repeated_bool: ::protrust::collections::RepeatedField<bool>,
    repeated_string: ::protrust::collections::RepeatedField<::std::string::String>,
    repeated_bytes: ::protrust::collections::RepeatedField<::std::vec::Vec<u8>>,
    repeated_nested_message: ::protrust::collections::RepeatedField<self::TestAllTypesProto3_NestedMessage>,
    repeated_foreign_message: ::protrust::collections::RepeatedField<self::ForeignMessage>,
    repeated_nested_enum: ::protrust::collections::RepeatedField<::protrust::EnumValue<self::TestAllTypesProto3_NestedEnum>>,
    repeated_foreign_enum: ::protrust::collections::RepeatedField<::protrust::EnumValue<self::ForeignEnum>>,
    repeated_string_piece: ::protrust::collections::RepeatedField<::std::string::String>,
    repeated_cord: ::protrust::collections::RepeatedField<::std::string::String>,
    map_int32_int32: ::protrust::collections::MapField<i32, i32>,
    map_int64_int64: ::protrust::collections::MapField<i64, i64>,
    map_uint32_uint32: ::protrust::collections::MapField<u32, u32>,
    map_uint64_uint64: ::protrust::collections::MapField<u64, u64>,
    map_sint32_sint32: ::protrust::collections::MapField<i32, i32>,
    map_sint64_sint64: ::protrust::collections::MapField<i64, i64>,
    map_fixed32_fixed32: ::protrust::collections::MapField<u32, u32>,
    map_fixed64_fixed64: ::protrust::collections::MapField<u64, u64>,
    map_sfixed32_sfixed32: ::protrust::collections::MapField<i32, i32>,
    map_sfixed64_sfixed64: ::protrust::collections::MapField<i64, i64>,
    map_int32_float: ::protrust::collections::MapField<i32, f32>,
    map_int32_double: ::protrust::collections::MapField<i32, f64>,
    map_bool_bool: ::protrust::collections::MapField<bool, bool>,
    map_string_string: ::protrust::collections::MapField<::std::string::String, ::std::string::String>,
    map_string_bytes: ::protrust::collections::MapField<::std::string::String, ::std::vec::Vec<u8>>,
    map_string_nested_message: ::protrust::collections::MapField<::std::string::String, self::TestAllTypesProto3_NestedMessage>,
    map_string_foreign_message: ::protrust::collections::MapField<::std::string::String, self::ForeignMessage>,
    map_string_nested_enum: ::protrust::collections::MapField<::std::string::String, ::protrust::EnumValue<self::TestAllTypesProto3_NestedEnum>>,
    map_string_foreign_enum: ::protrust::collections::MapField<::std::string::String, ::protrust::EnumValue<self::ForeignEnum>>,
    optional_bool_wrapper: ::std::option::Option<::std::boxed::Box<::protrust::wkt::wrappers::BoolValue>>,
    optional_int32_wrapper: ::std::option::Option<::std::boxed::Box<::protrust::wkt::wrappers::Int32Value>>,
    optional_int64_wrapper: ::std::option::Option<::std::boxed::Box<::protrust::wkt::wrappers::Int64Value>>,
    optional_uint32_wrapper: ::std::option::Option<::std::boxed::Box<::protrust::wkt::wrappers::UInt32Value>>,
    optional_uint64_wrapper: ::std::option::Option<::std::boxed::Box<::protrust::wkt::wrappers::UInt64Value>>,
    optional_float_wrapper: ::std::option::Option<::std::boxed::Box<::protrust::wkt::wrappers::FloatValue>>,
    optional_double_wrapper: ::std::option::Option<::std::boxed::Box<::protrust::wkt::wrappers::DoubleValue>>,
    optional_string_wrapper: ::std::option::Option<::std::boxed::Box<::protrust::wkt::wrappers::StringValue>>,
    optional_bytes_wrapper: ::std::option::Option<::std::boxed::Box<::protrust::wkt::wrappers::BytesValue>>,
    repeated_bool_wrapper: ::protrust::collections::RepeatedField<::protrust::wkt::wrappers::BoolValue>,
    repeated_int32_wrapper: ::protrust::collections::RepeatedField<::protrust::wkt::wrappers::Int32Value>,
    repeated_int64_wrapper: ::protrust::collections::RepeatedField<::protrust::wkt::wrappers::Int64Value>,
    repeated_uint32_wrapper: ::protrust::collections::RepeatedField<::protrust::wkt::wrappers::UInt32Value>,
    repeated_uint64_wrapper: ::protrust::collections::RepeatedField<::protrust::wkt::wrappers::UInt64Value>,
    repeated_float_wrapper: ::protrust::collections::RepeatedField<::protrust::wkt::wrappers::FloatValue>,
    repeated_double_wrapper: ::protrust::collections::RepeatedField<::protrust::wkt::wrappers::DoubleValue>,
    repeated_string_wrapper: ::protrust::collections::RepeatedField<::protrust::wkt::wrappers::StringValue>,
    repeated_bytes_wrapper: ::protrust::collections::RepeatedField<::protrust::wkt::wrappers::BytesValue>,
    optional_duration: ::std::option::Option<::std::boxed::Box<::protrust::wkt::duration::Duration>>,
    optional_timestamp: ::std::option::Option<::std::boxed::Box<::protrust::wkt::timestamp::Timestamp>>,
    optional_field_mask: ::std::option::Option<::std::boxed::Box<::protrust::wkt::field_mask::FieldMask>>,
    optional_struct: ::std::option::Option<::std::boxed::Box<::protrust::wkt::r#struct::Struct>>,
    optional_any: ::std::option::Option<::std::boxed::Box<::protrust::wkt::any::Any>>,
    optional_value: ::std::option::Option<::std::boxed::Box<::protrust::wkt::r#struct::Value>>,
    repeated_duration: ::protrust::collections::RepeatedField<::protrust::wkt::duration::Duration>,
    repeated_timestamp: ::protrust::collections::RepeatedField<::protrust::wkt::timestamp::Timestamp>,
    repeated_fieldmask: ::protrust::collections::RepeatedField<::protrust::wkt::field_mask::FieldMask>,
    repeated_struct: ::protrust::collections::RepeatedField<::protrust::wkt::r#struct::Struct>,
    repeated_any: ::protrust::collections::RepeatedField<::protrust::wkt::any::Any>,
    repeated_value: ::protrust::collections::RepeatedField<::protrust::wkt::r#struct::Value>,
    fieldname1: i32,
    field_name2: i32,
    _field_name3: i32,
    field__name4_: i32,
    field0name5: i32,
    field_0_name6: i32,
    fieldName7: i32,
    FieldName8: i32,
    field_Name9: i32,
    Field_Name10: i32,
    FIELD_NAME11: i32,
    FIELD_name12: i32,
    __field_name13: i32,
    __Field_name14: i32,
    field__name15: i32,
    field__Name16: i32,
    field_name17__: i32,
    Field_name18__: i32,
    oneof_field: self::TestAllTypesProto3_OneofField,
    unknown_fields: ::protrust::UnknownFieldSet
}
static TEST_ALL_TYPES_PROTO3_REPEATED_INT32_CODEC: ::protrust::Codec<i32> = ::protrust::Codec::int32(250);
static TEST_ALL_TYPES_PROTO3_REPEATED_INT64_CODEC: ::protrust::Codec<i64> = ::protrust::Codec::int64(258);
static TEST_ALL_TYPES_PROTO3_REPEATED_UINT32_CODEC: ::protrust::Codec<u32> = ::protrust::Codec::uint32(266);
static TEST_ALL_TYPES_PROTO3_REPEATED_UINT64_CODEC: ::protrust::Codec<u64> = ::protrust::Codec::uint64(274);
static TEST_ALL_TYPES_PROTO3_REPEATED_SINT32_CODEC: ::protrust::Codec<i32> = ::protrust::Codec::sint32(282);
static TEST_ALL_TYPES_PROTO3_REPEATED_SINT64_CODEC: ::protrust::Codec<i64> = ::protrust::Codec::sint64(290);
static TEST_ALL_TYPES_PROTO3_REPEATED_FIXED32_CODEC: ::protrust::Codec<u32> = ::protrust::Codec::fixed32(298);
static TEST_ALL_TYPES_PROTO3_REPEATED_FIXED64_CODEC: ::protrust::Codec<u64> = ::protrust::Codec::fixed64(306);
static TEST_ALL_TYPES_PROTO3_REPEATED_SFIXED32_CODEC: ::protrust::Codec<i32> = ::protrust::Codec::sfixed32(314);
static TEST_ALL_TYPES_PROTO3_REPEATED_SFIXED64_CODEC: ::protrust::Codec<i64> = ::protrust::Codec::sfixed64(322);
static TEST_ALL_TYPES_PROTO3_REPEATED_FLOAT_CODEC: ::protrust::Codec<f32> = ::protrust::Codec::float(330);
static TEST_ALL_TYPES_PROTO3_REPEATED_DOUBLE_CODEC: ::protrust::Codec<f64> = ::protrust::Codec::double(338);
static TEST_ALL_TYPES_PROTO3_REPEATED_BOOL_CODEC: ::protrust::Codec<bool> = ::protrust::Codec::bool(346);
static TEST_ALL_TYPES_PROTO3_REPEATED_STRING_CODEC: ::protrust::Codec<::std::string::String> = ::protrust::Codec::string(354);
static TEST_ALL_TYPES_PROTO3_REPEATED_BYTES_CODEC: ::protrust::Codec<::std::vec::Vec<u8>> = ::protrust::Codec::bytes(362);
static TEST_ALL_TYPES_PROTO3_REPEATED_NESTED_MESSAGE_CODEC: ::protrust::Codec<self::TestAllTypesProto3_NestedMessage> = ::protrust::Codec::message(386);
static TEST_ALL_TYPES_PROTO3_REPEATED_FOREIGN_MESSAGE_CODEC: ::protrust::Codec<self::ForeignMessage> = ::protrust::Codec::message(394);
static TEST_ALL_TYPES_PROTO3_REPEATED_NESTED_ENUM_CODEC: ::protrust::Codec<::protrust::EnumValue<self::TestAllTypesProto3_NestedEnum>> = ::protrust::Codec::enum_value(410);
static TEST_ALL_TYPES_PROTO3_REPEATED_FOREIGN_ENUM_CODEC: ::protrust::Codec<::protrust::EnumValue<self::ForeignEnum>> = ::protrust::Codec::enum_value(418);
static TEST_ALL_TYPES_PROTO3_REPEATED_STRING_PIECE_CODEC: ::protrust::Codec<::std::string::String> = ::protrust::Codec::string(434);
static TEST_ALL_TYPES_PROTO3_REPEATED_CORD_CODEC: ::protrust::Codec<::std::string::String> = ::protrust::Codec::string(442);
static TEST_ALL_TYPES_PROTO3_MAP_INT32_INT32_CODEC: ::protrust::collections::MapCodec<i32, i32> = ::protrust::collections::MapCodec::new(::protrust::Codec::int32(8), ::protrust::Codec::int32(16), 450);
static TEST_ALL_TYPES_PROTO3_MAP_INT64_INT64_CODEC: ::protrust::collections::MapCodec<i64, i64> = ::protrust::collections::MapCodec::new(::protrust::Codec::int64(8), ::protrust::Codec::int64(16), 458);
static TEST_ALL_TYPES_PROTO3_MAP_UINT32_UINT32_CODEC: ::protrust::collections::MapCodec<u32, u32> = ::protrust::collections::MapCodec::new(::protrust::Codec::uint32(8), ::protrust::Codec::uint32(16), 466);
static TEST_ALL_TYPES_PROTO3_MAP_UINT64_UINT64_CODEC: ::protrust::collections::MapCodec<u64, u64> = ::protrust::collections::MapCodec::new(::protrust::Codec::uint64(8), ::protrust::Codec::uint64(16), 474);
static TEST_ALL_TYPES_PROTO3_MAP_SINT32_SINT32_CODEC: ::protrust::collections::MapCodec<i32, i32> = ::protrust::collections::MapCodec::new(::protrust::Codec::sint32(8), ::protrust::Codec::sint32(16), 482);
static TEST_ALL_TYPES_PROTO3_MAP_SINT64_SINT64_CODEC: ::protrust::collections::MapCodec<i64, i64> = ::protrust::collections::MapCodec::new(::protrust::Codec::sint64(8), ::protrust::Codec::sint64(16), 490);
static TEST_ALL_TYPES_PROTO3_MAP_FIXED32_FIXED32_CODEC: ::protrust::collections::MapCodec<u32, u32> = ::protrust::collections::MapCodec::new(::protrust::Codec::fixed32(13), ::protrust::Codec::fixed32(21), 498);
static TEST_ALL_TYPES_PROTO3_MAP_FIXED64_FIXED64_CODEC: ::protrust::collections::MapCodec<u64, u64> = ::protrust::collections::MapCodec::new(::protrust::Codec::fixed64(9), ::protrust::Codec::fixed64(17), 506);
static TEST_ALL_TYPES_PROTO3_MAP_SFIXED32_SFIXED32_CODEC: ::protrust::collections::MapCodec<i32, i32> = ::protrust::collections::MapCodec::new(::protrust::Codec::sfixed32(13), ::protrust::Codec::sfixed32(21), 514);
static TEST_ALL_TYPES_PROTO3_MAP_SFIXED64_SFIXED64_CODEC: ::protrust::collections::MapCodec<i64, i64> = ::protrust::collections::MapCodec::new(::protrust::Codec::sfixed64(9), ::protrust::Codec::sfixed64(17), 522);
static TEST_ALL_TYPES_PROTO3_MAP_INT32_FLOAT_CODEC: ::protrust::collections::MapCodec<i32, f32> = ::protrust::collections::MapCodec::new(::protrust::Codec::int32(8), ::protrust::Codec::float(21), 530);
static TEST_ALL_TYPES_PROTO3_MAP_INT32_DOUBLE_CODEC: ::protrust::collections::MapCodec<i32, f64> = ::protrust::collections::MapCodec::new(::protrust::Codec::int32(8), ::protrust::Codec::double(17), 538);
static TEST_ALL_TYPES_PROTO3_MAP_BOOL_BOOL_CODEC: ::protrust::collections::MapCodec<bool, bool> = ::protrust::collections::MapCodec::new(::protrust::Codec::bool(8), ::protrust::Codec::bool(16), 546);
static TEST_ALL_TYPES_PROTO3_MAP_STRING_STRING_CODEC: ::protrust::collections::MapCodec<::std::string::String, ::std::string::String> = ::protrust::collections::MapCodec::new(::protrust::Codec::string(10), ::protrust::Codec::string(18), 554);
static TEST_ALL_TYPES_PROTO3_MAP_STRING_BYTES_CODEC: ::protrust::collections::MapCodec<::std::string::String, ::std::vec::Vec<u8>> = ::protrust::collections::MapCodec::new(::protrust::Codec::string(10), ::protrust::Codec::bytes(18), 562);
static TEST_ALL_TYPES_PROTO3_MAP_STRING_NESTED_MESSAGE_CODEC: ::protrust::collections::MapCodec<::std::string::String, self::TestAllTypesProto3_NestedMessage> = ::protrust::collections::MapCodec::new(::protrust::Codec::string(10), ::protrust::Codec::message(18), 570);
static TEST_ALL_TYPES_PROTO3_MAP_STRING_FOREIGN_MESSAGE_CODEC: ::protrust::collections::MapCodec<::std::string::String, self::ForeignMessage> = ::protrust::collections::MapCodec::new(::protrust::Codec::string(10), ::protrust::Codec::message(18), 578);
static TEST_ALL_TYPES_PROTO3_MAP_STRING_NESTED_ENUM_CODEC: ::protrust::collections::MapCodec<::std::string::String, ::protrust::EnumValue<self::TestAllTypesProto3_NestedEnum>> = ::protrust::collections::MapCodec::new(::protrust::Codec::string(10), ::protrust::Codec::enum_value(16), 586);
static TEST_ALL_TYPES_PROTO3_MAP_STRING_FOREIGN_ENUM_CODEC: ::protrust::collections::MapCodec<::std::string::String, ::protrust::EnumValue<self::ForeignEnum>> = ::protrust::collections::MapCodec::new(::protrust::Codec::string(10), ::protrust::Codec::enum_value(16), 594);
static TEST_ALL_TYPES_PROTO3_REPEATED_BOOL_WRAPPER_CODEC: ::protrust::Codec<::protrust::wkt::wrappers::BoolValue> = ::protrust::Codec::message(1690);
static TEST_ALL_TYPES_PROTO3_REPEATED_INT32_WRAPPER_CODEC: ::protrust::Codec<::protrust::wkt::wrappers::Int32Value> = ::protrust::Codec::message(1698);
static TEST_ALL_TYPES_PROTO3_REPEATED_INT64_WRAPPER_CODEC: ::protrust::Codec<::protrust::wkt::wrappers::Int64Value> = ::protrust::Codec::message(1706);
static TEST_ALL_TYPES_PROTO3_REPEATED_UINT32_WRAPPER_CODEC: ::protrust::Codec<::protrust::wkt::wrappers::UInt32Value> = ::protrust::Codec::message(1714);
static TEST_ALL_TYPES_PROTO3_REPEATED_UINT64_WRAPPER_CODEC: ::protrust::Codec<::protrust::wkt::wrappers::UInt64Value> = ::protrust::Codec::message(1722);
static TEST_ALL_TYPES_PROTO3_REPEATED_FLOAT_WRAPPER_CODEC: ::protrust::Codec<::protrust::wkt::wrappers::FloatValue> = ::protrust::Codec::message(1730);
static TEST_ALL_TYPES_PROTO3_REPEATED_DOUBLE_WRAPPER_CODEC: ::protrust::Codec<::protrust::wkt::wrappers::DoubleValue> = ::protrust::Codec::message(1738);
static TEST_ALL_TYPES_PROTO3_REPEATED_STRING_WRAPPER_CODEC: ::protrust::Codec<::protrust::wkt::wrappers::StringValue> = ::protrust::Codec::message(1746);
static TEST_ALL_TYPES_PROTO3_REPEATED_BYTES_WRAPPER_CODEC: ::protrust::Codec<::protrust::wkt::wrappers::BytesValue> = ::protrust::Codec::message(1754);
static TEST_ALL_TYPES_PROTO3_REPEATED_DURATION_CODEC: ::protrust::Codec<::protrust::wkt::duration::Duration> = ::protrust::Codec::message(2490);
static TEST_ALL_TYPES_PROTO3_REPEATED_TIMESTAMP_CODEC: ::protrust::Codec<::protrust::wkt::timestamp::Timestamp> = ::protrust::Codec::message(2498);
static TEST_ALL_TYPES_PROTO3_REPEATED_FIELDMASK_CODEC: ::protrust::Codec<::protrust::wkt::field_mask::FieldMask> = ::protrust::Codec::message(2506);
static TEST_ALL_TYPES_PROTO3_REPEATED_STRUCT_CODEC: ::protrust::Codec<::protrust::wkt::r#struct::Struct> = ::protrust::Codec::message(2594);
static TEST_ALL_TYPES_PROTO3_REPEATED_ANY_CODEC: ::protrust::Codec<::protrust::wkt::any::Any> = ::protrust::Codec::message(2522);
static TEST_ALL_TYPES_PROTO3_REPEATED_VALUE_CODEC: ::protrust::Codec<::protrust::wkt::r#struct::Value> = ::protrust::Codec::message(2530);
#[derive(Clone, Debug, PartialEq)]
pub enum TestAllTypesProto3_OneofField {
    /// No value
    None,
    OneofUint32(u32),
    OneofNestedMessage(::std::boxed::Box<self::TestAllTypesProto3_NestedMessage>),
    OneofString(::std::string::String),
    OneofBytes(::std::vec::Vec<u8>),
    OneofBool(bool),
    OneofUint64(u64),
    OneofFloat(f32),
    OneofDouble(f64),
    OneofEnum(::protrust::EnumValue<self::TestAllTypesProto3_NestedEnum>),
}
impl ::protrust::CodedMessage for self::TestAllTypesProto3 {
    fn merge_from(&mut self, input: &mut ::protrust::io::CodedInput) -> ::protrust::io::InputResult<()> {
        while let ::std::option::Option::Some(tag) = input.read_tag()? {
            match tag.get() {
                8 => self.optional_int32 = input.read_int32()?,
                16 => self.optional_int64 = input.read_int64()?,
                24 => self.optional_uint32 = input.read_uint32()?,
                32 => self.optional_uint64 = input.read_uint64()?,
                40 => self.optional_sint32 = input.read_sint32()?,
                48 => self.optional_sint64 = input.read_sint64()?,
                61 => self.optional_fixed32 = input.read_fixed32()?,
                65 => self.optional_fixed64 = input.read_fixed64()?,
                77 => self.optional_sfixed32 = input.read_sfixed32()?,
                81 => self.optional_sfixed64 = input.read_sfixed64()?,
                93 => self.optional_float = input.read_float()?,
                97 => self.optional_double = input.read_double()?,
                104 => self.optional_bool = input.read_bool()?,
                114 => self.optional_string = input.read_string()?,
                122 => self.optional_bytes = input.read_bytes()?,
                146 => input.read_message(self.optional_nested_message.get_or_insert_with(::protrust::LiteMessage::new))?,
                154 => input.read_message(self.optional_foreign_message.get_or_insert_with(::protrust::LiteMessage::new))?,
                168 => self.optional_nested_enum = input.read_enum_value()?,
                176 => self.optional_foreign_enum = input.read_enum_value()?,
                184 => self.optional_aliased_enum = input.read_enum_value()?,
                194 => self.optional_string_piece = input.read_string()?,
                202 => self.optional_cord = input.read_string()?,
                218 => input.read_message(self.recursive_message.get_or_insert_with(::protrust::LiteMessage::new))?,
                248 | 250 => self.repeated_int32.add_entries(tag.get(), input, &TEST_ALL_TYPES_PROTO3_REPEATED_INT32_CODEC)?,
                256 | 258 => self.repeated_int64.add_entries(tag.get(), input, &TEST_ALL_TYPES_PROTO3_REPEATED_INT64_CODEC)?,
                264 | 266 => self.repeated_uint32.add_entries(tag.get(), input, &TEST_ALL_TYPES_PROTO3_REPEATED_UINT32_CODEC)?,
                272 | 274 => self.repeated_uint64.add_entries(tag.get(), input, &TEST_ALL_TYPES_PROTO3_REPEATED_UINT64_CODEC)?,
                280 | 282 => self.repeated_sint32.add_entries(tag.get(), input, &TEST_ALL_TYPES_PROTO3_REPEATED_SINT32_CODEC)?,
                288 | 290 => self.repeated_sint64.add_entries(tag.get(), input, &TEST_ALL_TYPES_PROTO3_REPEATED_SINT64_CODEC)?,
                301 | 298 => self.repeated_fixed32.add_entries(tag.get(), input, &TEST_ALL_TYPES_PROTO3_REPEATED_FIXED32_CODEC)?,
                305 | 306 => self.repeated_fixed64.add_entries(tag.get(), input, &TEST_ALL_TYPES_PROTO3_REPEATED_FIXED64_CODEC)?,
                317 | 314 => self.repeated_sfixed32.add_entries(tag.get(), input, &TEST_ALL_TYPES_PROTO3_REPEATED_SFIXED32_CODEC)?,
                321 | 322 => self.repeated_sfixed64.add_entries(tag.get(), input, &TEST_ALL_TYPES_PROTO3_REPEATED_SFIXED64_CODEC)?,
                333 | 330 => self.repeated_float.add_entries(tag.get(), input, &TEST_ALL_TYPES_PROTO3_REPEATED_FLOAT_CODEC)?,
                337 | 338 => self.repeated_double.add_entries(tag.get(), input, &TEST_ALL_TYPES_PROTO3_REPEATED_DOUBLE_CODEC)?,
                344 | 346 => self.repeated_bool.add_entries(tag.get(), input, &TEST_ALL_TYPES_PROTO3_REPEATED_BOOL_CODEC)?,
                354 => self.repeated_string.add_entries(tag.get(), input, &TEST_ALL_TYPES_PROTO3_REPEATED_STRING_CODEC)?,
                362 => self.repeated_bytes.add_entries(tag.get(), input, &TEST_ALL_TYPES_PROTO3_REPEATED_BYTES_CODEC)?,
                386 => self.repeated_nested_message.add_entries(tag.get(), input, &TEST_ALL_TYPES_PROTO3_REPEATED_NESTED_MESSAGE_CODEC)?,
                394 => self.repeated_foreign_message.add_entries(tag.get(), input, &TEST_ALL_TYPES_PROTO3_REPEATED_FOREIGN_MESSAGE_CODEC)?,
                408 | 410 => self.repeated_nested_enum.add_entries(tag.get(), input, &TEST_ALL_TYPES_PROTO3_REPEATED_NESTED_ENUM_CODEC)?,
                416 | 418 => self.repeated_foreign_enum.add_entries(tag.get(), input, &TEST_ALL_TYPES_PROTO3_REPEATED_FOREIGN_ENUM_CODEC)?,
                434 => self.repeated_string_piece.add_entries(tag.get(), input, &TEST_ALL_TYPES_PROTO3_REPEATED_STRING_PIECE_CODEC)?,
                442 => self.repeated_cord.add_entries(tag.get(), input, &TEST_ALL_TYPES_PROTO3_REPEATED_CORD_CODEC)?,
                450 => self.map_int32_int32.add_entries(input, &TEST_ALL_TYPES_PROTO3_MAP_INT32_INT32_CODEC)?,
                458 => self.map_int64_int64.add_entries(input, &TEST_ALL_TYPES_PROTO3_MAP_INT64_INT64_CODEC)?,
                466 => self.map_uint32_uint32.add_entries(input, &TEST_ALL_TYPES_PROTO3_MAP_UINT32_UINT32_CODEC)?,
                474 => self.map_uint64_uint64.add_entries(input, &TEST_ALL_TYPES_PROTO3_MAP_UINT64_UINT64_CODEC)?,
                482 => self.map_sint32_sint32.add_entries(input, &TEST_ALL_TYPES_PROTO3_MAP_SINT32_SINT32_CODEC)?,
                490 => self.map_sint64_sint64.add_entries(input, &TEST_ALL_TYPES_PROTO3_MAP_SINT64_SINT64_CODEC)?,
                498 => self.map_fixed32_fixed32.add_entries(input, &TEST_ALL_TYPES_PROTO3_MAP_FIXED32_FIXED32_CODEC)?,
                506 => self.map_fixed64_fixed64.add_entries(input, &TEST_ALL_TYPES_PROTO3_MAP_FIXED64_FIXED64_CODEC)?,
                514 => self.map_sfixed32_sfixed32.add_entries(input, &TEST_ALL_TYPES_PROTO3_MAP_SFIXED32_SFIXED32_CODEC)?,
                522 => self.map_sfixed64_sfixed64.add_entries(input, &TEST_ALL_TYPES_PROTO3_MAP_SFIXED64_SFIXED64_CODEC)?,
                530 => self.map_int32_float.add_entries(input, &TEST_ALL_TYPES_PROTO3_MAP_INT32_FLOAT_CODEC)?,
                538 => self.map_int32_double.add_entries(input, &TEST_ALL_TYPES_PROTO3_MAP_INT32_DOUBLE_CODEC)?,
                546 => self.map_bool_bool.add_entries(input, &TEST_ALL_TYPES_PROTO3_MAP_BOOL_BOOL_CODEC)?,
                554 => self.map_string_string.add_entries(input, &TEST_ALL_TYPES_PROTO3_MAP_STRING_STRING_CODEC)?,
                562 => self.map_string_bytes.add_entries(input, &TEST_ALL_TYPES_PROTO3_MAP_STRING_BYTES_CODEC)?,
                570 => self.map_string_nested_message.add_entries(input, &TEST_ALL_TYPES_PROTO3_MAP_STRING_NESTED_MESSAGE_CODEC)?,
                578 => self.map_string_foreign_message.add_entries(input, &TEST_ALL_TYPES_PROTO3_MAP_STRING_FOREIGN_MESSAGE_CODEC)?,
                586 => self.map_string_nested_enum.add_entries(input, &TEST_ALL_TYPES_PROTO3_MAP_STRING_NESTED_ENUM_CODEC)?,
                594 => self.map_string_foreign_enum.add_entries(input, &TEST_ALL_TYPES_PROTO3_MAP_STRING_FOREIGN_ENUM_CODEC)?,
                888 => self.oneof_field = self::TestAllTypesProto3_OneofField::OneofUint32(input.read_uint32()?),
                898 => 
                    if let self::TestAllTypesProto3_OneofField::OneofNestedMessage(oneof_field) = &mut self.oneof_field {
                        oneof_field.merge_from(input)?;
                    } else {
                        let mut oneof_field = ::std::boxed::Box::new(<self::TestAllTypesProto3_NestedMessage as ::protrust::LiteMessage>::new());
                        oneof_field.merge_from(input)?;
                        self.oneof_field = self::TestAllTypesProto3_OneofField::OneofNestedMessage(oneof_field)
                    },
                906 => self.oneof_field = self::TestAllTypesProto3_OneofField::OneofString(input.read_string()?),
                914 => self.oneof_field = self::TestAllTypesProto3_OneofField::OneofBytes(input.read_bytes()?),
                920 => self.oneof_field = self::TestAllTypesProto3_OneofField::OneofBool(input.read_bool()?),
                928 => self.oneof_field = self::TestAllTypesProto3_OneofField::OneofUint64(input.read_uint64()?),
                941 => self.oneof_field = self::TestAllTypesProto3_OneofField::OneofFloat(input.read_float()?),
                945 => self.oneof_field = self::TestAllTypesProto3_OneofField::OneofDouble(input.read_double()?),
                952 => self.oneof_field = self::TestAllTypesProto3_OneofField::OneofEnum(input.read_enum_value()?),
                1610 => input.read_message(self.optional_bool_wrapper.get_or_insert_with(::protrust::LiteMessage::new))?,
                1618 => input.read_message(self.optional_int32_wrapper.get_or_insert_with(::protrust::LiteMessage::new))?,
                1626 => input.read_message(self.optional_int64_wrapper.get_or_insert_with(::protrust::LiteMessage::new))?,
                1634 => input.read_message(self.optional_uint32_wrapper.get_or_insert_with(::protrust::LiteMessage::new))?,
                1642 => input.read_message(self.optional_uint64_wrapper.get_or_insert_with(::protrust::LiteMessage::new))?,
                1650 => input.read_message(self.optional_float_wrapper.get_or_insert_with(::protrust::LiteMessage::new))?,
                1658 => input.read_message(self.optional_double_wrapper.get_or_insert_with(::protrust::LiteMessage::new))?,
                1666 => input.read_message(self.optional_string_wrapper.get_or_insert_with(::protrust::LiteMessage::new))?,
                1674 => input.read_message(self.optional_bytes_wrapper.get_or_insert_with(::protrust::LiteMessage::new))?,
                1690 => self.repeated_bool_wrapper.add_entries(tag.get(), input, &TEST_ALL_TYPES_PROTO3_REPEATED_BOOL_WRAPPER_CODEC)?,
                1698 => self.repeated_int32_wrapper.add_entries(tag.get(), input, &TEST_ALL_TYPES_PROTO3_REPEATED_INT32_WRAPPER_CODEC)?,
                1706 => self.repeated_int64_wrapper.add_entries(tag.get(), input, &TEST_ALL_TYPES_PROTO3_REPEATED_INT64_WRAPPER_CODEC)?,
                1714 => self.repeated_uint32_wrapper.add_entries(tag.get(), input, &TEST_ALL_TYPES_PROTO3_REPEATED_UINT32_WRAPPER_CODEC)?,
                1722 => self.repeated_uint64_wrapper.add_entries(tag.get(), input, &TEST_ALL_TYPES_PROTO3_REPEATED_UINT64_WRAPPER_CODEC)?,
                1730 => self.repeated_float_wrapper.add_entries(tag.get(), input, &TEST_ALL_TYPES_PROTO3_REPEATED_FLOAT_WRAPPER_CODEC)?,
                1738 => self.repeated_double_wrapper.add_entries(tag.get(), input, &TEST_ALL_TYPES_PROTO3_REPEATED_DOUBLE_WRAPPER_CODEC)?,
                1746 => self.repeated_string_wrapper.add_entries(tag.get(), input, &TEST_ALL_TYPES_PROTO3_REPEATED_STRING_WRAPPER_CODEC)?,
                1754 => self.repeated_bytes_wrapper.add_entries(tag.get(), input, &TEST_ALL_TYPES_PROTO3_REPEATED_BYTES_WRAPPER_CODEC)?,
                2410 => input.read_message(self.optional_duration.get_or_insert_with(::protrust::LiteMessage::new))?,
                2418 => input.read_message(self.optional_timestamp.get_or_insert_with(::protrust::LiteMessage::new))?,
                2426 => input.read_message(self.optional_field_mask.get_or_insert_with(::protrust::LiteMessage::new))?,
                2434 => input.read_message(self.optional_struct.get_or_insert_with(::protrust::LiteMessage::new))?,
                2442 => input.read_message(self.optional_any.get_or_insert_with(::protrust::LiteMessage::new))?,
                2450 => input.read_message(self.optional_value.get_or_insert_with(::protrust::LiteMessage::new))?,
                2490 => self.repeated_duration.add_entries(tag.get(), input, &TEST_ALL_TYPES_PROTO3_REPEATED_DURATION_CODEC)?,
                2498 => self.repeated_timestamp.add_entries(tag.get(), input, &TEST_ALL_TYPES_PROTO3_REPEATED_TIMESTAMP_CODEC)?,
                2506 => self.repeated_fieldmask.add_entries(tag.get(), input, &TEST_ALL_TYPES_PROTO3_REPEATED_FIELDMASK_CODEC)?,
                2594 => self.repeated_struct.add_entries(tag.get(), input, &TEST_ALL_TYPES_PROTO3_REPEATED_STRUCT_CODEC)?,
                2522 => self.repeated_any.add_entries(tag.get(), input, &TEST_ALL_TYPES_PROTO3_REPEATED_ANY_CODEC)?,
                2530 => self.repeated_value.add_entries(tag.get(), input, &TEST_ALL_TYPES_PROTO3_REPEATED_VALUE_CODEC)?,
                3208 => self.fieldname1 = input.read_int32()?,
                3216 => self.field_name2 = input.read_int32()?,
                3224 => self._field_name3 = input.read_int32()?,
                3232 => self.field__name4_ = input.read_int32()?,
                3240 => self.field0name5 = input.read_int32()?,
                3248 => self.field_0_name6 = input.read_int32()?,
                3256 => self.fieldName7 = input.read_int32()?,
                3264 => self.FieldName8 = input.read_int32()?,
                3272 => self.field_Name9 = input.read_int32()?,
                3280 => self.Field_Name10 = input.read_int32()?,
                3288 => self.FIELD_NAME11 = input.read_int32()?,
                3296 => self.FIELD_name12 = input.read_int32()?,
                3304 => self.__field_name13 = input.read_int32()?,
                3312 => self.__Field_name14 = input.read_int32()?,
                3320 => self.field__name15 = input.read_int32()?,
                3328 => self.field__Name16 = input.read_int32()?,
                3336 => self.field_name17__ = input.read_int32()?,
                3344 => self.Field_name18__ = input.read_int32()?,
                tag => self.unknown_fields.merge_from(tag, input)?
            }
        }
        ::std::result::Result::Ok(())
    }
    fn calculate_size(&self) -> i32 {
        let mut size = 0i32;
        let optional_int32 = self.optional_int32;
        if optional_int32 != Self::OPTIONAL_INT32_DEFAULT_VALUE {
            size += 1;
            size += ::protrust::io::sizes::int32(optional_int32);
        }
        let optional_int64 = self.optional_int64;
        if optional_int64 != Self::OPTIONAL_INT64_DEFAULT_VALUE {
            size += 1;
            size += ::protrust::io::sizes::int64(optional_int64);
        }
        let optional_uint32 = self.optional_uint32;
        if optional_uint32 != Self::OPTIONAL_UINT32_DEFAULT_VALUE {
            size += 1;
            size += ::protrust::io::sizes::uint32(optional_uint32);
        }
        let optional_uint64 = self.optional_uint64;
        if optional_uint64 != Self::OPTIONAL_UINT64_DEFAULT_VALUE {
            size += 1;
            size += ::protrust::io::sizes::uint64(optional_uint64);
        }
        let optional_sint32 = self.optional_sint32;
        if optional_sint32 != Self::OPTIONAL_SINT32_DEFAULT_VALUE {
            size += 1;
            size += ::protrust::io::sizes::sint32(optional_sint32);
        }
        let optional_sint64 = self.optional_sint64;
        if optional_sint64 != Self::OPTIONAL_SINT64_DEFAULT_VALUE {
            size += 1;
            size += ::protrust::io::sizes::sint64(optional_sint64);
        }
        let optional_fixed32 = self.optional_fixed32;
        if optional_fixed32 != Self::OPTIONAL_FIXED32_DEFAULT_VALUE {
            size += 1;
            size += ::protrust::io::sizes::fixed32(optional_fixed32);
        }
        let optional_fixed64 = self.optional_fixed64;
        if optional_fixed64 != Self::OPTIONAL_FIXED64_DEFAULT_VALUE {
            size += 1;
            size += ::protrust::io::sizes::fixed64(optional_fixed64);
        }
        let optional_sfixed32 = self.optional_sfixed32;
        if optional_sfixed32 != Self::OPTIONAL_SFIXED32_DEFAULT_VALUE {
            size += 1;
            size += ::protrust::io::sizes::sfixed32(optional_sfixed32);
        }
        let optional_sfixed64 = self.optional_sfixed64;
        if optional_sfixed64 != Self::OPTIONAL_SFIXED64_DEFAULT_VALUE {
            size += 1;
            size += ::protrust::io::sizes::sfixed64(optional_sfixed64);
        }
        let optional_float = self.optional_float;
        if optional_float != Self::OPTIONAL_FLOAT_DEFAULT_VALUE {
            size += 1;
            size += ::protrust::io::sizes::float(optional_float);
        }
        let optional_double = self.optional_double;
        if optional_double != Self::OPTIONAL_DOUBLE_DEFAULT_VALUE {
            size += 1;
            size += ::protrust::io::sizes::double(optional_double);
        }
        let optional_bool = self.optional_bool;
        if optional_bool != Self::OPTIONAL_BOOL_DEFAULT_VALUE {
            size += 1;
            size += ::protrust::io::sizes::bool(optional_bool);
        }
        let optional_string = &self.optional_string;
        if optional_string != Self::OPTIONAL_STRING_DEFAULT_VALUE {
            size += 1;
            size += ::protrust::io::sizes::string(optional_string);
        }
        let optional_bytes = &self.optional_bytes;
        if optional_bytes.as_slice() != Self::OPTIONAL_BYTES_DEFAULT_VALUE {
            size += 1;
            size += ::protrust::io::sizes::bytes(optional_bytes);
        }
        let optional_nested_message = &self.optional_nested_message;
        if let ::std::option::Option::Some(optional_nested_message) = optional_nested_message {
            size += 2;
            size += ::protrust::io::sizes::message(optional_nested_message);
        }
        let optional_foreign_message = &self.optional_foreign_message;
        if let ::std::option::Option::Some(optional_foreign_message) = optional_foreign_message {
            size += 2;
            size += ::protrust::io::sizes::message(optional_foreign_message);
        }
        let optional_nested_enum = self.optional_nested_enum;
        if optional_nested_enum != Self::OPTIONAL_NESTED_ENUM_DEFAULT_VALUE {
            size += 2;
            size += ::protrust::io::sizes::enum_value(optional_nested_enum);
        }
        let optional_foreign_enum = self.optional_foreign_enum;
        if optional_foreign_enum != Self::OPTIONAL_FOREIGN_ENUM_DEFAULT_VALUE {
            size += 2;
            size += ::protrust::io::sizes::enum_value(optional_foreign_enum);
        }
        let optional_aliased_enum = self.optional_aliased_enum;
        if optional_aliased_enum != Self::OPTIONAL_ALIASED_ENUM_DEFAULT_VALUE {
            size += 2;
            size += ::protrust::io::sizes::enum_value(optional_aliased_enum);
        }
        let optional_string_piece = &self.optional_string_piece;
        if optional_string_piece != Self::OPTIONAL_STRING_PIECE_DEFAULT_VALUE {
            size += 2;
            size += ::protrust::io::sizes::string(optional_string_piece);
        }
        let optional_cord = &self.optional_cord;
        if optional_cord != Self::OPTIONAL_CORD_DEFAULT_VALUE {
            size += 2;
            size += ::protrust::io::sizes::string(optional_cord);
        }
        let recursive_message = &self.recursive_message;
        if let ::std::option::Option::Some(recursive_message) = recursive_message {
            size += 2;
            size += ::protrust::io::sizes::message(recursive_message);
        }
        size += self.repeated_int32.calculate_size(&TEST_ALL_TYPES_PROTO3_REPEATED_INT32_CODEC);
        size += self.repeated_int64.calculate_size(&TEST_ALL_TYPES_PROTO3_REPEATED_INT64_CODEC);
        size += self.repeated_uint32.calculate_size(&TEST_ALL_TYPES_PROTO3_REPEATED_UINT32_CODEC);
        size += self.repeated_uint64.calculate_size(&TEST_ALL_TYPES_PROTO3_REPEATED_UINT64_CODEC);
        size += self.repeated_sint32.calculate_size(&TEST_ALL_TYPES_PROTO3_REPEATED_SINT32_CODEC);
        size += self.repeated_sint64.calculate_size(&TEST_ALL_TYPES_PROTO3_REPEATED_SINT64_CODEC);
        size += self.repeated_fixed32.calculate_size(&TEST_ALL_TYPES_PROTO3_REPEATED_FIXED32_CODEC);
        size += self.repeated_fixed64.calculate_size(&TEST_ALL_TYPES_PROTO3_REPEATED_FIXED64_CODEC);
        size += self.repeated_sfixed32.calculate_size(&TEST_ALL_TYPES_PROTO3_REPEATED_SFIXED32_CODEC);
        size += self.repeated_sfixed64.calculate_size(&TEST_ALL_TYPES_PROTO3_REPEATED_SFIXED64_CODEC);
        size += self.repeated_float.calculate_size(&TEST_ALL_TYPES_PROTO3_REPEATED_FLOAT_CODEC);
        size += self.repeated_double.calculate_size(&TEST_ALL_TYPES_PROTO3_REPEATED_DOUBLE_CODEC);
        size += self.repeated_bool.calculate_size(&TEST_ALL_TYPES_PROTO3_REPEATED_BOOL_CODEC);
        size += self.repeated_string.calculate_size(&TEST_ALL_TYPES_PROTO3_REPEATED_STRING_CODEC);
        size += self.repeated_bytes.calculate_size(&TEST_ALL_TYPES_PROTO3_REPEATED_BYTES_CODEC);
        size += self.repeated_nested_message.calculate_size(&TEST_ALL_TYPES_PROTO3_REPEATED_NESTED_MESSAGE_CODEC);
        size += self.repeated_foreign_message.calculate_size(&TEST_ALL_TYPES_PROTO3_REPEATED_FOREIGN_MESSAGE_CODEC);
        size += self.repeated_nested_enum.calculate_size(&TEST_ALL_TYPES_PROTO3_REPEATED_NESTED_ENUM_CODEC);
        size += self.repeated_foreign_enum.calculate_size(&TEST_ALL_TYPES_PROTO3_REPEATED_FOREIGN_ENUM_CODEC);
        size += self.repeated_string_piece.calculate_size(&TEST_ALL_TYPES_PROTO3_REPEATED_STRING_PIECE_CODEC);
        size += self.repeated_cord.calculate_size(&TEST_ALL_TYPES_PROTO3_REPEATED_CORD_CODEC);
        size += self.map_int32_int32.calculate_size(&TEST_ALL_TYPES_PROTO3_MAP_INT32_INT32_CODEC);
        size += self.map_int64_int64.calculate_size(&TEST_ALL_TYPES_PROTO3_MAP_INT64_INT64_CODEC);
        size += self.map_uint32_uint32.calculate_size(&TEST_ALL_TYPES_PROTO3_MAP_UINT32_UINT32_CODEC);
        size += self.map_uint64_uint64.calculate_size(&TEST_ALL_TYPES_PROTO3_MAP_UINT64_UINT64_CODEC);
        size += self.map_sint32_sint32.calculate_size(&TEST_ALL_TYPES_PROTO3_MAP_SINT32_SINT32_CODEC);
        size += self.map_sint64_sint64.calculate_size(&TEST_ALL_TYPES_PROTO3_MAP_SINT64_SINT64_CODEC);
        size += self.map_fixed32_fixed32.calculate_size(&TEST_ALL_TYPES_PROTO3_MAP_FIXED32_FIXED32_CODEC);
        size += self.map_fixed64_fixed64.calculate_size(&TEST_ALL_TYPES_PROTO3_MAP_FIXED64_FIXED64_CODEC);
        size += self.map_sfixed32_sfixed32.calculate_size(&TEST_ALL_TYPES_PROTO3_MAP_SFIXED32_SFIXED32_CODEC);
        size += self.map_sfixed64_sfixed64.calculate_size(&TEST_ALL_TYPES_PROTO3_MAP_SFIXED64_SFIXED64_CODEC);
        size += self.map_int32_float.calculate_size(&TEST_ALL_TYPES_PROTO3_MAP_INT32_FLOAT_CODEC);
        size += self.map_int32_double.calculate_size(&TEST_ALL_TYPES_PROTO3_MAP_INT32_DOUBLE_CODEC);
        size += self.map_bool_bool.calculate_size(&TEST_ALL_TYPES_PROTO3_MAP_BOOL_BOOL_CODEC);
        size += self.map_string_string.calculate_size(&TEST_ALL_TYPES_PROTO3_MAP_STRING_STRING_CODEC);
        size += self.map_string_bytes.calculate_size(&TEST_ALL_TYPES_PROTO3_MAP_STRING_BYTES_CODEC);
        size += self.map_string_nested_message.calculate_size(&TEST_ALL_TYPES_PROTO3_MAP_STRING_NESTED_MESSAGE_CODEC);
        size += self.map_string_foreign_message.calculate_size(&TEST_ALL_TYPES_PROTO3_MAP_STRING_FOREIGN_MESSAGE_CODEC);
        size += self.map_string_nested_enum.calculate_size(&TEST_ALL_TYPES_PROTO3_MAP_STRING_NESTED_ENUM_CODEC);
        size += self.map_string_foreign_enum.calculate_size(&TEST_ALL_TYPES_PROTO3_MAP_STRING_FOREIGN_ENUM_CODEC);
        if let self::TestAllTypesProto3_OneofField::OneofUint32(oneof_field) = self.oneof_field {
            size += 2;
            size += ::protrust::io::sizes::uint32(oneof_field);
        }
        if let self::TestAllTypesProto3_OneofField::OneofNestedMessage(oneof_field) = &self.oneof_field {
            size += 2;
            size += ::protrust::io::sizes::message(oneof_field);
        }
        if let self::TestAllTypesProto3_OneofField::OneofString(oneof_field) = &self.oneof_field {
            size += 2;
            size += ::protrust::io::sizes::string(oneof_field);
        }
        if let self::TestAllTypesProto3_OneofField::OneofBytes(oneof_field) = &self.oneof_field {
            size += 2;
            size += ::protrust::io::sizes::bytes(oneof_field);
        }
        if let self::TestAllTypesProto3_OneofField::OneofBool(oneof_field) = self.oneof_field {
            size += 2;
            size += ::protrust::io::sizes::bool(oneof_field);
        }
        if let self::TestAllTypesProto3_OneofField::OneofUint64(oneof_field) = self.oneof_field {
            size += 2;
            size += ::protrust::io::sizes::uint64(oneof_field);
        }
        if let self::TestAllTypesProto3_OneofField::OneofFloat(oneof_field) = self.oneof_field {
            size += 2;
            size += ::protrust::io::sizes::float(oneof_field);
        }
        if let self::TestAllTypesProto3_OneofField::OneofDouble(oneof_field) = self.oneof_field {
            size += 2;
            size += ::protrust::io::sizes::double(oneof_field);
        }
        if let self::TestAllTypesProto3_OneofField::OneofEnum(oneof_field) = self.oneof_field {
            size += 2;
            size += ::protrust::io::sizes::enum_value(oneof_field);
        }
        let optional_bool_wrapper = &self.optional_bool_wrapper;
        if let ::std::option::Option::Some(optional_bool_wrapper) = optional_bool_wrapper {
            size += 2;
            size += ::protrust::io::sizes::message(optional_bool_wrapper);
        }
        let optional_int32_wrapper = &self.optional_int32_wrapper;
        if let ::std::option::Option::Some(optional_int32_wrapper) = optional_int32_wrapper {
            size += 2;
            size += ::protrust::io::sizes::message(optional_int32_wrapper);
        }
        let optional_int64_wrapper = &self.optional_int64_wrapper;
        if let ::std::option::Option::Some(optional_int64_wrapper) = optional_int64_wrapper {
            size += 2;
            size += ::protrust::io::sizes::message(optional_int64_wrapper);
        }
        let optional_uint32_wrapper = &self.optional_uint32_wrapper;
        if let ::std::option::Option::Some(optional_uint32_wrapper) = optional_uint32_wrapper {
            size += 2;
            size += ::protrust::io::sizes::message(optional_uint32_wrapper);
        }
        let optional_uint64_wrapper = &self.optional_uint64_wrapper;
        if let ::std::option::Option::Some(optional_uint64_wrapper) = optional_uint64_wrapper {
            size += 2;
            size += ::protrust::io::sizes::message(optional_uint64_wrapper);
        }
        let optional_float_wrapper = &self.optional_float_wrapper;
        if let ::std::option::Option::Some(optional_float_wrapper) = optional_float_wrapper {
            size += 2;
            size += ::protrust::io::sizes::message(optional_float_wrapper);
        }
        let optional_double_wrapper = &self.optional_double_wrapper;
        if let ::std::option::Option::Some(optional_double_wrapper) = optional_double_wrapper {
            size += 2;
            size += ::protrust::io::sizes::message(optional_double_wrapper);
        }
        let optional_string_wrapper = &self.optional_string_wrapper;
        if let ::std::option::Option::Some(optional_string_wrapper) = optional_string_wrapper {
            size += 2;
            size += ::protrust::io::sizes::message(optional_string_wrapper);
        }
        let optional_bytes_wrapper = &self.optional_bytes_wrapper;
        if let ::std::option::Option::Some(optional_bytes_wrapper) = optional_bytes_wrapper {
            size += 2;
            size += ::protrust::io::sizes::message(optional_bytes_wrapper);
        }
        size += self.repeated_bool_wrapper.calculate_size(&TEST_ALL_TYPES_PROTO3_REPEATED_BOOL_WRAPPER_CODEC);
        size += self.repeated_int32_wrapper.calculate_size(&TEST_ALL_TYPES_PROTO3_REPEATED_INT32_WRAPPER_CODEC);
        size += self.repeated_int64_wrapper.calculate_size(&TEST_ALL_TYPES_PROTO3_REPEATED_INT64_WRAPPER_CODEC);
        size += self.repeated_uint32_wrapper.calculate_size(&TEST_ALL_TYPES_PROTO3_REPEATED_UINT32_WRAPPER_CODEC);
        size += self.repeated_uint64_wrapper.calculate_size(&TEST_ALL_TYPES_PROTO3_REPEATED_UINT64_WRAPPER_CODEC);
        size += self.repeated_float_wrapper.calculate_size(&TEST_ALL_TYPES_PROTO3_REPEATED_FLOAT_WRAPPER_CODEC);
        size += self.repeated_double_wrapper.calculate_size(&TEST_ALL_TYPES_PROTO3_REPEATED_DOUBLE_WRAPPER_CODEC);
        size += self.repeated_string_wrapper.calculate_size(&TEST_ALL_TYPES_PROTO3_REPEATED_STRING_WRAPPER_CODEC);
        size += self.repeated_bytes_wrapper.calculate_size(&TEST_ALL_TYPES_PROTO3_REPEATED_BYTES_WRAPPER_CODEC);
        let optional_duration = &self.optional_duration;
        if let ::std::option::Option::Some(optional_duration) = optional_duration {
            size += 2;
            size += ::protrust::io::sizes::message(optional_duration);
        }
        let optional_timestamp = &self.optional_timestamp;
        if let ::std::option::Option::Some(optional_timestamp) = optional_timestamp {
            size += 2;
            size += ::protrust::io::sizes::message(optional_timestamp);
        }
        let optional_field_mask = &self.optional_field_mask;
        if let ::std::option::Option::Some(optional_field_mask) = optional_field_mask {
            size += 2;
            size += ::protrust::io::sizes::message(optional_field_mask);
        }
        let optional_struct = &self.optional_struct;
        if let ::std::option::Option::Some(optional_struct) = optional_struct {
            size += 2;
            size += ::protrust::io::sizes::message(optional_struct);
        }
        let optional_any = &self.optional_any;
        if let ::std::option::Option::Some(optional_any) = optional_any {
            size += 2;
            size += ::protrust::io::sizes::message(optional_any);
        }
        let optional_value = &self.optional_value;
        if let ::std::option::Option::Some(optional_value) = optional_value {
            size += 2;
            size += ::protrust::io::sizes::message(optional_value);
        }
        size += self.repeated_duration.calculate_size(&TEST_ALL_TYPES_PROTO3_REPEATED_DURATION_CODEC);
        size += self.repeated_timestamp.calculate_size(&TEST_ALL_TYPES_PROTO3_REPEATED_TIMESTAMP_CODEC);
        size += self.repeated_fieldmask.calculate_size(&TEST_ALL_TYPES_PROTO3_REPEATED_FIELDMASK_CODEC);
        size += self.repeated_struct.calculate_size(&TEST_ALL_TYPES_PROTO3_REPEATED_STRUCT_CODEC);
        size += self.repeated_any.calculate_size(&TEST_ALL_TYPES_PROTO3_REPEATED_ANY_CODEC);
        size += self.repeated_value.calculate_size(&TEST_ALL_TYPES_PROTO3_REPEATED_VALUE_CODEC);
        let fieldname1 = self.fieldname1;
        if fieldname1 != Self::FIELDNAME1_DEFAULT_VALUE {
            size += 2;
            size += ::protrust::io::sizes::int32(fieldname1);
        }
        let field_name2 = self.field_name2;
        if field_name2 != Self::FIELD_NAME2_DEFAULT_VALUE {
            size += 2;
            size += ::protrust::io::sizes::int32(field_name2);
        }
        let _field_name3 = self._field_name3;
        if _field_name3 != Self::_FIELD_NAME3_DEFAULT_VALUE {
            size += 2;
            size += ::protrust::io::sizes::int32(_field_name3);
        }
        let field__name4_ = self.field__name4_;
        if field__name4_ != Self::FIELD__NAME4__DEFAULT_VALUE {
            size += 2;
            size += ::protrust::io::sizes::int32(field__name4_);
        }
        let field0name5 = self.field0name5;
        if field0name5 != Self::FIELD0NAME5_DEFAULT_VALUE {
            size += 2;
            size += ::protrust::io::sizes::int32(field0name5);
        }
        let field_0_name6 = self.field_0_name6;
        if field_0_name6 != Self::FIELD_0_NAME6_DEFAULT_VALUE {
            size += 2;
            size += ::protrust::io::sizes::int32(field_0_name6);
        }
        let fieldName7 = self.fieldName7;
        if fieldName7 != Self::FIELDNAME7_DEFAULT_VALUE {
            size += 2;
            size += ::protrust::io::sizes::int32(fieldName7);
        }
        let FieldName8 = self.FieldName8;
        if FieldName8 != Self::FIELDNAME8_DEFAULT_VALUE {
            size += 2;
            size += ::protrust::io::sizes::int32(FieldName8);
        }
        let field_Name9 = self.field_Name9;
        if field_Name9 != Self::FIELD_NAME9_DEFAULT_VALUE {
            size += 2;
            size += ::protrust::io::sizes::int32(field_Name9);
        }
        let Field_Name10 = self.Field_Name10;
        if Field_Name10 != Self::FIELD_NAME10_DEFAULT_VALUE {
            size += 2;
            size += ::protrust::io::sizes::int32(Field_Name10);
        }
        let FIELD_NAME11 = self.FIELD_NAME11;
        if FIELD_NAME11 != Self::FIELD_NAME11_DEFAULT_VALUE {
            size += 2;
            size += ::protrust::io::sizes::int32(FIELD_NAME11);
        }
        let FIELD_name12 = self.FIELD_name12;
        if FIELD_name12 != Self::FIELD_NAME12_DEFAULT_VALUE {
            size += 2;
            size += ::protrust::io::sizes::int32(FIELD_name12);
        }
        let __field_name13 = self.__field_name13;
        if __field_name13 != Self::__FIELD_NAME13_DEFAULT_VALUE {
            size += 2;
            size += ::protrust::io::sizes::int32(__field_name13);
        }
        let __Field_name14 = self.__Field_name14;
        if __Field_name14 != Self::__FIELD_NAME14_DEFAULT_VALUE {
            size += 2;
            size += ::protrust::io::sizes::int32(__Field_name14);
        }
        let field__name15 = self.field__name15;
        if field__name15 != Self::FIELD__NAME15_DEFAULT_VALUE {
            size += 2;
            size += ::protrust::io::sizes::int32(field__name15);
        }
        let field__Name16 = self.field__Name16;
        if field__Name16 != Self::FIELD__NAME16_DEFAULT_VALUE {
            size += 2;
            size += ::protrust::io::sizes::int32(field__Name16);
        }
        let field_name17__ = self.field_name17__;
        if field_name17__ != Self::FIELD_NAME17___DEFAULT_VALUE {
            size += 2;
            size += ::protrust::io::sizes::int32(field_name17__);
        }
        let Field_name18__ = self.Field_name18__;
        if Field_name18__ != Self::FIELD_NAME18___DEFAULT_VALUE {
            size += 2;
            size += ::protrust::io::sizes::int32(Field_name18__);
        }
        size += self.unknown_fields.calculate_size();
        size
    }
    fn write_to(&self, output: &mut ::protrust::io::CodedOutput) -> ::protrust::io::OutputResult {
        let optional_int32 = self.optional_int32;
        if optional_int32 != Self::OPTIONAL_INT32_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[8])?;
            output.write_int32(optional_int32)?;
        }
        let optional_int64 = self.optional_int64;
        if optional_int64 != Self::OPTIONAL_INT64_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[16])?;
            output.write_int64(optional_int64)?;
        }
        let optional_uint32 = self.optional_uint32;
        if optional_uint32 != Self::OPTIONAL_UINT32_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[24])?;
            output.write_uint32(optional_uint32)?;
        }
        let optional_uint64 = self.optional_uint64;
        if optional_uint64 != Self::OPTIONAL_UINT64_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[32])?;
            output.write_uint64(optional_uint64)?;
        }
        let optional_sint32 = self.optional_sint32;
        if optional_sint32 != Self::OPTIONAL_SINT32_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[40])?;
            output.write_sint32(optional_sint32)?;
        }
        let optional_sint64 = self.optional_sint64;
        if optional_sint64 != Self::OPTIONAL_SINT64_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[48])?;
            output.write_sint64(optional_sint64)?;
        }
        let optional_fixed32 = self.optional_fixed32;
        if optional_fixed32 != Self::OPTIONAL_FIXED32_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[61])?;
            output.write_fixed32(optional_fixed32)?;
        }
        let optional_fixed64 = self.optional_fixed64;
        if optional_fixed64 != Self::OPTIONAL_FIXED64_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[65])?;
            output.write_fixed64(optional_fixed64)?;
        }
        let optional_sfixed32 = self.optional_sfixed32;
        if optional_sfixed32 != Self::OPTIONAL_SFIXED32_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[77])?;
            output.write_sfixed32(optional_sfixed32)?;
        }
        let optional_sfixed64 = self.optional_sfixed64;
        if optional_sfixed64 != Self::OPTIONAL_SFIXED64_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[81])?;
            output.write_sfixed64(optional_sfixed64)?;
        }
        let optional_float = self.optional_float;
        if optional_float != Self::OPTIONAL_FLOAT_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[93])?;
            output.write_float(optional_float)?;
        }
        let optional_double = self.optional_double;
        if optional_double != Self::OPTIONAL_DOUBLE_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[97])?;
            output.write_double(optional_double)?;
        }
        let optional_bool = self.optional_bool;
        if optional_bool != Self::OPTIONAL_BOOL_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[104])?;
            output.write_bool(optional_bool)?;
        }
        let optional_string = &self.optional_string;
        if optional_string != Self::OPTIONAL_STRING_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[114])?;
            output.write_string(optional_string)?;
        }
        let optional_bytes = &self.optional_bytes;
        if optional_bytes.as_slice() != Self::OPTIONAL_BYTES_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[122])?;
            output.write_bytes(optional_bytes)?;
        }
        let optional_nested_message = &self.optional_nested_message;
        if let ::std::option::Option::Some(optional_nested_message) = optional_nested_message {
            output.write_raw_tag_bytes(&[146, 1])?;
            output.write_message(optional_nested_message)?;
        }
        let optional_foreign_message = &self.optional_foreign_message;
        if let ::std::option::Option::Some(optional_foreign_message) = optional_foreign_message {
            output.write_raw_tag_bytes(&[154, 1])?;
            output.write_message(optional_foreign_message)?;
        }
        let optional_nested_enum = self.optional_nested_enum;
        if optional_nested_enum != Self::OPTIONAL_NESTED_ENUM_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[168, 1])?;
            output.write_enum_value(optional_nested_enum)?;
        }
        let optional_foreign_enum = self.optional_foreign_enum;
        if optional_foreign_enum != Self::OPTIONAL_FOREIGN_ENUM_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[176, 1])?;
            output.write_enum_value(optional_foreign_enum)?;
        }
        let optional_aliased_enum = self.optional_aliased_enum;
        if optional_aliased_enum != Self::OPTIONAL_ALIASED_ENUM_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[184, 1])?;
            output.write_enum_value(optional_aliased_enum)?;
        }
        let optional_string_piece = &self.optional_string_piece;
        if optional_string_piece != Self::OPTIONAL_STRING_PIECE_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[194, 1])?;
            output.write_string(optional_string_piece)?;
        }
        let optional_cord = &self.optional_cord;
        if optional_cord != Self::OPTIONAL_CORD_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[202, 1])?;
            output.write_string(optional_cord)?;
        }
        let recursive_message = &self.recursive_message;
        if let ::std::option::Option::Some(recursive_message) = recursive_message {
            output.write_raw_tag_bytes(&[218, 1])?;
            output.write_message(recursive_message)?;
        }
        self.repeated_int32.write_to(output, &TEST_ALL_TYPES_PROTO3_REPEATED_INT32_CODEC)?;
        self.repeated_int64.write_to(output, &TEST_ALL_TYPES_PROTO3_REPEATED_INT64_CODEC)?;
        self.repeated_uint32.write_to(output, &TEST_ALL_TYPES_PROTO3_REPEATED_UINT32_CODEC)?;
        self.repeated_uint64.write_to(output, &TEST_ALL_TYPES_PROTO3_REPEATED_UINT64_CODEC)?;
        self.repeated_sint32.write_to(output, &TEST_ALL_TYPES_PROTO3_REPEATED_SINT32_CODEC)?;
        self.repeated_sint64.write_to(output, &TEST_ALL_TYPES_PROTO3_REPEATED_SINT64_CODEC)?;
        self.repeated_fixed32.write_to(output, &TEST_ALL_TYPES_PROTO3_REPEATED_FIXED32_CODEC)?;
        self.repeated_fixed64.write_to(output, &TEST_ALL_TYPES_PROTO3_REPEATED_FIXED64_CODEC)?;
        self.repeated_sfixed32.write_to(output, &TEST_ALL_TYPES_PROTO3_REPEATED_SFIXED32_CODEC)?;
        self.repeated_sfixed64.write_to(output, &TEST_ALL_TYPES_PROTO3_REPEATED_SFIXED64_CODEC)?;
        self.repeated_float.write_to(output, &TEST_ALL_TYPES_PROTO3_REPEATED_FLOAT_CODEC)?;
        self.repeated_double.write_to(output, &TEST_ALL_TYPES_PROTO3_REPEATED_DOUBLE_CODEC)?;
        self.repeated_bool.write_to(output, &TEST_ALL_TYPES_PROTO3_REPEATED_BOOL_CODEC)?;
        self.repeated_string.write_to(output, &TEST_ALL_TYPES_PROTO3_REPEATED_STRING_CODEC)?;
        self.repeated_bytes.write_to(output, &TEST_ALL_TYPES_PROTO3_REPEATED_BYTES_CODEC)?;
        self.repeated_nested_message.write_to(output, &TEST_ALL_TYPES_PROTO3_REPEATED_NESTED_MESSAGE_CODEC)?;
        self.repeated_foreign_message.write_to(output, &TEST_ALL_TYPES_PROTO3_REPEATED_FOREIGN_MESSAGE_CODEC)?;
        self.repeated_nested_enum.write_to(output, &TEST_ALL_TYPES_PROTO3_REPEATED_NESTED_ENUM_CODEC)?;
        self.repeated_foreign_enum.write_to(output, &TEST_ALL_TYPES_PROTO3_REPEATED_FOREIGN_ENUM_CODEC)?;
        self.repeated_string_piece.write_to(output, &TEST_ALL_TYPES_PROTO3_REPEATED_STRING_PIECE_CODEC)?;
        self.repeated_cord.write_to(output, &TEST_ALL_TYPES_PROTO3_REPEATED_CORD_CODEC)?;
        self.map_int32_int32.write_to(output, &TEST_ALL_TYPES_PROTO3_MAP_INT32_INT32_CODEC)?;
        self.map_int64_int64.write_to(output, &TEST_ALL_TYPES_PROTO3_MAP_INT64_INT64_CODEC)?;
        self.map_uint32_uint32.write_to(output, &TEST_ALL_TYPES_PROTO3_MAP_UINT32_UINT32_CODEC)?;
        self.map_uint64_uint64.write_to(output, &TEST_ALL_TYPES_PROTO3_MAP_UINT64_UINT64_CODEC)?;
        self.map_sint32_sint32.write_to(output, &TEST_ALL_TYPES_PROTO3_MAP_SINT32_SINT32_CODEC)?;
        self.map_sint64_sint64.write_to(output, &TEST_ALL_TYPES_PROTO3_MAP_SINT64_SINT64_CODEC)?;
        self.map_fixed32_fixed32.write_to(output, &TEST_ALL_TYPES_PROTO3_MAP_FIXED32_FIXED32_CODEC)?;
        self.map_fixed64_fixed64.write_to(output, &TEST_ALL_TYPES_PROTO3_MAP_FIXED64_FIXED64_CODEC)?;
        self.map_sfixed32_sfixed32.write_to(output, &TEST_ALL_TYPES_PROTO3_MAP_SFIXED32_SFIXED32_CODEC)?;
        self.map_sfixed64_sfixed64.write_to(output, &TEST_ALL_TYPES_PROTO3_MAP_SFIXED64_SFIXED64_CODEC)?;
        self.map_int32_float.write_to(output, &TEST_ALL_TYPES_PROTO3_MAP_INT32_FLOAT_CODEC)?;
        self.map_int32_double.write_to(output, &TEST_ALL_TYPES_PROTO3_MAP_INT32_DOUBLE_CODEC)?;
        self.map_bool_bool.write_to(output, &TEST_ALL_TYPES_PROTO3_MAP_BOOL_BOOL_CODEC)?;
        self.map_string_string.write_to(output, &TEST_ALL_TYPES_PROTO3_MAP_STRING_STRING_CODEC)?;
        self.map_string_bytes.write_to(output, &TEST_ALL_TYPES_PROTO3_MAP_STRING_BYTES_CODEC)?;
        self.map_string_nested_message.write_to(output, &TEST_ALL_TYPES_PROTO3_MAP_STRING_NESTED_MESSAGE_CODEC)?;
        self.map_string_foreign_message.write_to(output, &TEST_ALL_TYPES_PROTO3_MAP_STRING_FOREIGN_MESSAGE_CODEC)?;
        self.map_string_nested_enum.write_to(output, &TEST_ALL_TYPES_PROTO3_MAP_STRING_NESTED_ENUM_CODEC)?;
        self.map_string_foreign_enum.write_to(output, &TEST_ALL_TYPES_PROTO3_MAP_STRING_FOREIGN_ENUM_CODEC)?;
        if let self::TestAllTypesProto3_OneofField::OneofUint32(oneof_field) = self.oneof_field {
            output.write_raw_tag_bytes(&[248, 6])?;
            output.write_uint32(oneof_field)?;
        }
        if let self::TestAllTypesProto3_OneofField::OneofNestedMessage(oneof_field) = &self.oneof_field {
            output.write_raw_tag_bytes(&[130, 7])?;
            output.write_message(oneof_field)?;
        }
        if let self::TestAllTypesProto3_OneofField::OneofString(oneof_field) = &self.oneof_field {
            output.write_raw_tag_bytes(&[138, 7])?;
            output.write_string(oneof_field)?;
        }
        if let self::TestAllTypesProto3_OneofField::OneofBytes(oneof_field) = &self.oneof_field {
            output.write_raw_tag_bytes(&[146, 7])?;
            output.write_bytes(oneof_field)?;
        }
        if let self::TestAllTypesProto3_OneofField::OneofBool(oneof_field) = self.oneof_field {
            output.write_raw_tag_bytes(&[152, 7])?;
            output.write_bool(oneof_field)?;
        }
        if let self::TestAllTypesProto3_OneofField::OneofUint64(oneof_field) = self.oneof_field {
            output.write_raw_tag_bytes(&[160, 7])?;
            output.write_uint64(oneof_field)?;
        }
        if let self::TestAllTypesProto3_OneofField::OneofFloat(oneof_field) = self.oneof_field {
            output.write_raw_tag_bytes(&[173, 7])?;
            output.write_float(oneof_field)?;
        }
        if let self::TestAllTypesProto3_OneofField::OneofDouble(oneof_field) = self.oneof_field {
            output.write_raw_tag_bytes(&[177, 7])?;
            output.write_double(oneof_field)?;
        }
        if let self::TestAllTypesProto3_OneofField::OneofEnum(oneof_field) = self.oneof_field {
            output.write_raw_tag_bytes(&[184, 7])?;
            output.write_enum_value(oneof_field)?;
        }
        let optional_bool_wrapper = &self.optional_bool_wrapper;
        if let ::std::option::Option::Some(optional_bool_wrapper) = optional_bool_wrapper {
            output.write_raw_tag_bytes(&[202, 12])?;
            output.write_message(optional_bool_wrapper)?;
        }
        let optional_int32_wrapper = &self.optional_int32_wrapper;
        if let ::std::option::Option::Some(optional_int32_wrapper) = optional_int32_wrapper {
            output.write_raw_tag_bytes(&[210, 12])?;
            output.write_message(optional_int32_wrapper)?;
        }
        let optional_int64_wrapper = &self.optional_int64_wrapper;
        if let ::std::option::Option::Some(optional_int64_wrapper) = optional_int64_wrapper {
            output.write_raw_tag_bytes(&[218, 12])?;
            output.write_message(optional_int64_wrapper)?;
        }
        let optional_uint32_wrapper = &self.optional_uint32_wrapper;
        if let ::std::option::Option::Some(optional_uint32_wrapper) = optional_uint32_wrapper {
            output.write_raw_tag_bytes(&[226, 12])?;
            output.write_message(optional_uint32_wrapper)?;
        }
        let optional_uint64_wrapper = &self.optional_uint64_wrapper;
        if let ::std::option::Option::Some(optional_uint64_wrapper) = optional_uint64_wrapper {
            output.write_raw_tag_bytes(&[234, 12])?;
            output.write_message(optional_uint64_wrapper)?;
        }
        let optional_float_wrapper = &self.optional_float_wrapper;
        if let ::std::option::Option::Some(optional_float_wrapper) = optional_float_wrapper {
            output.write_raw_tag_bytes(&[242, 12])?;
            output.write_message(optional_float_wrapper)?;
        }
        let optional_double_wrapper = &self.optional_double_wrapper;
        if let ::std::option::Option::Some(optional_double_wrapper) = optional_double_wrapper {
            output.write_raw_tag_bytes(&[250, 12])?;
            output.write_message(optional_double_wrapper)?;
        }
        let optional_string_wrapper = &self.optional_string_wrapper;
        if let ::std::option::Option::Some(optional_string_wrapper) = optional_string_wrapper {
            output.write_raw_tag_bytes(&[130, 13])?;
            output.write_message(optional_string_wrapper)?;
        }
        let optional_bytes_wrapper = &self.optional_bytes_wrapper;
        if let ::std::option::Option::Some(optional_bytes_wrapper) = optional_bytes_wrapper {
            output.write_raw_tag_bytes(&[138, 13])?;
            output.write_message(optional_bytes_wrapper)?;
        }
        self.repeated_bool_wrapper.write_to(output, &TEST_ALL_TYPES_PROTO3_REPEATED_BOOL_WRAPPER_CODEC)?;
        self.repeated_int32_wrapper.write_to(output, &TEST_ALL_TYPES_PROTO3_REPEATED_INT32_WRAPPER_CODEC)?;
        self.repeated_int64_wrapper.write_to(output, &TEST_ALL_TYPES_PROTO3_REPEATED_INT64_WRAPPER_CODEC)?;
        self.repeated_uint32_wrapper.write_to(output, &TEST_ALL_TYPES_PROTO3_REPEATED_UINT32_WRAPPER_CODEC)?;
        self.repeated_uint64_wrapper.write_to(output, &TEST_ALL_TYPES_PROTO3_REPEATED_UINT64_WRAPPER_CODEC)?;
        self.repeated_float_wrapper.write_to(output, &TEST_ALL_TYPES_PROTO3_REPEATED_FLOAT_WRAPPER_CODEC)?;
        self.repeated_double_wrapper.write_to(output, &TEST_ALL_TYPES_PROTO3_REPEATED_DOUBLE_WRAPPER_CODEC)?;
        self.repeated_string_wrapper.write_to(output, &TEST_ALL_TYPES_PROTO3_REPEATED_STRING_WRAPPER_CODEC)?;
        self.repeated_bytes_wrapper.write_to(output, &TEST_ALL_TYPES_PROTO3_REPEATED_BYTES_WRAPPER_CODEC)?;
        let optional_duration = &self.optional_duration;
        if let ::std::option::Option::Some(optional_duration) = optional_duration {
            output.write_raw_tag_bytes(&[234, 18])?;
            output.write_message(optional_duration)?;
        }
        let optional_timestamp = &self.optional_timestamp;
        if let ::std::option::Option::Some(optional_timestamp) = optional_timestamp {
            output.write_raw_tag_bytes(&[242, 18])?;
            output.write_message(optional_timestamp)?;
        }
        let optional_field_mask = &self.optional_field_mask;
        if let ::std::option::Option::Some(optional_field_mask) = optional_field_mask {
            output.write_raw_tag_bytes(&[250, 18])?;
            output.write_message(optional_field_mask)?;
        }
        let optional_struct = &self.optional_struct;
        if let ::std::option::Option::Some(optional_struct) = optional_struct {
            output.write_raw_tag_bytes(&[130, 19])?;
            output.write_message(optional_struct)?;
        }
        let optional_any = &self.optional_any;
        if let ::std::option::Option::Some(optional_any) = optional_any {
            output.write_raw_tag_bytes(&[138, 19])?;
            output.write_message(optional_any)?;
        }
        let optional_value = &self.optional_value;
        if let ::std::option::Option::Some(optional_value) = optional_value {
            output.write_raw_tag_bytes(&[146, 19])?;
            output.write_message(optional_value)?;
        }
        self.repeated_duration.write_to(output, &TEST_ALL_TYPES_PROTO3_REPEATED_DURATION_CODEC)?;
        self.repeated_timestamp.write_to(output, &TEST_ALL_TYPES_PROTO3_REPEATED_TIMESTAMP_CODEC)?;
        self.repeated_fieldmask.write_to(output, &TEST_ALL_TYPES_PROTO3_REPEATED_FIELDMASK_CODEC)?;
        self.repeated_struct.write_to(output, &TEST_ALL_TYPES_PROTO3_REPEATED_STRUCT_CODEC)?;
        self.repeated_any.write_to(output, &TEST_ALL_TYPES_PROTO3_REPEATED_ANY_CODEC)?;
        self.repeated_value.write_to(output, &TEST_ALL_TYPES_PROTO3_REPEATED_VALUE_CODEC)?;
        let fieldname1 = self.fieldname1;
        if fieldname1 != Self::FIELDNAME1_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[136, 25])?;
            output.write_int32(fieldname1)?;
        }
        let field_name2 = self.field_name2;
        if field_name2 != Self::FIELD_NAME2_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[144, 25])?;
            output.write_int32(field_name2)?;
        }
        let _field_name3 = self._field_name3;
        if _field_name3 != Self::_FIELD_NAME3_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[152, 25])?;
            output.write_int32(_field_name3)?;
        }
        let field__name4_ = self.field__name4_;
        if field__name4_ != Self::FIELD__NAME4__DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[160, 25])?;
            output.write_int32(field__name4_)?;
        }
        let field0name5 = self.field0name5;
        if field0name5 != Self::FIELD0NAME5_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[168, 25])?;
            output.write_int32(field0name5)?;
        }
        let field_0_name6 = self.field_0_name6;
        if field_0_name6 != Self::FIELD_0_NAME6_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[176, 25])?;
            output.write_int32(field_0_name6)?;
        }
        let fieldName7 = self.fieldName7;
        if fieldName7 != Self::FIELDNAME7_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[184, 25])?;
            output.write_int32(fieldName7)?;
        }
        let FieldName8 = self.FieldName8;
        if FieldName8 != Self::FIELDNAME8_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[192, 25])?;
            output.write_int32(FieldName8)?;
        }
        let field_Name9 = self.field_Name9;
        if field_Name9 != Self::FIELD_NAME9_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[200, 25])?;
            output.write_int32(field_Name9)?;
        }
        let Field_Name10 = self.Field_Name10;
        if Field_Name10 != Self::FIELD_NAME10_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[208, 25])?;
            output.write_int32(Field_Name10)?;
        }
        let FIELD_NAME11 = self.FIELD_NAME11;
        if FIELD_NAME11 != Self::FIELD_NAME11_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[216, 25])?;
            output.write_int32(FIELD_NAME11)?;
        }
        let FIELD_name12 = self.FIELD_name12;
        if FIELD_name12 != Self::FIELD_NAME12_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[224, 25])?;
            output.write_int32(FIELD_name12)?;
        }
        let __field_name13 = self.__field_name13;
        if __field_name13 != Self::__FIELD_NAME13_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[232, 25])?;
            output.write_int32(__field_name13)?;
        }
        let __Field_name14 = self.__Field_name14;
        if __Field_name14 != Self::__FIELD_NAME14_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[240, 25])?;
            output.write_int32(__Field_name14)?;
        }
        let field__name15 = self.field__name15;
        if field__name15 != Self::FIELD__NAME15_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[248, 25])?;
            output.write_int32(field__name15)?;
        }
        let field__Name16 = self.field__Name16;
        if field__Name16 != Self::FIELD__NAME16_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[128, 26])?;
            output.write_int32(field__Name16)?;
        }
        let field_name17__ = self.field_name17__;
        if field_name17__ != Self::FIELD_NAME17___DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[136, 26])?;
            output.write_int32(field_name17__)?;
        }
        let Field_name18__ = self.Field_name18__;
        if Field_name18__ != Self::FIELD_NAME18___DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[144, 26])?;
            output.write_int32(Field_name18__)?;
        }
        self.unknown_fields.write_to(output)?;
        ::std::result::Result::Ok(())
    }
}
impl ::protrust::LiteMessage for self::TestAllTypesProto3 {
    fn new() -> Self {
        Self {
            optional_int32: Self::OPTIONAL_INT32_DEFAULT_VALUE,
            optional_int64: Self::OPTIONAL_INT64_DEFAULT_VALUE,
            optional_uint32: Self::OPTIONAL_UINT32_DEFAULT_VALUE,
            optional_uint64: Self::OPTIONAL_UINT64_DEFAULT_VALUE,
            optional_sint32: Self::OPTIONAL_SINT32_DEFAULT_VALUE,
            optional_sint64: Self::OPTIONAL_SINT64_DEFAULT_VALUE,
            optional_fixed32: Self::OPTIONAL_FIXED32_DEFAULT_VALUE,
            optional_fixed64: Self::OPTIONAL_FIXED64_DEFAULT_VALUE,
            optional_sfixed32: Self::OPTIONAL_SFIXED32_DEFAULT_VALUE,
            optional_sfixed64: Self::OPTIONAL_SFIXED64_DEFAULT_VALUE,
            optional_float: Self::OPTIONAL_FLOAT_DEFAULT_VALUE,
            optional_double: Self::OPTIONAL_DOUBLE_DEFAULT_VALUE,
            optional_bool: Self::OPTIONAL_BOOL_DEFAULT_VALUE,
            optional_string: ::std::string::String::new(),
            optional_bytes: ::std::vec::Vec::new(),
            optional_nested_message: ::std::option::Option::None,
            optional_foreign_message: ::std::option::Option::None,
            optional_nested_enum: Self::OPTIONAL_NESTED_ENUM_DEFAULT_VALUE,
            optional_foreign_enum: Self::OPTIONAL_FOREIGN_ENUM_DEFAULT_VALUE,
            optional_aliased_enum: Self::OPTIONAL_ALIASED_ENUM_DEFAULT_VALUE,
            optional_string_piece: ::std::string::String::new(),
            optional_cord: ::std::string::String::new(),
            recursive_message: ::std::option::Option::None,
            repeated_int32: ::protrust::collections::RepeatedField::new(),
            repeated_int64: ::protrust::collections::RepeatedField::new(),
            repeated_uint32: ::protrust::collections::RepeatedField::new(),
            repeated_uint64: ::protrust::collections::RepeatedField::new(),
            repeated_sint32: ::protrust::collections::RepeatedField::new(),
            repeated_sint64: ::protrust::collections::RepeatedField::new(),
            repeated_fixed32: ::protrust::collections::RepeatedField::new(),
            repeated_fixed64: ::protrust::collections::RepeatedField::new(),
            repeated_sfixed32: ::protrust::collections::RepeatedField::new(),
            repeated_sfixed64: ::protrust::collections::RepeatedField::new(),
            repeated_float: ::protrust::collections::RepeatedField::new(),
            repeated_double: ::protrust::collections::RepeatedField::new(),
            repeated_bool: ::protrust::collections::RepeatedField::new(),
            repeated_string: ::protrust::collections::RepeatedField::new(),
            repeated_bytes: ::protrust::collections::RepeatedField::new(),
            repeated_nested_message: ::protrust::collections::RepeatedField::new(),
            repeated_foreign_message: ::protrust::collections::RepeatedField::new(),
            repeated_nested_enum: ::protrust::collections::RepeatedField::new(),
            repeated_foreign_enum: ::protrust::collections::RepeatedField::new(),
            repeated_string_piece: ::protrust::collections::RepeatedField::new(),
            repeated_cord: ::protrust::collections::RepeatedField::new(),
            map_int32_int32: ::protrust::collections::MapField::new(),
            map_int64_int64: ::protrust::collections::MapField::new(),
            map_uint32_uint32: ::protrust::collections::MapField::new(),
            map_uint64_uint64: ::protrust::collections::MapField::new(),
            map_sint32_sint32: ::protrust::collections::MapField::new(),
            map_sint64_sint64: ::protrust::collections::MapField::new(),
            map_fixed32_fixed32: ::protrust::collections::MapField::new(),
            map_fixed64_fixed64: ::protrust::collections::MapField::new(),
            map_sfixed32_sfixed32: ::protrust::collections::MapField::new(),
            map_sfixed64_sfixed64: ::protrust::collections::MapField::new(),
            map_int32_float: ::protrust::collections::MapField::new(),
            map_int32_double: ::protrust::collections::MapField::new(),
            map_bool_bool: ::protrust::collections::MapField::new(),
            map_string_string: ::protrust::collections::MapField::new(),
            map_string_bytes: ::protrust::collections::MapField::new(),
            map_string_nested_message: ::protrust::collections::MapField::new(),
            map_string_foreign_message: ::protrust::collections::MapField::new(),
            map_string_nested_enum: ::protrust::collections::MapField::new(),
            map_string_foreign_enum: ::protrust::collections::MapField::new(),
            optional_bool_wrapper: ::std::option::Option::None,
            optional_int32_wrapper: ::std::option::Option::None,
            optional_int64_wrapper: ::std::option::Option::None,
            optional_uint32_wrapper: ::std::option::Option::None,
            optional_uint64_wrapper: ::std::option::Option::None,
            optional_float_wrapper: ::std::option::Option::None,
            optional_double_wrapper: ::std::option::Option::None,
            optional_string_wrapper: ::std::option::Option::None,
            optional_bytes_wrapper: ::std::option::Option::None,
            repeated_bool_wrapper: ::protrust::collections::RepeatedField::new(),
            repeated_int32_wrapper: ::protrust::collections::RepeatedField::new(),
            repeated_int64_wrapper: ::protrust::collections::RepeatedField::new(),
            repeated_uint32_wrapper: ::protrust::collections::RepeatedField::new(),
            repeated_uint64_wrapper: ::protrust::collections::RepeatedField::new(),
            repeated_float_wrapper: ::protrust::collections::RepeatedField::new(),
            repeated_double_wrapper: ::protrust::collections::RepeatedField::new(),
            repeated_string_wrapper: ::protrust::collections::RepeatedField::new(),
            repeated_bytes_wrapper: ::protrust::collections::RepeatedField::new(),
            optional_duration: ::std::option::Option::None,
            optional_timestamp: ::std::option::Option::None,
            optional_field_mask: ::std::option::Option::None,
            optional_struct: ::std::option::Option::None,
            optional_any: ::std::option::Option::None,
            optional_value: ::std::option::Option::None,
            repeated_duration: ::protrust::collections::RepeatedField::new(),
            repeated_timestamp: ::protrust::collections::RepeatedField::new(),
            repeated_fieldmask: ::protrust::collections::RepeatedField::new(),
            repeated_struct: ::protrust::collections::RepeatedField::new(),
            repeated_any: ::protrust::collections::RepeatedField::new(),
            repeated_value: ::protrust::collections::RepeatedField::new(),
            fieldname1: Self::FIELDNAME1_DEFAULT_VALUE,
            field_name2: Self::FIELD_NAME2_DEFAULT_VALUE,
            _field_name3: Self::_FIELD_NAME3_DEFAULT_VALUE,
            field__name4_: Self::FIELD__NAME4__DEFAULT_VALUE,
            field0name5: Self::FIELD0NAME5_DEFAULT_VALUE,
            field_0_name6: Self::FIELD_0_NAME6_DEFAULT_VALUE,
            fieldName7: Self::FIELDNAME7_DEFAULT_VALUE,
            FieldName8: Self::FIELDNAME8_DEFAULT_VALUE,
            field_Name9: Self::FIELD_NAME9_DEFAULT_VALUE,
            Field_Name10: Self::FIELD_NAME10_DEFAULT_VALUE,
            FIELD_NAME11: Self::FIELD_NAME11_DEFAULT_VALUE,
            FIELD_name12: Self::FIELD_NAME12_DEFAULT_VALUE,
            __field_name13: Self::__FIELD_NAME13_DEFAULT_VALUE,
            __Field_name14: Self::__FIELD_NAME14_DEFAULT_VALUE,
            field__name15: Self::FIELD__NAME15_DEFAULT_VALUE,
            field__Name16: Self::FIELD__NAME16_DEFAULT_VALUE,
            field_name17__: Self::FIELD_NAME17___DEFAULT_VALUE,
            Field_name18__: Self::FIELD_NAME18___DEFAULT_VALUE,
            oneof_field: self::TestAllTypesProto3_OneofField::None,
            unknown_fields: ::protrust::UnknownFieldSet::new()
        }
    }
    fn merge(&mut self, other: &Self) {
        self.optional_int32 = other.optional_int32;
        self.optional_int64 = other.optional_int64;
        self.optional_uint32 = other.optional_uint32;
        self.optional_uint64 = other.optional_uint64;
        self.optional_sint32 = other.optional_sint32;
        self.optional_sint64 = other.optional_sint64;
        self.optional_fixed32 = other.optional_fixed32;
        self.optional_fixed64 = other.optional_fixed64;
        self.optional_sfixed32 = other.optional_sfixed32;
        self.optional_sfixed64 = other.optional_sfixed64;
        self.optional_float = other.optional_float;
        self.optional_double = other.optional_double;
        self.optional_bool = other.optional_bool;
        self.optional_string = other.optional_string.clone();
        self.optional_bytes = other.optional_bytes.clone();
        if let ::std::option::Option::Some(optional_nested_message) = &other.optional_nested_message {
            self.optional_nested_message.get_or_insert_with(::protrust::LiteMessage::new).merge(optional_nested_message);
        }
        if let ::std::option::Option::Some(optional_foreign_message) = &other.optional_foreign_message {
            self.optional_foreign_message.get_or_insert_with(::protrust::LiteMessage::new).merge(optional_foreign_message);
        }
        self.optional_nested_enum = other.optional_nested_enum;
        self.optional_foreign_enum = other.optional_foreign_enum;
        self.optional_aliased_enum = other.optional_aliased_enum;
        self.optional_string_piece = other.optional_string_piece.clone();
        self.optional_cord = other.optional_cord.clone();
        if let ::std::option::Option::Some(recursive_message) = &other.recursive_message {
            self.recursive_message.get_or_insert_with(::protrust::LiteMessage::new).merge(recursive_message);
        }
        self.repeated_int32.merge(&other.repeated_int32);
        self.repeated_int64.merge(&other.repeated_int64);
        self.repeated_uint32.merge(&other.repeated_uint32);
        self.repeated_uint64.merge(&other.repeated_uint64);
        self.repeated_sint32.merge(&other.repeated_sint32);
        self.repeated_sint64.merge(&other.repeated_sint64);
        self.repeated_fixed32.merge(&other.repeated_fixed32);
        self.repeated_fixed64.merge(&other.repeated_fixed64);
        self.repeated_sfixed32.merge(&other.repeated_sfixed32);
        self.repeated_sfixed64.merge(&other.repeated_sfixed64);
        self.repeated_float.merge(&other.repeated_float);
        self.repeated_double.merge(&other.repeated_double);
        self.repeated_bool.merge(&other.repeated_bool);
        self.repeated_string.merge(&other.repeated_string);
        self.repeated_bytes.merge(&other.repeated_bytes);
        self.repeated_nested_message.merge(&other.repeated_nested_message);
        self.repeated_foreign_message.merge(&other.repeated_foreign_message);
        self.repeated_nested_enum.merge(&other.repeated_nested_enum);
        self.repeated_foreign_enum.merge(&other.repeated_foreign_enum);
        self.repeated_string_piece.merge(&other.repeated_string_piece);
        self.repeated_cord.merge(&other.repeated_cord);
        self.map_int32_int32.merge(&other.map_int32_int32);
        self.map_int64_int64.merge(&other.map_int64_int64);
        self.map_uint32_uint32.merge(&other.map_uint32_uint32);
        self.map_uint64_uint64.merge(&other.map_uint64_uint64);
        self.map_sint32_sint32.merge(&other.map_sint32_sint32);
        self.map_sint64_sint64.merge(&other.map_sint64_sint64);
        self.map_fixed32_fixed32.merge(&other.map_fixed32_fixed32);
        self.map_fixed64_fixed64.merge(&other.map_fixed64_fixed64);
        self.map_sfixed32_sfixed32.merge(&other.map_sfixed32_sfixed32);
        self.map_sfixed64_sfixed64.merge(&other.map_sfixed64_sfixed64);
        self.map_int32_float.merge(&other.map_int32_float);
        self.map_int32_double.merge(&other.map_int32_double);
        self.map_bool_bool.merge(&other.map_bool_bool);
        self.map_string_string.merge(&other.map_string_string);
        self.map_string_bytes.merge(&other.map_string_bytes);
        self.map_string_nested_message.merge(&other.map_string_nested_message);
        self.map_string_foreign_message.merge(&other.map_string_foreign_message);
        self.map_string_nested_enum.merge(&other.map_string_nested_enum);
        self.map_string_foreign_enum.merge(&other.map_string_foreign_enum);
        if let self::TestAllTypesProto3_OneofField::OneofUint32(oneof_field) = other.oneof_field {
            self.oneof_field = self::TestAllTypesProto3_OneofField::OneofUint32(oneof_field);
        }
        if let self::TestAllTypesProto3_OneofField::OneofNestedMessage(oneof_field) = &other.oneof_field {
            if let self::TestAllTypesProto3_OneofField::OneofNestedMessage(existing) = &mut self.oneof_field {
                existing.merge(oneof_field);
            } else {
                self.oneof_field = self::TestAllTypesProto3_OneofField::OneofNestedMessage(oneof_field.clone());
            }
        }
        if let self::TestAllTypesProto3_OneofField::OneofString(oneof_field) = &other.oneof_field {
            self.oneof_field = self::TestAllTypesProto3_OneofField::OneofString(oneof_field.clone());
        }
        if let self::TestAllTypesProto3_OneofField::OneofBytes(oneof_field) = &other.oneof_field {
            self.oneof_field = self::TestAllTypesProto3_OneofField::OneofBytes(oneof_field.clone());
        }
        if let self::TestAllTypesProto3_OneofField::OneofBool(oneof_field) = other.oneof_field {
            self.oneof_field = self::TestAllTypesProto3_OneofField::OneofBool(oneof_field);
        }
        if let self::TestAllTypesProto3_OneofField::OneofUint64(oneof_field) = other.oneof_field {
            self.oneof_field = self::TestAllTypesProto3_OneofField::OneofUint64(oneof_field);
        }
        if let self::TestAllTypesProto3_OneofField::OneofFloat(oneof_field) = other.oneof_field {
            self.oneof_field = self::TestAllTypesProto3_OneofField::OneofFloat(oneof_field);
        }
        if let self::TestAllTypesProto3_OneofField::OneofDouble(oneof_field) = other.oneof_field {
            self.oneof_field = self::TestAllTypesProto3_OneofField::OneofDouble(oneof_field);
        }
        if let self::TestAllTypesProto3_OneofField::OneofEnum(oneof_field) = other.oneof_field {
            self.oneof_field = self::TestAllTypesProto3_OneofField::OneofEnum(oneof_field);
        }
        if let ::std::option::Option::Some(optional_bool_wrapper) = &other.optional_bool_wrapper {
            self.optional_bool_wrapper.get_or_insert_with(::protrust::LiteMessage::new).merge(optional_bool_wrapper);
        }
        if let ::std::option::Option::Some(optional_int32_wrapper) = &other.optional_int32_wrapper {
            self.optional_int32_wrapper.get_or_insert_with(::protrust::LiteMessage::new).merge(optional_int32_wrapper);
        }
        if let ::std::option::Option::Some(optional_int64_wrapper) = &other.optional_int64_wrapper {
            self.optional_int64_wrapper.get_or_insert_with(::protrust::LiteMessage::new).merge(optional_int64_wrapper);
        }
        if let ::std::option::Option::Some(optional_uint32_wrapper) = &other.optional_uint32_wrapper {
            self.optional_uint32_wrapper.get_or_insert_with(::protrust::LiteMessage::new).merge(optional_uint32_wrapper);
        }
        if let ::std::option::Option::Some(optional_uint64_wrapper) = &other.optional_uint64_wrapper {
            self.optional_uint64_wrapper.get_or_insert_with(::protrust::LiteMessage::new).merge(optional_uint64_wrapper);
        }
        if let ::std::option::Option::Some(optional_float_wrapper) = &other.optional_float_wrapper {
            self.optional_float_wrapper.get_or_insert_with(::protrust::LiteMessage::new).merge(optional_float_wrapper);
        }
        if let ::std::option::Option::Some(optional_double_wrapper) = &other.optional_double_wrapper {
            self.optional_double_wrapper.get_or_insert_with(::protrust::LiteMessage::new).merge(optional_double_wrapper);
        }
        if let ::std::option::Option::Some(optional_string_wrapper) = &other.optional_string_wrapper {
            self.optional_string_wrapper.get_or_insert_with(::protrust::LiteMessage::new).merge(optional_string_wrapper);
        }
        if let ::std::option::Option::Some(optional_bytes_wrapper) = &other.optional_bytes_wrapper {
            self.optional_bytes_wrapper.get_or_insert_with(::protrust::LiteMessage::new).merge(optional_bytes_wrapper);
        }
        self.repeated_bool_wrapper.merge(&other.repeated_bool_wrapper);
        self.repeated_int32_wrapper.merge(&other.repeated_int32_wrapper);
        self.repeated_int64_wrapper.merge(&other.repeated_int64_wrapper);
        self.repeated_uint32_wrapper.merge(&other.repeated_uint32_wrapper);
        self.repeated_uint64_wrapper.merge(&other.repeated_uint64_wrapper);
        self.repeated_float_wrapper.merge(&other.repeated_float_wrapper);
        self.repeated_double_wrapper.merge(&other.repeated_double_wrapper);
        self.repeated_string_wrapper.merge(&other.repeated_string_wrapper);
        self.repeated_bytes_wrapper.merge(&other.repeated_bytes_wrapper);
        if let ::std::option::Option::Some(optional_duration) = &other.optional_duration {
            self.optional_duration.get_or_insert_with(::protrust::LiteMessage::new).merge(optional_duration);
        }
        if let ::std::option::Option::Some(optional_timestamp) = &other.optional_timestamp {
            self.optional_timestamp.get_or_insert_with(::protrust::LiteMessage::new).merge(optional_timestamp);
        }
        if let ::std::option::Option::Some(optional_field_mask) = &other.optional_field_mask {
            self.optional_field_mask.get_or_insert_with(::protrust::LiteMessage::new).merge(optional_field_mask);
        }
        if let ::std::option::Option::Some(optional_struct) = &other.optional_struct {
            self.optional_struct.get_or_insert_with(::protrust::LiteMessage::new).merge(optional_struct);
        }
        if let ::std::option::Option::Some(optional_any) = &other.optional_any {
            self.optional_any.get_or_insert_with(::protrust::LiteMessage::new).merge(optional_any);
        }
        if let ::std::option::Option::Some(optional_value) = &other.optional_value {
            self.optional_value.get_or_insert_with(::protrust::LiteMessage::new).merge(optional_value);
        }
        self.repeated_duration.merge(&other.repeated_duration);
        self.repeated_timestamp.merge(&other.repeated_timestamp);
        self.repeated_fieldmask.merge(&other.repeated_fieldmask);
        self.repeated_struct.merge(&other.repeated_struct);
        self.repeated_any.merge(&other.repeated_any);
        self.repeated_value.merge(&other.repeated_value);
        self.fieldname1 = other.fieldname1;
        self.field_name2 = other.field_name2;
        self._field_name3 = other._field_name3;
        self.field__name4_ = other.field__name4_;
        self.field0name5 = other.field0name5;
        self.field_0_name6 = other.field_0_name6;
        self.fieldName7 = other.fieldName7;
        self.FieldName8 = other.FieldName8;
        self.field_Name9 = other.field_Name9;
        self.Field_Name10 = other.Field_Name10;
        self.FIELD_NAME11 = other.FIELD_NAME11;
        self.FIELD_name12 = other.FIELD_name12;
        self.__field_name13 = other.__field_name13;
        self.__Field_name14 = other.__Field_name14;
        self.field__name15 = other.field__name15;
        self.field__Name16 = other.field__Name16;
        self.field_name17__ = other.field_name17__;
        self.Field_name18__ = other.Field_name18__;
        self.unknown_fields.merge(&other.unknown_fields);
    }
}
impl ::protrust::Message for self::TestAllTypesProto3 {
    fn descriptor() -> &'static ::protrust::reflect::MessageDescriptor {
        &self::file().messages()[0]
    }
}
impl self::TestAllTypesProto3 {
    /// Gets the field number of the [`optional_int32`] field
    ///
    /// [`optional_int32`]: #method.optional_int32
    pub const OPTIONAL_INT32_FIELD_NUMBER: i32 = 1;
    /// A constant value representing the default value of the [`optional_int32`] field
    ///
    /// [`optional_int32`]: #method.optional_int32
    pub const OPTIONAL_INT32_DEFAULT_VALUE: i32 = 0;
    /// Singular
    pub fn optional_int32(&self) -> i32 {
        self.optional_int32
    }
    /// Returns a unique reference to the [`optional_int32`] field
    ///
    /// [`optional_int32`]: #method.optional_int32
    pub fn optional_int32_mut(&mut self) -> &mut i32 {
        &mut self.optional_int32
    }
    /// Gets the field number of the [`optional_int64`] field
    ///
    /// [`optional_int64`]: #method.optional_int64
    pub const OPTIONAL_INT64_FIELD_NUMBER: i32 = 2;
    /// A constant value representing the default value of the [`optional_int64`] field
    ///
    /// [`optional_int64`]: #method.optional_int64
    pub const OPTIONAL_INT64_DEFAULT_VALUE: i64 = 0;
    pub fn optional_int64(&self) -> i64 {
        self.optional_int64
    }
    /// Returns a unique reference to the [`optional_int64`] field
    ///
    /// [`optional_int64`]: #method.optional_int64
    pub fn optional_int64_mut(&mut self) -> &mut i64 {
        &mut self.optional_int64
    }
    /// Gets the field number of the [`optional_uint32`] field
    ///
    /// [`optional_uint32`]: #method.optional_uint32
    pub const OPTIONAL_UINT32_FIELD_NUMBER: i32 = 3;
    /// A constant value representing the default value of the [`optional_uint32`] field
    ///
    /// [`optional_uint32`]: #method.optional_uint32
    pub const OPTIONAL_UINT32_DEFAULT_VALUE: u32 = 0;
    pub fn optional_uint32(&self) -> u32 {
        self.optional_uint32
    }
    /// Returns a unique reference to the [`optional_uint32`] field
    ///
    /// [`optional_uint32`]: #method.optional_uint32
    pub fn optional_uint32_mut(&mut self) -> &mut u32 {
        &mut self.optional_uint32
    }
    /// Gets the field number of the [`optional_uint64`] field
    ///
    /// [`optional_uint64`]: #method.optional_uint64
    pub const OPTIONAL_UINT64_FIELD_NUMBER: i32 = 4;
    /// A constant value representing the default value of the [`optional_uint64`] field
    ///
    /// [`optional_uint64`]: #method.optional_uint64
    pub const OPTIONAL_UINT64_DEFAULT_VALUE: u64 = 0;
    pub fn optional_uint64(&self) -> u64 {
        self.optional_uint64
    }
    /// Returns a unique reference to the [`optional_uint64`] field
    ///
    /// [`optional_uint64`]: #method.optional_uint64
    pub fn optional_uint64_mut(&mut self) -> &mut u64 {
        &mut self.optional_uint64
    }
    /// Gets the field number of the [`optional_sint32`] field
    ///
    /// [`optional_sint32`]: #method.optional_sint32
    pub const OPTIONAL_SINT32_FIELD_NUMBER: i32 = 5;
    /// A constant value representing the default value of the [`optional_sint32`] field
    ///
    /// [`optional_sint32`]: #method.optional_sint32
    pub const OPTIONAL_SINT32_DEFAULT_VALUE: i32 = 0;
    pub fn optional_sint32(&self) -> i32 {
        self.optional_sint32
    }
    /// Returns a unique reference to the [`optional_sint32`] field
    ///
    /// [`optional_sint32`]: #method.optional_sint32
    pub fn optional_sint32_mut(&mut self) -> &mut i32 {
        &mut self.optional_sint32
    }
    /// Gets the field number of the [`optional_sint64`] field
    ///
    /// [`optional_sint64`]: #method.optional_sint64
    pub const OPTIONAL_SINT64_FIELD_NUMBER: i32 = 6;
    /// A constant value representing the default value of the [`optional_sint64`] field
    ///
    /// [`optional_sint64`]: #method.optional_sint64
    pub const OPTIONAL_SINT64_DEFAULT_VALUE: i64 = 0;
    pub fn optional_sint64(&self) -> i64 {
        self.optional_sint64
    }
    /// Returns a unique reference to the [`optional_sint64`] field
    ///
    /// [`optional_sint64`]: #method.optional_sint64
    pub fn optional_sint64_mut(&mut self) -> &mut i64 {
        &mut self.optional_sint64
    }
    /// Gets the field number of the [`optional_fixed32`] field
    ///
    /// [`optional_fixed32`]: #method.optional_fixed32
    pub const OPTIONAL_FIXED32_FIELD_NUMBER: i32 = 7;
    /// A constant value representing the default value of the [`optional_fixed32`] field
    ///
    /// [`optional_fixed32`]: #method.optional_fixed32
    pub const OPTIONAL_FIXED32_DEFAULT_VALUE: u32 = 0;
    pub fn optional_fixed32(&self) -> u32 {
        self.optional_fixed32
    }
    /// Returns a unique reference to the [`optional_fixed32`] field
    ///
    /// [`optional_fixed32`]: #method.optional_fixed32
    pub fn optional_fixed32_mut(&mut self) -> &mut u32 {
        &mut self.optional_fixed32
    }
    /// Gets the field number of the [`optional_fixed64`] field
    ///
    /// [`optional_fixed64`]: #method.optional_fixed64
    pub const OPTIONAL_FIXED64_FIELD_NUMBER: i32 = 8;
    /// A constant value representing the default value of the [`optional_fixed64`] field
    ///
    /// [`optional_fixed64`]: #method.optional_fixed64
    pub const OPTIONAL_FIXED64_DEFAULT_VALUE: u64 = 0;
    pub fn optional_fixed64(&self) -> u64 {
        self.optional_fixed64
    }
    /// Returns a unique reference to the [`optional_fixed64`] field
    ///
    /// [`optional_fixed64`]: #method.optional_fixed64
    pub fn optional_fixed64_mut(&mut self) -> &mut u64 {
        &mut self.optional_fixed64
    }
    /// Gets the field number of the [`optional_sfixed32`] field
    ///
    /// [`optional_sfixed32`]: #method.optional_sfixed32
    pub const OPTIONAL_SFIXED32_FIELD_NUMBER: i32 = 9;
    /// A constant value representing the default value of the [`optional_sfixed32`] field
    ///
    /// [`optional_sfixed32`]: #method.optional_sfixed32
    pub const OPTIONAL_SFIXED32_DEFAULT_VALUE: i32 = 0;
    pub fn optional_sfixed32(&self) -> i32 {
        self.optional_sfixed32
    }
    /// Returns a unique reference to the [`optional_sfixed32`] field
    ///
    /// [`optional_sfixed32`]: #method.optional_sfixed32
    pub fn optional_sfixed32_mut(&mut self) -> &mut i32 {
        &mut self.optional_sfixed32
    }
    /// Gets the field number of the [`optional_sfixed64`] field
    ///
    /// [`optional_sfixed64`]: #method.optional_sfixed64
    pub const OPTIONAL_SFIXED64_FIELD_NUMBER: i32 = 10;
    /// A constant value representing the default value of the [`optional_sfixed64`] field
    ///
    /// [`optional_sfixed64`]: #method.optional_sfixed64
    pub const OPTIONAL_SFIXED64_DEFAULT_VALUE: i64 = 0;
    pub fn optional_sfixed64(&self) -> i64 {
        self.optional_sfixed64
    }
    /// Returns a unique reference to the [`optional_sfixed64`] field
    ///
    /// [`optional_sfixed64`]: #method.optional_sfixed64
    pub fn optional_sfixed64_mut(&mut self) -> &mut i64 {
        &mut self.optional_sfixed64
    }
    /// Gets the field number of the [`optional_float`] field
    ///
    /// [`optional_float`]: #method.optional_float
    pub const OPTIONAL_FLOAT_FIELD_NUMBER: i32 = 11;
    /// A constant value representing the default value of the [`optional_float`] field
    ///
    /// [`optional_float`]: #method.optional_float
    pub const OPTIONAL_FLOAT_DEFAULT_VALUE: f32 = 0.0;
    pub fn optional_float(&self) -> f32 {
        self.optional_float
    }
    /// Returns a unique reference to the [`optional_float`] field
    ///
    /// [`optional_float`]: #method.optional_float
    pub fn optional_float_mut(&mut self) -> &mut f32 {
        &mut self.optional_float
    }
    /// Gets the field number of the [`optional_double`] field
    ///
    /// [`optional_double`]: #method.optional_double
    pub const OPTIONAL_DOUBLE_FIELD_NUMBER: i32 = 12;
    /// A constant value representing the default value of the [`optional_double`] field
    ///
    /// [`optional_double`]: #method.optional_double
    pub const OPTIONAL_DOUBLE_DEFAULT_VALUE: f64 = 0.0;
    pub fn optional_double(&self) -> f64 {
        self.optional_double
    }
    /// Returns a unique reference to the [`optional_double`] field
    ///
    /// [`optional_double`]: #method.optional_double
    pub fn optional_double_mut(&mut self) -> &mut f64 {
        &mut self.optional_double
    }
    /// Gets the field number of the [`optional_bool`] field
    ///
    /// [`optional_bool`]: #method.optional_bool
    pub const OPTIONAL_BOOL_FIELD_NUMBER: i32 = 13;
    /// A constant value representing the default value of the [`optional_bool`] field
    ///
    /// [`optional_bool`]: #method.optional_bool
    pub const OPTIONAL_BOOL_DEFAULT_VALUE: bool = false;
    pub fn optional_bool(&self) -> bool {
        self.optional_bool
    }
    /// Returns a unique reference to the [`optional_bool`] field
    ///
    /// [`optional_bool`]: #method.optional_bool
    pub fn optional_bool_mut(&mut self) -> &mut bool {
        &mut self.optional_bool
    }
    /// Gets the field number of the [`optional_string`] field
    ///
    /// [`optional_string`]: #method.optional_string
    pub const OPTIONAL_STRING_FIELD_NUMBER: i32 = 14;
    /// A constant value representing the default value of the [`optional_string`] field
    ///
    /// [`optional_string`]: #method.optional_string
    pub const OPTIONAL_STRING_DEFAULT_VALUE: &'static str = "";
    pub fn optional_string(&self) -> &::std::string::String {
        &self.optional_string
    }
    /// Returns a unique reference to the [`optional_string`] field
    ///
    /// [`optional_string`]: #method.optional_string
    pub fn optional_string_mut(&mut self) -> &mut ::std::string::String {
        &mut self.optional_string
    }
    /// Gets the field number of the [`optional_bytes`] field
    ///
    /// [`optional_bytes`]: #method.optional_bytes
    pub const OPTIONAL_BYTES_FIELD_NUMBER: i32 = 15;
    /// A constant value representing the default value of the [`optional_bytes`] field
    ///
    /// [`optional_bytes`]: #method.optional_bytes
    pub const OPTIONAL_BYTES_DEFAULT_VALUE: &'static [u8] = &[];
    pub fn optional_bytes(&self) -> &::std::vec::Vec<u8> {
        &self.optional_bytes
    }
    /// Returns a unique reference to the [`optional_bytes`] field
    ///
    /// [`optional_bytes`]: #method.optional_bytes
    pub fn optional_bytes_mut(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.optional_bytes
    }
    /// Gets the field number of the [`optional_nested_message`] field
    ///
    /// [`optional_nested_message`]: #method.optional_nested_message
    pub const OPTIONAL_NESTED_MESSAGE_FIELD_NUMBER: i32 = 18;
    pub fn optional_nested_message(&self) -> &::std::option::Option<::std::boxed::Box<self::TestAllTypesProto3_NestedMessage>> {
        &self.optional_nested_message
    }
    /// Returns a unique reference to the [`optional_nested_message`] field
    ///
    /// [`optional_nested_message`]: #method.optional_nested_message
    pub fn optional_nested_message_mut(&mut self) -> &mut ::std::option::Option<::std::boxed::Box<self::TestAllTypesProto3_NestedMessage>> {
        &mut self.optional_nested_message
    }
    /// Gets the field number of the [`optional_foreign_message`] field
    ///
    /// [`optional_foreign_message`]: #method.optional_foreign_message
    pub const OPTIONAL_FOREIGN_MESSAGE_FIELD_NUMBER: i32 = 19;
    pub fn optional_foreign_message(&self) -> &::std::option::Option<::std::boxed::Box<self::ForeignMessage>> {
        &self.optional_foreign_message
    }
    /// Returns a unique reference to the [`optional_foreign_message`] field
    ///
    /// [`optional_foreign_message`]: #method.optional_foreign_message
    pub fn optional_foreign_message_mut(&mut self) -> &mut ::std::option::Option<::std::boxed::Box<self::ForeignMessage>> {
        &mut self.optional_foreign_message
    }
    /// Gets the field number of the [`optional_nested_enum`] field
    ///
    /// [`optional_nested_enum`]: #method.optional_nested_enum
    pub const OPTIONAL_NESTED_ENUM_FIELD_NUMBER: i32 = 21;
    /// A constant value representing the default value of the [`optional_nested_enum`] field
    ///
    /// [`optional_nested_enum`]: #method.optional_nested_enum
    pub const OPTIONAL_NESTED_ENUM_DEFAULT_VALUE: ::protrust::EnumValue<self::TestAllTypesProto3_NestedEnum> = ::protrust::EnumValue::Defined(self::TestAllTypesProto3_NestedEnum::Foo);
    pub fn optional_nested_enum(&self) -> ::protrust::EnumValue<self::TestAllTypesProto3_NestedEnum> {
        self.optional_nested_enum
    }
    /// Returns a unique reference to the [`optional_nested_enum`] field
    ///
    /// [`optional_nested_enum`]: #method.optional_nested_enum
    pub fn optional_nested_enum_mut(&mut self) -> &mut ::protrust::EnumValue<self::TestAllTypesProto3_NestedEnum> {
        &mut self.optional_nested_enum
    }
    /// Gets the field number of the [`optional_foreign_enum`] field
    ///
    /// [`optional_foreign_enum`]: #method.optional_foreign_enum
    pub const OPTIONAL_FOREIGN_ENUM_FIELD_NUMBER: i32 = 22;
    /// A constant value representing the default value of the [`optional_foreign_enum`] field
    ///
    /// [`optional_foreign_enum`]: #method.optional_foreign_enum
    pub const OPTIONAL_FOREIGN_ENUM_DEFAULT_VALUE: ::protrust::EnumValue<self::ForeignEnum> = ::protrust::EnumValue::Defined(self::ForeignEnum::ForeignFoo);
    pub fn optional_foreign_enum(&self) -> ::protrust::EnumValue<self::ForeignEnum> {
        self.optional_foreign_enum
    }
    /// Returns a unique reference to the [`optional_foreign_enum`] field
    ///
    /// [`optional_foreign_enum`]: #method.optional_foreign_enum
    pub fn optional_foreign_enum_mut(&mut self) -> &mut ::protrust::EnumValue<self::ForeignEnum> {
        &mut self.optional_foreign_enum
    }
    /// Gets the field number of the [`optional_aliased_enum`] field
    ///
    /// [`optional_aliased_enum`]: #method.optional_aliased_enum
    pub const OPTIONAL_ALIASED_ENUM_FIELD_NUMBER: i32 = 23;
    /// A constant value representing the default value of the [`optional_aliased_enum`] field
    ///
    /// [`optional_aliased_enum`]: #method.optional_aliased_enum
    pub const OPTIONAL_ALIASED_ENUM_DEFAULT_VALUE: ::protrust::EnumValue<self::TestAllTypesProto3_AliasedEnum> = ::protrust::EnumValue::Defined(self::TestAllTypesProto3_AliasedEnum::AliasFoo);
    pub fn optional_aliased_enum(&self) -> ::protrust::EnumValue<self::TestAllTypesProto3_AliasedEnum> {
        self.optional_aliased_enum
    }
    /// Returns a unique reference to the [`optional_aliased_enum`] field
    ///
    /// [`optional_aliased_enum`]: #method.optional_aliased_enum
    pub fn optional_aliased_enum_mut(&mut self) -> &mut ::protrust::EnumValue<self::TestAllTypesProto3_AliasedEnum> {
        &mut self.optional_aliased_enum
    }
    /// Gets the field number of the [`optional_string_piece`] field
    ///
    /// [`optional_string_piece`]: #method.optional_string_piece
    pub const OPTIONAL_STRING_PIECE_FIELD_NUMBER: i32 = 24;
    /// A constant value representing the default value of the [`optional_string_piece`] field
    ///
    /// [`optional_string_piece`]: #method.optional_string_piece
    pub const OPTIONAL_STRING_PIECE_DEFAULT_VALUE: &'static str = "";
    pub fn optional_string_piece(&self) -> &::std::string::String {
        &self.optional_string_piece
    }
    /// Returns a unique reference to the [`optional_string_piece`] field
    ///
    /// [`optional_string_piece`]: #method.optional_string_piece
    pub fn optional_string_piece_mut(&mut self) -> &mut ::std::string::String {
        &mut self.optional_string_piece
    }
    /// Gets the field number of the [`optional_cord`] field
    ///
    /// [`optional_cord`]: #method.optional_cord
    pub const OPTIONAL_CORD_FIELD_NUMBER: i32 = 25;
    /// A constant value representing the default value of the [`optional_cord`] field
    ///
    /// [`optional_cord`]: #method.optional_cord
    pub const OPTIONAL_CORD_DEFAULT_VALUE: &'static str = "";
    pub fn optional_cord(&self) -> &::std::string::String {
        &self.optional_cord
    }
    /// Returns a unique reference to the [`optional_cord`] field
    ///
    /// [`optional_cord`]: #method.optional_cord
    pub fn optional_cord_mut(&mut self) -> &mut ::std::string::String {
        &mut self.optional_cord
    }
    /// Gets the field number of the [`recursive_message`] field
    ///
    /// [`recursive_message`]: #method.recursive_message
    pub const RECURSIVE_MESSAGE_FIELD_NUMBER: i32 = 27;
    pub fn recursive_message(&self) -> &::std::option::Option<::std::boxed::Box<self::TestAllTypesProto3>> {
        &self.recursive_message
    }
    /// Returns a unique reference to the [`recursive_message`] field
    ///
    /// [`recursive_message`]: #method.recursive_message
    pub fn recursive_message_mut(&mut self) -> &mut ::std::option::Option<::std::boxed::Box<self::TestAllTypesProto3>> {
        &mut self.recursive_message
    }
    /// Gets the field number of the [`repeated_int32`] field
    ///
    /// [`repeated_int32`]: #method.repeated_int32
    pub const REPEATED_INT32_FIELD_NUMBER: i32 = 31;
    /// Repeated
    pub fn repeated_int32(&self) -> &::protrust::collections::RepeatedField<i32> {
        &self.repeated_int32
    }
    /// Returns a unique reference to the [`repeated_int32`] field
    ///
    /// [`repeated_int32`]: #method.repeated_int32
    pub fn repeated_int32_mut(&mut self) -> &mut ::protrust::collections::RepeatedField<i32> {
        &mut self.repeated_int32
    }
    /// Gets the field number of the [`repeated_int64`] field
    ///
    /// [`repeated_int64`]: #method.repeated_int64
    pub const REPEATED_INT64_FIELD_NUMBER: i32 = 32;
    pub fn repeated_int64(&self) -> &::protrust::collections::RepeatedField<i64> {
        &self.repeated_int64
    }
    /// Returns a unique reference to the [`repeated_int64`] field
    ///
    /// [`repeated_int64`]: #method.repeated_int64
    pub fn repeated_int64_mut(&mut self) -> &mut ::protrust::collections::RepeatedField<i64> {
        &mut self.repeated_int64
    }
    /// Gets the field number of the [`repeated_uint32`] field
    ///
    /// [`repeated_uint32`]: #method.repeated_uint32
    pub const REPEATED_UINT32_FIELD_NUMBER: i32 = 33;
    pub fn repeated_uint32(&self) -> &::protrust::collections::RepeatedField<u32> {
        &self.repeated_uint32
    }
    /// Returns a unique reference to the [`repeated_uint32`] field
    ///
    /// [`repeated_uint32`]: #method.repeated_uint32
    pub fn repeated_uint32_mut(&mut self) -> &mut ::protrust::collections::RepeatedField<u32> {
        &mut self.repeated_uint32
    }
    /// Gets the field number of the [`repeated_uint64`] field
    ///
    /// [`repeated_uint64`]: #method.repeated_uint64
    pub const REPEATED_UINT64_FIELD_NUMBER: i32 = 34;
    pub fn repeated_uint64(&self) -> &::protrust::collections::RepeatedField<u64> {
        &self.repeated_uint64
    }
    /// Returns a unique reference to the [`repeated_uint64`] field
    ///
    /// [`repeated_uint64`]: #method.repeated_uint64
    pub fn repeated_uint64_mut(&mut self) -> &mut ::protrust::collections::RepeatedField<u64> {
        &mut self.repeated_uint64
    }
    /// Gets the field number of the [`repeated_sint32`] field
    ///
    /// [`repeated_sint32`]: #method.repeated_sint32
    pub const REPEATED_SINT32_FIELD_NUMBER: i32 = 35;
    pub fn repeated_sint32(&self) -> &::protrust::collections::RepeatedField<i32> {
        &self.repeated_sint32
    }
    /// Returns a unique reference to the [`repeated_sint32`] field
    ///
    /// [`repeated_sint32`]: #method.repeated_sint32
    pub fn repeated_sint32_mut(&mut self) -> &mut ::protrust::collections::RepeatedField<i32> {
        &mut self.repeated_sint32
    }
    /// Gets the field number of the [`repeated_sint64`] field
    ///
    /// [`repeated_sint64`]: #method.repeated_sint64
    pub const REPEATED_SINT64_FIELD_NUMBER: i32 = 36;
    pub fn repeated_sint64(&self) -> &::protrust::collections::RepeatedField<i64> {
        &self.repeated_sint64
    }
    /// Returns a unique reference to the [`repeated_sint64`] field
    ///
    /// [`repeated_sint64`]: #method.repeated_sint64
    pub fn repeated_sint64_mut(&mut self) -> &mut ::protrust::collections::RepeatedField<i64> {
        &mut self.repeated_sint64
    }
    /// Gets the field number of the [`repeated_fixed32`] field
    ///
    /// [`repeated_fixed32`]: #method.repeated_fixed32
    pub const REPEATED_FIXED32_FIELD_NUMBER: i32 = 37;
    pub fn repeated_fixed32(&self) -> &::protrust::collections::RepeatedField<u32> {
        &self.repeated_fixed32
    }
    /// Returns a unique reference to the [`repeated_fixed32`] field
    ///
    /// [`repeated_fixed32`]: #method.repeated_fixed32
    pub fn repeated_fixed32_mut(&mut self) -> &mut ::protrust::collections::RepeatedField<u32> {
        &mut self.repeated_fixed32
    }
    /// Gets the field number of the [`repeated_fixed64`] field
    ///
    /// [`repeated_fixed64`]: #method.repeated_fixed64
    pub const REPEATED_FIXED64_FIELD_NUMBER: i32 = 38;
    pub fn repeated_fixed64(&self) -> &::protrust::collections::RepeatedField<u64> {
        &self.repeated_fixed64
    }
    /// Returns a unique reference to the [`repeated_fixed64`] field
    ///
    /// [`repeated_fixed64`]: #method.repeated_fixed64
    pub fn repeated_fixed64_mut(&mut self) -> &mut ::protrust::collections::RepeatedField<u64> {
        &mut self.repeated_fixed64
    }
    /// Gets the field number of the [`repeated_sfixed32`] field
    ///
    /// [`repeated_sfixed32`]: #method.repeated_sfixed32
    pub const REPEATED_SFIXED32_FIELD_NUMBER: i32 = 39;
    pub fn repeated_sfixed32(&self) -> &::protrust::collections::RepeatedField<i32> {
        &self.repeated_sfixed32
    }
    /// Returns a unique reference to the [`repeated_sfixed32`] field
    ///
    /// [`repeated_sfixed32`]: #method.repeated_sfixed32
    pub fn repeated_sfixed32_mut(&mut self) -> &mut ::protrust::collections::RepeatedField<i32> {
        &mut self.repeated_sfixed32
    }
    /// Gets the field number of the [`repeated_sfixed64`] field
    ///
    /// [`repeated_sfixed64`]: #method.repeated_sfixed64
    pub const REPEATED_SFIXED64_FIELD_NUMBER: i32 = 40;
    pub fn repeated_sfixed64(&self) -> &::protrust::collections::RepeatedField<i64> {
        &self.repeated_sfixed64
    }
    /// Returns a unique reference to the [`repeated_sfixed64`] field
    ///
    /// [`repeated_sfixed64`]: #method.repeated_sfixed64
    pub fn repeated_sfixed64_mut(&mut self) -> &mut ::protrust::collections::RepeatedField<i64> {
        &mut self.repeated_sfixed64
    }
    /// Gets the field number of the [`repeated_float`] field
    ///
    /// [`repeated_float`]: #method.repeated_float
    pub const REPEATED_FLOAT_FIELD_NUMBER: i32 = 41;
    pub fn repeated_float(&self) -> &::protrust::collections::RepeatedField<f32> {
        &self.repeated_float
    }
    /// Returns a unique reference to the [`repeated_float`] field
    ///
    /// [`repeated_float`]: #method.repeated_float
    pub fn repeated_float_mut(&mut self) -> &mut ::protrust::collections::RepeatedField<f32> {
        &mut self.repeated_float
    }
    /// Gets the field number of the [`repeated_double`] field
    ///
    /// [`repeated_double`]: #method.repeated_double
    pub const REPEATED_DOUBLE_FIELD_NUMBER: i32 = 42;
    pub fn repeated_double(&self) -> &::protrust::collections::RepeatedField<f64> {
        &self.repeated_double
    }
    /// Returns a unique reference to the [`repeated_double`] field
    ///
    /// [`repeated_double`]: #method.repeated_double
    pub fn repeated_double_mut(&mut self) -> &mut ::protrust::collections::RepeatedField<f64> {
        &mut self.repeated_double
    }
    /// Gets the field number of the [`repeated_bool`] field
    ///
    /// [`repeated_bool`]: #method.repeated_bool
    pub const REPEATED_BOOL_FIELD_NUMBER: i32 = 43;
    pub fn repeated_bool(&self) -> &::protrust::collections::RepeatedField<bool> {
        &self.repeated_bool
    }
    /// Returns a unique reference to the [`repeated_bool`] field
    ///
    /// [`repeated_bool`]: #method.repeated_bool
    pub fn repeated_bool_mut(&mut self) -> &mut ::protrust::collections::RepeatedField<bool> {
        &mut self.repeated_bool
    }
    /// Gets the field number of the [`repeated_string`] field
    ///
    /// [`repeated_string`]: #method.repeated_string
    pub const REPEATED_STRING_FIELD_NUMBER: i32 = 44;
    pub fn repeated_string(&self) -> &::protrust::collections::RepeatedField<::std::string::String> {
        &self.repeated_string
    }
    /// Returns a unique reference to the [`repeated_string`] field
    ///
    /// [`repeated_string`]: #method.repeated_string
    pub fn repeated_string_mut(&mut self) -> &mut ::protrust::collections::RepeatedField<::std::string::String> {
        &mut self.repeated_string
    }
    /// Gets the field number of the [`repeated_bytes`] field
    ///
    /// [`repeated_bytes`]: #method.repeated_bytes
    pub const REPEATED_BYTES_FIELD_NUMBER: i32 = 45;
    pub fn repeated_bytes(&self) -> &::protrust::collections::RepeatedField<::std::vec::Vec<u8>> {
        &self.repeated_bytes
    }
    /// Returns a unique reference to the [`repeated_bytes`] field
    ///
    /// [`repeated_bytes`]: #method.repeated_bytes
    pub fn repeated_bytes_mut(&mut self) -> &mut ::protrust::collections::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.repeated_bytes
    }
    /// Gets the field number of the [`repeated_nested_message`] field
    ///
    /// [`repeated_nested_message`]: #method.repeated_nested_message
    pub const REPEATED_NESTED_MESSAGE_FIELD_NUMBER: i32 = 48;
    pub fn repeated_nested_message(&self) -> &::protrust::collections::RepeatedField<self::TestAllTypesProto3_NestedMessage> {
        &self.repeated_nested_message
    }
    /// Returns a unique reference to the [`repeated_nested_message`] field
    ///
    /// [`repeated_nested_message`]: #method.repeated_nested_message
    pub fn repeated_nested_message_mut(&mut self) -> &mut ::protrust::collections::RepeatedField<self::TestAllTypesProto3_NestedMessage> {
        &mut self.repeated_nested_message
    }
    /// Gets the field number of the [`repeated_foreign_message`] field
    ///
    /// [`repeated_foreign_message`]: #method.repeated_foreign_message
    pub const REPEATED_FOREIGN_MESSAGE_FIELD_NUMBER: i32 = 49;
    pub fn repeated_foreign_message(&self) -> &::protrust::collections::RepeatedField<self::ForeignMessage> {
        &self.repeated_foreign_message
    }
    /// Returns a unique reference to the [`repeated_foreign_message`] field
    ///
    /// [`repeated_foreign_message`]: #method.repeated_foreign_message
    pub fn repeated_foreign_message_mut(&mut self) -> &mut ::protrust::collections::RepeatedField<self::ForeignMessage> {
        &mut self.repeated_foreign_message
    }
    /// Gets the field number of the [`repeated_nested_enum`] field
    ///
    /// [`repeated_nested_enum`]: #method.repeated_nested_enum
    pub const REPEATED_NESTED_ENUM_FIELD_NUMBER: i32 = 51;
    pub fn repeated_nested_enum(&self) -> &::protrust::collections::RepeatedField<::protrust::EnumValue<self::TestAllTypesProto3_NestedEnum>> {
        &self.repeated_nested_enum
    }
    /// Returns a unique reference to the [`repeated_nested_enum`] field
    ///
    /// [`repeated_nested_enum`]: #method.repeated_nested_enum
    pub fn repeated_nested_enum_mut(&mut self) -> &mut ::protrust::collections::RepeatedField<::protrust::EnumValue<self::TestAllTypesProto3_NestedEnum>> {
        &mut self.repeated_nested_enum
    }
    /// Gets the field number of the [`repeated_foreign_enum`] field
    ///
    /// [`repeated_foreign_enum`]: #method.repeated_foreign_enum
    pub const REPEATED_FOREIGN_ENUM_FIELD_NUMBER: i32 = 52;
    pub fn repeated_foreign_enum(&self) -> &::protrust::collections::RepeatedField<::protrust::EnumValue<self::ForeignEnum>> {
        &self.repeated_foreign_enum
    }
    /// Returns a unique reference to the [`repeated_foreign_enum`] field
    ///
    /// [`repeated_foreign_enum`]: #method.repeated_foreign_enum
    pub fn repeated_foreign_enum_mut(&mut self) -> &mut ::protrust::collections::RepeatedField<::protrust::EnumValue<self::ForeignEnum>> {
        &mut self.repeated_foreign_enum
    }
    /// Gets the field number of the [`repeated_string_piece`] field
    ///
    /// [`repeated_string_piece`]: #method.repeated_string_piece
    pub const REPEATED_STRING_PIECE_FIELD_NUMBER: i32 = 54;
    pub fn repeated_string_piece(&self) -> &::protrust::collections::RepeatedField<::std::string::String> {
        &self.repeated_string_piece
    }
    /// Returns a unique reference to the [`repeated_string_piece`] field
    ///
    /// [`repeated_string_piece`]: #method.repeated_string_piece
    pub fn repeated_string_piece_mut(&mut self) -> &mut ::protrust::collections::RepeatedField<::std::string::String> {
        &mut self.repeated_string_piece
    }
    /// Gets the field number of the [`repeated_cord`] field
    ///
    /// [`repeated_cord`]: #method.repeated_cord
    pub const REPEATED_CORD_FIELD_NUMBER: i32 = 55;
    pub fn repeated_cord(&self) -> &::protrust::collections::RepeatedField<::std::string::String> {
        &self.repeated_cord
    }
    /// Returns a unique reference to the [`repeated_cord`] field
    ///
    /// [`repeated_cord`]: #method.repeated_cord
    pub fn repeated_cord_mut(&mut self) -> &mut ::protrust::collections::RepeatedField<::std::string::String> {
        &mut self.repeated_cord
    }
    /// Gets the field number of the [`map_int32_int32`] field
    ///
    /// [`map_int32_int32`]: #method.map_int32_int32
    pub const MAP_INT32_INT32_FIELD_NUMBER: i32 = 56;
    /// Map
    pub fn map_int32_int32(&self) -> &::protrust::collections::MapField<i32, i32> {
        &self.map_int32_int32
    }
    /// Returns a unique reference to the [`map_int32_int32`] field
    ///
    /// [`map_int32_int32`]: #method.map_int32_int32
    pub fn map_int32_int32_mut(&mut self) -> &mut ::protrust::collections::MapField<i32, i32> {
        &mut self.map_int32_int32
    }
    /// Gets the field number of the [`map_int64_int64`] field
    ///
    /// [`map_int64_int64`]: #method.map_int64_int64
    pub const MAP_INT64_INT64_FIELD_NUMBER: i32 = 57;
    pub fn map_int64_int64(&self) -> &::protrust::collections::MapField<i64, i64> {
        &self.map_int64_int64
    }
    /// Returns a unique reference to the [`map_int64_int64`] field
    ///
    /// [`map_int64_int64`]: #method.map_int64_int64
    pub fn map_int64_int64_mut(&mut self) -> &mut ::protrust::collections::MapField<i64, i64> {
        &mut self.map_int64_int64
    }
    /// Gets the field number of the [`map_uint32_uint32`] field
    ///
    /// [`map_uint32_uint32`]: #method.map_uint32_uint32
    pub const MAP_UINT32_UINT32_FIELD_NUMBER: i32 = 58;
    pub fn map_uint32_uint32(&self) -> &::protrust::collections::MapField<u32, u32> {
        &self.map_uint32_uint32
    }
    /// Returns a unique reference to the [`map_uint32_uint32`] field
    ///
    /// [`map_uint32_uint32`]: #method.map_uint32_uint32
    pub fn map_uint32_uint32_mut(&mut self) -> &mut ::protrust::collections::MapField<u32, u32> {
        &mut self.map_uint32_uint32
    }
    /// Gets the field number of the [`map_uint64_uint64`] field
    ///
    /// [`map_uint64_uint64`]: #method.map_uint64_uint64
    pub const MAP_UINT64_UINT64_FIELD_NUMBER: i32 = 59;
    pub fn map_uint64_uint64(&self) -> &::protrust::collections::MapField<u64, u64> {
        &self.map_uint64_uint64
    }
    /// Returns a unique reference to the [`map_uint64_uint64`] field
    ///
    /// [`map_uint64_uint64`]: #method.map_uint64_uint64
    pub fn map_uint64_uint64_mut(&mut self) -> &mut ::protrust::collections::MapField<u64, u64> {
        &mut self.map_uint64_uint64
    }
    /// Gets the field number of the [`map_sint32_sint32`] field
    ///
    /// [`map_sint32_sint32`]: #method.map_sint32_sint32
    pub const MAP_SINT32_SINT32_FIELD_NUMBER: i32 = 60;
    pub fn map_sint32_sint32(&self) -> &::protrust::collections::MapField<i32, i32> {
        &self.map_sint32_sint32
    }
    /// Returns a unique reference to the [`map_sint32_sint32`] field
    ///
    /// [`map_sint32_sint32`]: #method.map_sint32_sint32
    pub fn map_sint32_sint32_mut(&mut self) -> &mut ::protrust::collections::MapField<i32, i32> {
        &mut self.map_sint32_sint32
    }
    /// Gets the field number of the [`map_sint64_sint64`] field
    ///
    /// [`map_sint64_sint64`]: #method.map_sint64_sint64
    pub const MAP_SINT64_SINT64_FIELD_NUMBER: i32 = 61;
    pub fn map_sint64_sint64(&self) -> &::protrust::collections::MapField<i64, i64> {
        &self.map_sint64_sint64
    }
    /// Returns a unique reference to the [`map_sint64_sint64`] field
    ///
    /// [`map_sint64_sint64`]: #method.map_sint64_sint64
    pub fn map_sint64_sint64_mut(&mut self) -> &mut ::protrust::collections::MapField<i64, i64> {
        &mut self.map_sint64_sint64
    }
    /// Gets the field number of the [`map_fixed32_fixed32`] field
    ///
    /// [`map_fixed32_fixed32`]: #method.map_fixed32_fixed32
    pub const MAP_FIXED32_FIXED32_FIELD_NUMBER: i32 = 62;
    pub fn map_fixed32_fixed32(&self) -> &::protrust::collections::MapField<u32, u32> {
        &self.map_fixed32_fixed32
    }
    /// Returns a unique reference to the [`map_fixed32_fixed32`] field
    ///
    /// [`map_fixed32_fixed32`]: #method.map_fixed32_fixed32
    pub fn map_fixed32_fixed32_mut(&mut self) -> &mut ::protrust::collections::MapField<u32, u32> {
        &mut self.map_fixed32_fixed32
    }
    /// Gets the field number of the [`map_fixed64_fixed64`] field
    ///
    /// [`map_fixed64_fixed64`]: #method.map_fixed64_fixed64
    pub const MAP_FIXED64_FIXED64_FIELD_NUMBER: i32 = 63;
    pub fn map_fixed64_fixed64(&self) -> &::protrust::collections::MapField<u64, u64> {
        &self.map_fixed64_fixed64
    }
    /// Returns a unique reference to the [`map_fixed64_fixed64`] field
    ///
    /// [`map_fixed64_fixed64`]: #method.map_fixed64_fixed64
    pub fn map_fixed64_fixed64_mut(&mut self) -> &mut ::protrust::collections::MapField<u64, u64> {
        &mut self.map_fixed64_fixed64
    }
    /// Gets the field number of the [`map_sfixed32_sfixed32`] field
    ///
    /// [`map_sfixed32_sfixed32`]: #method.map_sfixed32_sfixed32
    pub const MAP_SFIXED32_SFIXED32_FIELD_NUMBER: i32 = 64;
    pub fn map_sfixed32_sfixed32(&self) -> &::protrust::collections::MapField<i32, i32> {
        &self.map_sfixed32_sfixed32
    }
    /// Returns a unique reference to the [`map_sfixed32_sfixed32`] field
    ///
    /// [`map_sfixed32_sfixed32`]: #method.map_sfixed32_sfixed32
    pub fn map_sfixed32_sfixed32_mut(&mut self) -> &mut ::protrust::collections::MapField<i32, i32> {
        &mut self.map_sfixed32_sfixed32
    }
    /// Gets the field number of the [`map_sfixed64_sfixed64`] field
    ///
    /// [`map_sfixed64_sfixed64`]: #method.map_sfixed64_sfixed64
    pub const MAP_SFIXED64_SFIXED64_FIELD_NUMBER: i32 = 65;
    pub fn map_sfixed64_sfixed64(&self) -> &::protrust::collections::MapField<i64, i64> {
        &self.map_sfixed64_sfixed64
    }
    /// Returns a unique reference to the [`map_sfixed64_sfixed64`] field
    ///
    /// [`map_sfixed64_sfixed64`]: #method.map_sfixed64_sfixed64
    pub fn map_sfixed64_sfixed64_mut(&mut self) -> &mut ::protrust::collections::MapField<i64, i64> {
        &mut self.map_sfixed64_sfixed64
    }
    /// Gets the field number of the [`map_int32_float`] field
    ///
    /// [`map_int32_float`]: #method.map_int32_float
    pub const MAP_INT32_FLOAT_FIELD_NUMBER: i32 = 66;
    pub fn map_int32_float(&self) -> &::protrust::collections::MapField<i32, f32> {
        &self.map_int32_float
    }
    /// Returns a unique reference to the [`map_int32_float`] field
    ///
    /// [`map_int32_float`]: #method.map_int32_float
    pub fn map_int32_float_mut(&mut self) -> &mut ::protrust::collections::MapField<i32, f32> {
        &mut self.map_int32_float
    }
    /// Gets the field number of the [`map_int32_double`] field
    ///
    /// [`map_int32_double`]: #method.map_int32_double
    pub const MAP_INT32_DOUBLE_FIELD_NUMBER: i32 = 67;
    pub fn map_int32_double(&self) -> &::protrust::collections::MapField<i32, f64> {
        &self.map_int32_double
    }
    /// Returns a unique reference to the [`map_int32_double`] field
    ///
    /// [`map_int32_double`]: #method.map_int32_double
    pub fn map_int32_double_mut(&mut self) -> &mut ::protrust::collections::MapField<i32, f64> {
        &mut self.map_int32_double
    }
    /// Gets the field number of the [`map_bool_bool`] field
    ///
    /// [`map_bool_bool`]: #method.map_bool_bool
    pub const MAP_BOOL_BOOL_FIELD_NUMBER: i32 = 68;
    pub fn map_bool_bool(&self) -> &::protrust::collections::MapField<bool, bool> {
        &self.map_bool_bool
    }
    /// Returns a unique reference to the [`map_bool_bool`] field
    ///
    /// [`map_bool_bool`]: #method.map_bool_bool
    pub fn map_bool_bool_mut(&mut self) -> &mut ::protrust::collections::MapField<bool, bool> {
        &mut self.map_bool_bool
    }
    /// Gets the field number of the [`map_string_string`] field
    ///
    /// [`map_string_string`]: #method.map_string_string
    pub const MAP_STRING_STRING_FIELD_NUMBER: i32 = 69;
    pub fn map_string_string(&self) -> &::protrust::collections::MapField<::std::string::String, ::std::string::String> {
        &self.map_string_string
    }
    /// Returns a unique reference to the [`map_string_string`] field
    ///
    /// [`map_string_string`]: #method.map_string_string
    pub fn map_string_string_mut(&mut self) -> &mut ::protrust::collections::MapField<::std::string::String, ::std::string::String> {
        &mut self.map_string_string
    }
    /// Gets the field number of the [`map_string_bytes`] field
    ///
    /// [`map_string_bytes`]: #method.map_string_bytes
    pub const MAP_STRING_BYTES_FIELD_NUMBER: i32 = 70;
    pub fn map_string_bytes(&self) -> &::protrust::collections::MapField<::std::string::String, ::std::vec::Vec<u8>> {
        &self.map_string_bytes
    }
    /// Returns a unique reference to the [`map_string_bytes`] field
    ///
    /// [`map_string_bytes`]: #method.map_string_bytes
    pub fn map_string_bytes_mut(&mut self) -> &mut ::protrust::collections::MapField<::std::string::String, ::std::vec::Vec<u8>> {
        &mut self.map_string_bytes
    }
    /// Gets the field number of the [`map_string_nested_message`] field
    ///
    /// [`map_string_nested_message`]: #method.map_string_nested_message
    pub const MAP_STRING_NESTED_MESSAGE_FIELD_NUMBER: i32 = 71;
    pub fn map_string_nested_message(&self) -> &::protrust::collections::MapField<::std::string::String, self::TestAllTypesProto3_NestedMessage> {
        &self.map_string_nested_message
    }
    /// Returns a unique reference to the [`map_string_nested_message`] field
    ///
    /// [`map_string_nested_message`]: #method.map_string_nested_message
    pub fn map_string_nested_message_mut(&mut self) -> &mut ::protrust::collections::MapField<::std::string::String, self::TestAllTypesProto3_NestedMessage> {
        &mut self.map_string_nested_message
    }
    /// Gets the field number of the [`map_string_foreign_message`] field
    ///
    /// [`map_string_foreign_message`]: #method.map_string_foreign_message
    pub const MAP_STRING_FOREIGN_MESSAGE_FIELD_NUMBER: i32 = 72;
    pub fn map_string_foreign_message(&self) -> &::protrust::collections::MapField<::std::string::String, self::ForeignMessage> {
        &self.map_string_foreign_message
    }
    /// Returns a unique reference to the [`map_string_foreign_message`] field
    ///
    /// [`map_string_foreign_message`]: #method.map_string_foreign_message
    pub fn map_string_foreign_message_mut(&mut self) -> &mut ::protrust::collections::MapField<::std::string::String, self::ForeignMessage> {
        &mut self.map_string_foreign_message
    }
    /// Gets the field number of the [`map_string_nested_enum`] field
    ///
    /// [`map_string_nested_enum`]: #method.map_string_nested_enum
    pub const MAP_STRING_NESTED_ENUM_FIELD_NUMBER: i32 = 73;
    pub fn map_string_nested_enum(&self) -> &::protrust::collections::MapField<::std::string::String, ::protrust::EnumValue<self::TestAllTypesProto3_NestedEnum>> {
        &self.map_string_nested_enum
    }
    /// Returns a unique reference to the [`map_string_nested_enum`] field
    ///
    /// [`map_string_nested_enum`]: #method.map_string_nested_enum
    pub fn map_string_nested_enum_mut(&mut self) -> &mut ::protrust::collections::MapField<::std::string::String, ::protrust::EnumValue<self::TestAllTypesProto3_NestedEnum>> {
        &mut self.map_string_nested_enum
    }
    /// Gets the field number of the [`map_string_foreign_enum`] field
    ///
    /// [`map_string_foreign_enum`]: #method.map_string_foreign_enum
    pub const MAP_STRING_FOREIGN_ENUM_FIELD_NUMBER: i32 = 74;
    pub fn map_string_foreign_enum(&self) -> &::protrust::collections::MapField<::std::string::String, ::protrust::EnumValue<self::ForeignEnum>> {
        &self.map_string_foreign_enum
    }
    /// Returns a unique reference to the [`map_string_foreign_enum`] field
    ///
    /// [`map_string_foreign_enum`]: #method.map_string_foreign_enum
    pub fn map_string_foreign_enum_mut(&mut self) -> &mut ::protrust::collections::MapField<::std::string::String, ::protrust::EnumValue<self::ForeignEnum>> {
        &mut self.map_string_foreign_enum
    }
    /// Gets the field number of the [`optional_bool_wrapper`] field
    ///
    /// [`optional_bool_wrapper`]: #method.optional_bool_wrapper
    pub const OPTIONAL_BOOL_WRAPPER_FIELD_NUMBER: i32 = 201;
    /// Well-known types
    pub fn optional_bool_wrapper(&self) -> &::std::option::Option<::std::boxed::Box<::protrust::wkt::wrappers::BoolValue>> {
        &self.optional_bool_wrapper
    }
    /// Returns a unique reference to the [`optional_bool_wrapper`] field
    ///
    /// [`optional_bool_wrapper`]: #method.optional_bool_wrapper
    pub fn optional_bool_wrapper_mut(&mut self) -> &mut ::std::option::Option<::std::boxed::Box<::protrust::wkt::wrappers::BoolValue>> {
        &mut self.optional_bool_wrapper
    }
    /// Gets the field number of the [`optional_int32_wrapper`] field
    ///
    /// [`optional_int32_wrapper`]: #method.optional_int32_wrapper
    pub const OPTIONAL_INT32_WRAPPER_FIELD_NUMBER: i32 = 202;
    pub fn optional_int32_wrapper(&self) -> &::std::option::Option<::std::boxed::Box<::protrust::wkt::wrappers::Int32Value>> {
        &self.optional_int32_wrapper
    }
    /// Returns a unique reference to the [`optional_int32_wrapper`] field
    ///
    /// [`optional_int32_wrapper`]: #method.optional_int32_wrapper
    pub fn optional_int32_wrapper_mut(&mut self) -> &mut ::std::option::Option<::std::boxed::Box<::protrust::wkt::wrappers::Int32Value>> {
        &mut self.optional_int32_wrapper
    }
    /// Gets the field number of the [`optional_int64_wrapper`] field
    ///
    /// [`optional_int64_wrapper`]: #method.optional_int64_wrapper
    pub const OPTIONAL_INT64_WRAPPER_FIELD_NUMBER: i32 = 203;
    pub fn optional_int64_wrapper(&self) -> &::std::option::Option<::std::boxed::Box<::protrust::wkt::wrappers::Int64Value>> {
        &self.optional_int64_wrapper
    }
    /// Returns a unique reference to the [`optional_int64_wrapper`] field
    ///
    /// [`optional_int64_wrapper`]: #method.optional_int64_wrapper
    pub fn optional_int64_wrapper_mut(&mut self) -> &mut ::std::option::Option<::std::boxed::Box<::protrust::wkt::wrappers::Int64Value>> {
        &mut self.optional_int64_wrapper
    }
    /// Gets the field number of the [`optional_uint32_wrapper`] field
    ///
    /// [`optional_uint32_wrapper`]: #method.optional_uint32_wrapper
    pub const OPTIONAL_UINT32_WRAPPER_FIELD_NUMBER: i32 = 204;
    pub fn optional_uint32_wrapper(&self) -> &::std::option::Option<::std::boxed::Box<::protrust::wkt::wrappers::UInt32Value>> {
        &self.optional_uint32_wrapper
    }
    /// Returns a unique reference to the [`optional_uint32_wrapper`] field
    ///
    /// [`optional_uint32_wrapper`]: #method.optional_uint32_wrapper
    pub fn optional_uint32_wrapper_mut(&mut self) -> &mut ::std::option::Option<::std::boxed::Box<::protrust::wkt::wrappers::UInt32Value>> {
        &mut self.optional_uint32_wrapper
    }
    /// Gets the field number of the [`optional_uint64_wrapper`] field
    ///
    /// [`optional_uint64_wrapper`]: #method.optional_uint64_wrapper
    pub const OPTIONAL_UINT64_WRAPPER_FIELD_NUMBER: i32 = 205;
    pub fn optional_uint64_wrapper(&self) -> &::std::option::Option<::std::boxed::Box<::protrust::wkt::wrappers::UInt64Value>> {
        &self.optional_uint64_wrapper
    }
    /// Returns a unique reference to the [`optional_uint64_wrapper`] field
    ///
    /// [`optional_uint64_wrapper`]: #method.optional_uint64_wrapper
    pub fn optional_uint64_wrapper_mut(&mut self) -> &mut ::std::option::Option<::std::boxed::Box<::protrust::wkt::wrappers::UInt64Value>> {
        &mut self.optional_uint64_wrapper
    }
    /// Gets the field number of the [`optional_float_wrapper`] field
    ///
    /// [`optional_float_wrapper`]: #method.optional_float_wrapper
    pub const OPTIONAL_FLOAT_WRAPPER_FIELD_NUMBER: i32 = 206;
    pub fn optional_float_wrapper(&self) -> &::std::option::Option<::std::boxed::Box<::protrust::wkt::wrappers::FloatValue>> {
        &self.optional_float_wrapper
    }
    /// Returns a unique reference to the [`optional_float_wrapper`] field
    ///
    /// [`optional_float_wrapper`]: #method.optional_float_wrapper
    pub fn optional_float_wrapper_mut(&mut self) -> &mut ::std::option::Option<::std::boxed::Box<::protrust::wkt::wrappers::FloatValue>> {
        &mut self.optional_float_wrapper
    }
    /// Gets the field number of the [`optional_double_wrapper`] field
    ///
    /// [`optional_double_wrapper`]: #method.optional_double_wrapper
    pub const OPTIONAL_DOUBLE_WRAPPER_FIELD_NUMBER: i32 = 207;
    pub fn optional_double_wrapper(&self) -> &::std::option::Option<::std::boxed::Box<::protrust::wkt::wrappers::DoubleValue>> {
        &self.optional_double_wrapper
    }
    /// Returns a unique reference to the [`optional_double_wrapper`] field
    ///
    /// [`optional_double_wrapper`]: #method.optional_double_wrapper
    pub fn optional_double_wrapper_mut(&mut self) -> &mut ::std::option::Option<::std::boxed::Box<::protrust::wkt::wrappers::DoubleValue>> {
        &mut self.optional_double_wrapper
    }
    /// Gets the field number of the [`optional_string_wrapper`] field
    ///
    /// [`optional_string_wrapper`]: #method.optional_string_wrapper
    pub const OPTIONAL_STRING_WRAPPER_FIELD_NUMBER: i32 = 208;
    pub fn optional_string_wrapper(&self) -> &::std::option::Option<::std::boxed::Box<::protrust::wkt::wrappers::StringValue>> {
        &self.optional_string_wrapper
    }
    /// Returns a unique reference to the [`optional_string_wrapper`] field
    ///
    /// [`optional_string_wrapper`]: #method.optional_string_wrapper
    pub fn optional_string_wrapper_mut(&mut self) -> &mut ::std::option::Option<::std::boxed::Box<::protrust::wkt::wrappers::StringValue>> {
        &mut self.optional_string_wrapper
    }
    /// Gets the field number of the [`optional_bytes_wrapper`] field
    ///
    /// [`optional_bytes_wrapper`]: #method.optional_bytes_wrapper
    pub const OPTIONAL_BYTES_WRAPPER_FIELD_NUMBER: i32 = 209;
    pub fn optional_bytes_wrapper(&self) -> &::std::option::Option<::std::boxed::Box<::protrust::wkt::wrappers::BytesValue>> {
        &self.optional_bytes_wrapper
    }
    /// Returns a unique reference to the [`optional_bytes_wrapper`] field
    ///
    /// [`optional_bytes_wrapper`]: #method.optional_bytes_wrapper
    pub fn optional_bytes_wrapper_mut(&mut self) -> &mut ::std::option::Option<::std::boxed::Box<::protrust::wkt::wrappers::BytesValue>> {
        &mut self.optional_bytes_wrapper
    }
    /// Gets the field number of the [`repeated_bool_wrapper`] field
    ///
    /// [`repeated_bool_wrapper`]: #method.repeated_bool_wrapper
    pub const REPEATED_BOOL_WRAPPER_FIELD_NUMBER: i32 = 211;
    pub fn repeated_bool_wrapper(&self) -> &::protrust::collections::RepeatedField<::protrust::wkt::wrappers::BoolValue> {
        &self.repeated_bool_wrapper
    }
    /// Returns a unique reference to the [`repeated_bool_wrapper`] field
    ///
    /// [`repeated_bool_wrapper`]: #method.repeated_bool_wrapper
    pub fn repeated_bool_wrapper_mut(&mut self) -> &mut ::protrust::collections::RepeatedField<::protrust::wkt::wrappers::BoolValue> {
        &mut self.repeated_bool_wrapper
    }
    /// Gets the field number of the [`repeated_int32_wrapper`] field
    ///
    /// [`repeated_int32_wrapper`]: #method.repeated_int32_wrapper
    pub const REPEATED_INT32_WRAPPER_FIELD_NUMBER: i32 = 212;
    pub fn repeated_int32_wrapper(&self) -> &::protrust::collections::RepeatedField<::protrust::wkt::wrappers::Int32Value> {
        &self.repeated_int32_wrapper
    }
    /// Returns a unique reference to the [`repeated_int32_wrapper`] field
    ///
    /// [`repeated_int32_wrapper`]: #method.repeated_int32_wrapper
    pub fn repeated_int32_wrapper_mut(&mut self) -> &mut ::protrust::collections::RepeatedField<::protrust::wkt::wrappers::Int32Value> {
        &mut self.repeated_int32_wrapper
    }
    /// Gets the field number of the [`repeated_int64_wrapper`] field
    ///
    /// [`repeated_int64_wrapper`]: #method.repeated_int64_wrapper
    pub const REPEATED_INT64_WRAPPER_FIELD_NUMBER: i32 = 213;
    pub fn repeated_int64_wrapper(&self) -> &::protrust::collections::RepeatedField<::protrust::wkt::wrappers::Int64Value> {
        &self.repeated_int64_wrapper
    }
    /// Returns a unique reference to the [`repeated_int64_wrapper`] field
    ///
    /// [`repeated_int64_wrapper`]: #method.repeated_int64_wrapper
    pub fn repeated_int64_wrapper_mut(&mut self) -> &mut ::protrust::collections::RepeatedField<::protrust::wkt::wrappers::Int64Value> {
        &mut self.repeated_int64_wrapper
    }
    /// Gets the field number of the [`repeated_uint32_wrapper`] field
    ///
    /// [`repeated_uint32_wrapper`]: #method.repeated_uint32_wrapper
    pub const REPEATED_UINT32_WRAPPER_FIELD_NUMBER: i32 = 214;
    pub fn repeated_uint32_wrapper(&self) -> &::protrust::collections::RepeatedField<::protrust::wkt::wrappers::UInt32Value> {
        &self.repeated_uint32_wrapper
    }
    /// Returns a unique reference to the [`repeated_uint32_wrapper`] field
    ///
    /// [`repeated_uint32_wrapper`]: #method.repeated_uint32_wrapper
    pub fn repeated_uint32_wrapper_mut(&mut self) -> &mut ::protrust::collections::RepeatedField<::protrust::wkt::wrappers::UInt32Value> {
        &mut self.repeated_uint32_wrapper
    }
    /// Gets the field number of the [`repeated_uint64_wrapper`] field
    ///
    /// [`repeated_uint64_wrapper`]: #method.repeated_uint64_wrapper
    pub const REPEATED_UINT64_WRAPPER_FIELD_NUMBER: i32 = 215;
    pub fn repeated_uint64_wrapper(&self) -> &::protrust::collections::RepeatedField<::protrust::wkt::wrappers::UInt64Value> {
        &self.repeated_uint64_wrapper
    }
    /// Returns a unique reference to the [`repeated_uint64_wrapper`] field
    ///
    /// [`repeated_uint64_wrapper`]: #method.repeated_uint64_wrapper
    pub fn repeated_uint64_wrapper_mut(&mut self) -> &mut ::protrust::collections::RepeatedField<::protrust::wkt::wrappers::UInt64Value> {
        &mut self.repeated_uint64_wrapper
    }
    /// Gets the field number of the [`repeated_float_wrapper`] field
    ///
    /// [`repeated_float_wrapper`]: #method.repeated_float_wrapper
    pub const REPEATED_FLOAT_WRAPPER_FIELD_NUMBER: i32 = 216;
    pub fn repeated_float_wrapper(&self) -> &::protrust::collections::RepeatedField<::protrust::wkt::wrappers::FloatValue> {
        &self.repeated_float_wrapper
    }
    /// Returns a unique reference to the [`repeated_float_wrapper`] field
    ///
    /// [`repeated_float_wrapper`]: #method.repeated_float_wrapper
    pub fn repeated_float_wrapper_mut(&mut self) -> &mut ::protrust::collections::RepeatedField<::protrust::wkt::wrappers::FloatValue> {
        &mut self.repeated_float_wrapper
    }
    /// Gets the field number of the [`repeated_double_wrapper`] field
    ///
    /// [`repeated_double_wrapper`]: #method.repeated_double_wrapper
    pub const REPEATED_DOUBLE_WRAPPER_FIELD_NUMBER: i32 = 217;
    pub fn repeated_double_wrapper(&self) -> &::protrust::collections::RepeatedField<::protrust::wkt::wrappers::DoubleValue> {
        &self.repeated_double_wrapper
    }
    /// Returns a unique reference to the [`repeated_double_wrapper`] field
    ///
    /// [`repeated_double_wrapper`]: #method.repeated_double_wrapper
    pub fn repeated_double_wrapper_mut(&mut self) -> &mut ::protrust::collections::RepeatedField<::protrust::wkt::wrappers::DoubleValue> {
        &mut self.repeated_double_wrapper
    }
    /// Gets the field number of the [`repeated_string_wrapper`] field
    ///
    /// [`repeated_string_wrapper`]: #method.repeated_string_wrapper
    pub const REPEATED_STRING_WRAPPER_FIELD_NUMBER: i32 = 218;
    pub fn repeated_string_wrapper(&self) -> &::protrust::collections::RepeatedField<::protrust::wkt::wrappers::StringValue> {
        &self.repeated_string_wrapper
    }
    /// Returns a unique reference to the [`repeated_string_wrapper`] field
    ///
    /// [`repeated_string_wrapper`]: #method.repeated_string_wrapper
    pub fn repeated_string_wrapper_mut(&mut self) -> &mut ::protrust::collections::RepeatedField<::protrust::wkt::wrappers::StringValue> {
        &mut self.repeated_string_wrapper
    }
    /// Gets the field number of the [`repeated_bytes_wrapper`] field
    ///
    /// [`repeated_bytes_wrapper`]: #method.repeated_bytes_wrapper
    pub const REPEATED_BYTES_WRAPPER_FIELD_NUMBER: i32 = 219;
    pub fn repeated_bytes_wrapper(&self) -> &::protrust::collections::RepeatedField<::protrust::wkt::wrappers::BytesValue> {
        &self.repeated_bytes_wrapper
    }
    /// Returns a unique reference to the [`repeated_bytes_wrapper`] field
    ///
    /// [`repeated_bytes_wrapper`]: #method.repeated_bytes_wrapper
    pub fn repeated_bytes_wrapper_mut(&mut self) -> &mut ::protrust::collections::RepeatedField<::protrust::wkt::wrappers::BytesValue> {
        &mut self.repeated_bytes_wrapper
    }
    /// Gets the field number of the [`optional_duration`] field
    ///
    /// [`optional_duration`]: #method.optional_duration
    pub const OPTIONAL_DURATION_FIELD_NUMBER: i32 = 301;
    pub fn optional_duration(&self) -> &::std::option::Option<::std::boxed::Box<::protrust::wkt::duration::Duration>> {
        &self.optional_duration
    }
    /// Returns a unique reference to the [`optional_duration`] field
    ///
    /// [`optional_duration`]: #method.optional_duration
    pub fn optional_duration_mut(&mut self) -> &mut ::std::option::Option<::std::boxed::Box<::protrust::wkt::duration::Duration>> {
        &mut self.optional_duration
    }
    /// Gets the field number of the [`optional_timestamp`] field
    ///
    /// [`optional_timestamp`]: #method.optional_timestamp
    pub const OPTIONAL_TIMESTAMP_FIELD_NUMBER: i32 = 302;
    pub fn optional_timestamp(&self) -> &::std::option::Option<::std::boxed::Box<::protrust::wkt::timestamp::Timestamp>> {
        &self.optional_timestamp
    }
    /// Returns a unique reference to the [`optional_timestamp`] field
    ///
    /// [`optional_timestamp`]: #method.optional_timestamp
    pub fn optional_timestamp_mut(&mut self) -> &mut ::std::option::Option<::std::boxed::Box<::protrust::wkt::timestamp::Timestamp>> {
        &mut self.optional_timestamp
    }
    /// Gets the field number of the [`optional_field_mask`] field
    ///
    /// [`optional_field_mask`]: #method.optional_field_mask
    pub const OPTIONAL_FIELD_MASK_FIELD_NUMBER: i32 = 303;
    pub fn optional_field_mask(&self) -> &::std::option::Option<::std::boxed::Box<::protrust::wkt::field_mask::FieldMask>> {
        &self.optional_field_mask
    }
    /// Returns a unique reference to the [`optional_field_mask`] field
    ///
    /// [`optional_field_mask`]: #method.optional_field_mask
    pub fn optional_field_mask_mut(&mut self) -> &mut ::std::option::Option<::std::boxed::Box<::protrust::wkt::field_mask::FieldMask>> {
        &mut self.optional_field_mask
    }
    /// Gets the field number of the [`optional_struct`] field
    ///
    /// [`optional_struct`]: #method.optional_struct
    pub const OPTIONAL_STRUCT_FIELD_NUMBER: i32 = 304;
    pub fn optional_struct(&self) -> &::std::option::Option<::std::boxed::Box<::protrust::wkt::r#struct::Struct>> {
        &self.optional_struct
    }
    /// Returns a unique reference to the [`optional_struct`] field
    ///
    /// [`optional_struct`]: #method.optional_struct
    pub fn optional_struct_mut(&mut self) -> &mut ::std::option::Option<::std::boxed::Box<::protrust::wkt::r#struct::Struct>> {
        &mut self.optional_struct
    }
    /// Gets the field number of the [`optional_any`] field
    ///
    /// [`optional_any`]: #method.optional_any
    pub const OPTIONAL_ANY_FIELD_NUMBER: i32 = 305;
    pub fn optional_any(&self) -> &::std::option::Option<::std::boxed::Box<::protrust::wkt::any::Any>> {
        &self.optional_any
    }
    /// Returns a unique reference to the [`optional_any`] field
    ///
    /// [`optional_any`]: #method.optional_any
    pub fn optional_any_mut(&mut self) -> &mut ::std::option::Option<::std::boxed::Box<::protrust::wkt::any::Any>> {
        &mut self.optional_any
    }
    /// Gets the field number of the [`optional_value`] field
    ///
    /// [`optional_value`]: #method.optional_value
    pub const OPTIONAL_VALUE_FIELD_NUMBER: i32 = 306;
    pub fn optional_value(&self) -> &::std::option::Option<::std::boxed::Box<::protrust::wkt::r#struct::Value>> {
        &self.optional_value
    }
    /// Returns a unique reference to the [`optional_value`] field
    ///
    /// [`optional_value`]: #method.optional_value
    pub fn optional_value_mut(&mut self) -> &mut ::std::option::Option<::std::boxed::Box<::protrust::wkt::r#struct::Value>> {
        &mut self.optional_value
    }
    /// Gets the field number of the [`repeated_duration`] field
    ///
    /// [`repeated_duration`]: #method.repeated_duration
    pub const REPEATED_DURATION_FIELD_NUMBER: i32 = 311;
    pub fn repeated_duration(&self) -> &::protrust::collections::RepeatedField<::protrust::wkt::duration::Duration> {
        &self.repeated_duration
    }
    /// Returns a unique reference to the [`repeated_duration`] field
    ///
    /// [`repeated_duration`]: #method.repeated_duration
    pub fn repeated_duration_mut(&mut self) -> &mut ::protrust::collections::RepeatedField<::protrust::wkt::duration::Duration> {
        &mut self.repeated_duration
    }
    /// Gets the field number of the [`repeated_timestamp`] field
    ///
    /// [`repeated_timestamp`]: #method.repeated_timestamp
    pub const REPEATED_TIMESTAMP_FIELD_NUMBER: i32 = 312;
    pub fn repeated_timestamp(&self) -> &::protrust::collections::RepeatedField<::protrust::wkt::timestamp::Timestamp> {
        &self.repeated_timestamp
    }
    /// Returns a unique reference to the [`repeated_timestamp`] field
    ///
    /// [`repeated_timestamp`]: #method.repeated_timestamp
    pub fn repeated_timestamp_mut(&mut self) -> &mut ::protrust::collections::RepeatedField<::protrust::wkt::timestamp::Timestamp> {
        &mut self.repeated_timestamp
    }
    /// Gets the field number of the [`repeated_fieldmask`] field
    ///
    /// [`repeated_fieldmask`]: #method.repeated_fieldmask
    pub const REPEATED_FIELDMASK_FIELD_NUMBER: i32 = 313;
    pub fn repeated_fieldmask(&self) -> &::protrust::collections::RepeatedField<::protrust::wkt::field_mask::FieldMask> {
        &self.repeated_fieldmask
    }
    /// Returns a unique reference to the [`repeated_fieldmask`] field
    ///
    /// [`repeated_fieldmask`]: #method.repeated_fieldmask
    pub fn repeated_fieldmask_mut(&mut self) -> &mut ::protrust::collections::RepeatedField<::protrust::wkt::field_mask::FieldMask> {
        &mut self.repeated_fieldmask
    }
    /// Gets the field number of the [`repeated_struct`] field
    ///
    /// [`repeated_struct`]: #method.repeated_struct
    pub const REPEATED_STRUCT_FIELD_NUMBER: i32 = 324;
    pub fn repeated_struct(&self) -> &::protrust::collections::RepeatedField<::protrust::wkt::r#struct::Struct> {
        &self.repeated_struct
    }
    /// Returns a unique reference to the [`repeated_struct`] field
    ///
    /// [`repeated_struct`]: #method.repeated_struct
    pub fn repeated_struct_mut(&mut self) -> &mut ::protrust::collections::RepeatedField<::protrust::wkt::r#struct::Struct> {
        &mut self.repeated_struct
    }
    /// Gets the field number of the [`repeated_any`] field
    ///
    /// [`repeated_any`]: #method.repeated_any
    pub const REPEATED_ANY_FIELD_NUMBER: i32 = 315;
    pub fn repeated_any(&self) -> &::protrust::collections::RepeatedField<::protrust::wkt::any::Any> {
        &self.repeated_any
    }
    /// Returns a unique reference to the [`repeated_any`] field
    ///
    /// [`repeated_any`]: #method.repeated_any
    pub fn repeated_any_mut(&mut self) -> &mut ::protrust::collections::RepeatedField<::protrust::wkt::any::Any> {
        &mut self.repeated_any
    }
    /// Gets the field number of the [`repeated_value`] field
    ///
    /// [`repeated_value`]: #method.repeated_value
    pub const REPEATED_VALUE_FIELD_NUMBER: i32 = 316;
    pub fn repeated_value(&self) -> &::protrust::collections::RepeatedField<::protrust::wkt::r#struct::Value> {
        &self.repeated_value
    }
    /// Returns a unique reference to the [`repeated_value`] field
    ///
    /// [`repeated_value`]: #method.repeated_value
    pub fn repeated_value_mut(&mut self) -> &mut ::protrust::collections::RepeatedField<::protrust::wkt::r#struct::Value> {
        &mut self.repeated_value
    }
    /// Gets the field number of the [`fieldname1`] field
    ///
    /// [`fieldname1`]: #method.fieldname1
    pub const FIELDNAME1_FIELD_NUMBER: i32 = 401;
    /// A constant value representing the default value of the [`fieldname1`] field
    ///
    /// [`fieldname1`]: #method.fieldname1
    pub const FIELDNAME1_DEFAULT_VALUE: i32 = 0;
    /// Test field-name-to-JSON-name convention.
    /// (protobuf says names can be any valid C/C++ identifier.)
    pub fn fieldname1(&self) -> i32 {
        self.fieldname1
    }
    /// Returns a unique reference to the [`fieldname1`] field
    ///
    /// [`fieldname1`]: #method.fieldname1
    pub fn fieldname1_mut(&mut self) -> &mut i32 {
        &mut self.fieldname1
    }
    /// Gets the field number of the [`field_name2`] field
    ///
    /// [`field_name2`]: #method.field_name2
    pub const FIELD_NAME2_FIELD_NUMBER: i32 = 402;
    /// A constant value representing the default value of the [`field_name2`] field
    ///
    /// [`field_name2`]: #method.field_name2
    pub const FIELD_NAME2_DEFAULT_VALUE: i32 = 0;
    pub fn field_name2(&self) -> i32 {
        self.field_name2
    }
    /// Returns a unique reference to the [`field_name2`] field
    ///
    /// [`field_name2`]: #method.field_name2
    pub fn field_name2_mut(&mut self) -> &mut i32 {
        &mut self.field_name2
    }
    /// Gets the field number of the [`_field_name3`] field
    ///
    /// [`_field_name3`]: #method._field_name3
    pub const _FIELD_NAME3_FIELD_NUMBER: i32 = 403;
    /// A constant value representing the default value of the [`_field_name3`] field
    ///
    /// [`_field_name3`]: #method._field_name3
    pub const _FIELD_NAME3_DEFAULT_VALUE: i32 = 0;
    pub fn _field_name3(&self) -> i32 {
        self._field_name3
    }
    /// Returns a unique reference to the [`_field_name3`] field
    ///
    /// [`_field_name3`]: #method._field_name3
    pub fn _field_name3_mut(&mut self) -> &mut i32 {
        &mut self._field_name3
    }
    /// Gets the field number of the [`field__name4_`] field
    ///
    /// [`field__name4_`]: #method.field__name4_
    pub const FIELD__NAME4__FIELD_NUMBER: i32 = 404;
    /// A constant value representing the default value of the [`field__name4_`] field
    ///
    /// [`field__name4_`]: #method.field__name4_
    pub const FIELD__NAME4__DEFAULT_VALUE: i32 = 0;
    pub fn field__name4_(&self) -> i32 {
        self.field__name4_
    }
    /// Returns a unique reference to the [`field__name4_`] field
    ///
    /// [`field__name4_`]: #method.field__name4_
    pub fn field__name4__mut(&mut self) -> &mut i32 {
        &mut self.field__name4_
    }
    /// Gets the field number of the [`field0name5`] field
    ///
    /// [`field0name5`]: #method.field0name5
    pub const FIELD0NAME5_FIELD_NUMBER: i32 = 405;
    /// A constant value representing the default value of the [`field0name5`] field
    ///
    /// [`field0name5`]: #method.field0name5
    pub const FIELD0NAME5_DEFAULT_VALUE: i32 = 0;
    pub fn field0name5(&self) -> i32 {
        self.field0name5
    }
    /// Returns a unique reference to the [`field0name5`] field
    ///
    /// [`field0name5`]: #method.field0name5
    pub fn field0name5_mut(&mut self) -> &mut i32 {
        &mut self.field0name5
    }
    /// Gets the field number of the [`field_0_name6`] field
    ///
    /// [`field_0_name6`]: #method.field_0_name6
    pub const FIELD_0_NAME6_FIELD_NUMBER: i32 = 406;
    /// A constant value representing the default value of the [`field_0_name6`] field
    ///
    /// [`field_0_name6`]: #method.field_0_name6
    pub const FIELD_0_NAME6_DEFAULT_VALUE: i32 = 0;
    pub fn field_0_name6(&self) -> i32 {
        self.field_0_name6
    }
    /// Returns a unique reference to the [`field_0_name6`] field
    ///
    /// [`field_0_name6`]: #method.field_0_name6
    pub fn field_0_name6_mut(&mut self) -> &mut i32 {
        &mut self.field_0_name6
    }
    /// Gets the field number of the [`fieldName7`] field
    ///
    /// [`fieldName7`]: #method.fieldName7
    pub const FIELDNAME7_FIELD_NUMBER: i32 = 407;
    /// A constant value representing the default value of the [`fieldName7`] field
    ///
    /// [`fieldName7`]: #method.fieldName7
    pub const FIELDNAME7_DEFAULT_VALUE: i32 = 0;
    pub fn fieldName7(&self) -> i32 {
        self.fieldName7
    }
    /// Returns a unique reference to the [`fieldName7`] field
    ///
    /// [`fieldName7`]: #method.fieldName7
    pub fn fieldName7_mut(&mut self) -> &mut i32 {
        &mut self.fieldName7
    }
    /// Gets the field number of the [`FieldName8`] field
    ///
    /// [`FieldName8`]: #method.FieldName8
    pub const FIELDNAME8_FIELD_NUMBER: i32 = 408;
    /// A constant value representing the default value of the [`FieldName8`] field
    ///
    /// [`FieldName8`]: #method.FieldName8
    pub const FIELDNAME8_DEFAULT_VALUE: i32 = 0;
    pub fn FieldName8(&self) -> i32 {
        self.FieldName8
    }
    /// Returns a unique reference to the [`FieldName8`] field
    ///
    /// [`FieldName8`]: #method.FieldName8
    pub fn FieldName8_mut(&mut self) -> &mut i32 {
        &mut self.FieldName8
    }
    /// Gets the field number of the [`field_Name9`] field
    ///
    /// [`field_Name9`]: #method.field_Name9
    pub const FIELD_NAME9_FIELD_NUMBER: i32 = 409;
    /// A constant value representing the default value of the [`field_Name9`] field
    ///
    /// [`field_Name9`]: #method.field_Name9
    pub const FIELD_NAME9_DEFAULT_VALUE: i32 = 0;
    pub fn field_Name9(&self) -> i32 {
        self.field_Name9
    }
    /// Returns a unique reference to the [`field_Name9`] field
    ///
    /// [`field_Name9`]: #method.field_Name9
    pub fn field_Name9_mut(&mut self) -> &mut i32 {
        &mut self.field_Name9
    }
    /// Gets the field number of the [`Field_Name10`] field
    ///
    /// [`Field_Name10`]: #method.Field_Name10
    pub const FIELD_NAME10_FIELD_NUMBER: i32 = 410;
    /// A constant value representing the default value of the [`Field_Name10`] field
    ///
    /// [`Field_Name10`]: #method.Field_Name10
    pub const FIELD_NAME10_DEFAULT_VALUE: i32 = 0;
    pub fn Field_Name10(&self) -> i32 {
        self.Field_Name10
    }
    /// Returns a unique reference to the [`Field_Name10`] field
    ///
    /// [`Field_Name10`]: #method.Field_Name10
    pub fn Field_Name10_mut(&mut self) -> &mut i32 {
        &mut self.Field_Name10
    }
    /// Gets the field number of the [`FIELD_NAME11`] field
    ///
    /// [`FIELD_NAME11`]: #method.FIELD_NAME11
    pub const FIELD_NAME11_FIELD_NUMBER: i32 = 411;
    /// A constant value representing the default value of the [`FIELD_NAME11`] field
    ///
    /// [`FIELD_NAME11`]: #method.FIELD_NAME11
    pub const FIELD_NAME11_DEFAULT_VALUE: i32 = 0;
    pub fn FIELD_NAME11(&self) -> i32 {
        self.FIELD_NAME11
    }
    /// Returns a unique reference to the [`FIELD_NAME11`] field
    ///
    /// [`FIELD_NAME11`]: #method.FIELD_NAME11
    pub fn FIELD_NAME11_mut(&mut self) -> &mut i32 {
        &mut self.FIELD_NAME11
    }
    /// Gets the field number of the [`FIELD_name12`] field
    ///
    /// [`FIELD_name12`]: #method.FIELD_name12
    pub const FIELD_NAME12_FIELD_NUMBER: i32 = 412;
    /// A constant value representing the default value of the [`FIELD_name12`] field
    ///
    /// [`FIELD_name12`]: #method.FIELD_name12
    pub const FIELD_NAME12_DEFAULT_VALUE: i32 = 0;
    pub fn FIELD_name12(&self) -> i32 {
        self.FIELD_name12
    }
    /// Returns a unique reference to the [`FIELD_name12`] field
    ///
    /// [`FIELD_name12`]: #method.FIELD_name12
    pub fn FIELD_name12_mut(&mut self) -> &mut i32 {
        &mut self.FIELD_name12
    }
    /// Gets the field number of the [`__field_name13`] field
    ///
    /// [`__field_name13`]: #method.__field_name13
    pub const __FIELD_NAME13_FIELD_NUMBER: i32 = 413;
    /// A constant value representing the default value of the [`__field_name13`] field
    ///
    /// [`__field_name13`]: #method.__field_name13
    pub const __FIELD_NAME13_DEFAULT_VALUE: i32 = 0;
    pub fn __field_name13(&self) -> i32 {
        self.__field_name13
    }
    /// Returns a unique reference to the [`__field_name13`] field
    ///
    /// [`__field_name13`]: #method.__field_name13
    pub fn __field_name13_mut(&mut self) -> &mut i32 {
        &mut self.__field_name13
    }
    /// Gets the field number of the [`__Field_name14`] field
    ///
    /// [`__Field_name14`]: #method.__Field_name14
    pub const __FIELD_NAME14_FIELD_NUMBER: i32 = 414;
    /// A constant value representing the default value of the [`__Field_name14`] field
    ///
    /// [`__Field_name14`]: #method.__Field_name14
    pub const __FIELD_NAME14_DEFAULT_VALUE: i32 = 0;
    pub fn __Field_name14(&self) -> i32 {
        self.__Field_name14
    }
    /// Returns a unique reference to the [`__Field_name14`] field
    ///
    /// [`__Field_name14`]: #method.__Field_name14
    pub fn __Field_name14_mut(&mut self) -> &mut i32 {
        &mut self.__Field_name14
    }
    /// Gets the field number of the [`field__name15`] field
    ///
    /// [`field__name15`]: #method.field__name15
    pub const FIELD__NAME15_FIELD_NUMBER: i32 = 415;
    /// A constant value representing the default value of the [`field__name15`] field
    ///
    /// [`field__name15`]: #method.field__name15
    pub const FIELD__NAME15_DEFAULT_VALUE: i32 = 0;
    pub fn field__name15(&self) -> i32 {
        self.field__name15
    }
    /// Returns a unique reference to the [`field__name15`] field
    ///
    /// [`field__name15`]: #method.field__name15
    pub fn field__name15_mut(&mut self) -> &mut i32 {
        &mut self.field__name15
    }
    /// Gets the field number of the [`field__Name16`] field
    ///
    /// [`field__Name16`]: #method.field__Name16
    pub const FIELD__NAME16_FIELD_NUMBER: i32 = 416;
    /// A constant value representing the default value of the [`field__Name16`] field
    ///
    /// [`field__Name16`]: #method.field__Name16
    pub const FIELD__NAME16_DEFAULT_VALUE: i32 = 0;
    pub fn field__Name16(&self) -> i32 {
        self.field__Name16
    }
    /// Returns a unique reference to the [`field__Name16`] field
    ///
    /// [`field__Name16`]: #method.field__Name16
    pub fn field__Name16_mut(&mut self) -> &mut i32 {
        &mut self.field__Name16
    }
    /// Gets the field number of the [`field_name17__`] field
    ///
    /// [`field_name17__`]: #method.field_name17__
    pub const FIELD_NAME17___FIELD_NUMBER: i32 = 417;
    /// A constant value representing the default value of the [`field_name17__`] field
    ///
    /// [`field_name17__`]: #method.field_name17__
    pub const FIELD_NAME17___DEFAULT_VALUE: i32 = 0;
    pub fn field_name17__(&self) -> i32 {
        self.field_name17__
    }
    /// Returns a unique reference to the [`field_name17__`] field
    ///
    /// [`field_name17__`]: #method.field_name17__
    pub fn field_name17___mut(&mut self) -> &mut i32 {
        &mut self.field_name17__
    }
    /// Gets the field number of the [`Field_name18__`] field
    ///
    /// [`Field_name18__`]: #method.Field_name18__
    pub const FIELD_NAME18___FIELD_NUMBER: i32 = 418;
    /// A constant value representing the default value of the [`Field_name18__`] field
    ///
    /// [`Field_name18__`]: #method.Field_name18__
    pub const FIELD_NAME18___DEFAULT_VALUE: i32 = 0;
    pub fn Field_name18__(&self) -> i32 {
        self.Field_name18__
    }
    /// Returns a unique reference to the [`Field_name18__`] field
    ///
    /// [`Field_name18__`]: #method.Field_name18__
    pub fn Field_name18___mut(&mut self) -> &mut i32 {
        &mut self.Field_name18__
    }
    /// Gets a shared reference to the [`oneof_field`] oneof field
    ///
    /// [`oneof_field`]: enum.TestAllTypesProto3_OneofField.html
    pub fn oneof_field(&self) -> &self::TestAllTypesProto3_OneofField {
        &self.oneof_field
    }
    /// Gets a unique reference to the [`oneof_field`] oneof field
    ///
    /// [`oneof_field`]: enum.TestAllTypesProto3_OneofField.html
    pub fn oneof_field_mut(&mut self) -> &mut self::TestAllTypesProto3_OneofField {
        &mut self.oneof_field
    }
}
#[derive(Clone, Debug, PartialEq)]
pub struct TestAllTypesProto3_NestedMessage {
    a: i32,
    corecursive: ::std::option::Option<::std::boxed::Box<self::TestAllTypesProto3>>,
    unknown_fields: ::protrust::UnknownFieldSet
}
impl ::protrust::CodedMessage for self::TestAllTypesProto3_NestedMessage {
    fn merge_from(&mut self, input: &mut ::protrust::io::CodedInput) -> ::protrust::io::InputResult<()> {
        while let ::std::option::Option::Some(tag) = input.read_tag()? {
            match tag.get() {
                8 => self.a = input.read_int32()?,
                18 => input.read_message(self.corecursive.get_or_insert_with(::protrust::LiteMessage::new))?,
                tag => self.unknown_fields.merge_from(tag, input)?
            }
        }
        ::std::result::Result::Ok(())
    }
    fn calculate_size(&self) -> i32 {
        let mut size = 0i32;
        let a = self.a;
        if a != Self::A_DEFAULT_VALUE {
            size += 1;
            size += ::protrust::io::sizes::int32(a);
        }
        let corecursive = &self.corecursive;
        if let ::std::option::Option::Some(corecursive) = corecursive {
            size += 1;
            size += ::protrust::io::sizes::message(corecursive);
        }
        size += self.unknown_fields.calculate_size();
        size
    }
    fn write_to(&self, output: &mut ::protrust::io::CodedOutput) -> ::protrust::io::OutputResult {
        let a = self.a;
        if a != Self::A_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[8])?;
            output.write_int32(a)?;
        }
        let corecursive = &self.corecursive;
        if let ::std::option::Option::Some(corecursive) = corecursive {
            output.write_raw_tag_bytes(&[18])?;
            output.write_message(corecursive)?;
        }
        self.unknown_fields.write_to(output)?;
        ::std::result::Result::Ok(())
    }
}
impl ::protrust::LiteMessage for self::TestAllTypesProto3_NestedMessage {
    fn new() -> Self {
        Self {
            a: Self::A_DEFAULT_VALUE,
            corecursive: ::std::option::Option::None,
            unknown_fields: ::protrust::UnknownFieldSet::new()
        }
    }
    fn merge(&mut self, other: &Self) {
        self.a = other.a;
        if let ::std::option::Option::Some(corecursive) = &other.corecursive {
            self.corecursive.get_or_insert_with(::protrust::LiteMessage::new).merge(corecursive);
        }
        self.unknown_fields.merge(&other.unknown_fields);
    }
}
impl ::protrust::Message for self::TestAllTypesProto3_NestedMessage {
    fn descriptor() -> &'static ::protrust::reflect::MessageDescriptor {
        &self::file().messages()[0].messages()[0]
    }
}
impl self::TestAllTypesProto3_NestedMessage {
    /// Gets the field number of the [`a`] field
    ///
    /// [`a`]: #method.a
    pub const A_FIELD_NUMBER: i32 = 1;
    /// A constant value representing the default value of the [`a`] field
    ///
    /// [`a`]: #method.a
    pub const A_DEFAULT_VALUE: i32 = 0;
    pub fn a(&self) -> i32 {
        self.a
    }
    /// Returns a unique reference to the [`a`] field
    ///
    /// [`a`]: #method.a
    pub fn a_mut(&mut self) -> &mut i32 {
        &mut self.a
    }
    /// Gets the field number of the [`corecursive`] field
    ///
    /// [`corecursive`]: #method.corecursive
    pub const CORECURSIVE_FIELD_NUMBER: i32 = 2;
    pub fn corecursive(&self) -> &::std::option::Option<::std::boxed::Box<self::TestAllTypesProto3>> {
        &self.corecursive
    }
    /// Returns a unique reference to the [`corecursive`] field
    ///
    /// [`corecursive`]: #method.corecursive
    pub fn corecursive_mut(&mut self) -> &mut ::std::option::Option<::std::boxed::Box<self::TestAllTypesProto3>> {
        &mut self.corecursive
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]
pub enum TestAllTypesProto3_NestedEnum {
    Foo,
    Bar,
    Baz,
    /// Intentionally negative.
    Neg,
}
impl ::std::convert::TryFrom<i32> for self::TestAllTypesProto3_NestedEnum {
    type Error = ::protrust::VariantUndefinedError;
    fn try_from(value: i32) -> ::std::result::Result<Self, ::protrust::VariantUndefinedError> {
        match value {
            0 => ::std::result::Result::Ok(self::TestAllTypesProto3_NestedEnum::Foo),
            1 => ::std::result::Result::Ok(self::TestAllTypesProto3_NestedEnum::Bar),
            2 => ::std::result::Result::Ok(self::TestAllTypesProto3_NestedEnum::Baz),
            -1 => ::std::result::Result::Ok(self::TestAllTypesProto3_NestedEnum::Neg),
            _ => ::std::result::Result::Err(::protrust::VariantUndefinedError)
        }
    }
}
impl ::std::convert::From<self::TestAllTypesProto3_NestedEnum> for i32 {
    fn from(value: self::TestAllTypesProto3_NestedEnum) -> i32 {
        match value {
            TestAllTypesProto3_NestedEnum::Foo => 0,
            TestAllTypesProto3_NestedEnum::Bar => 1,
            TestAllTypesProto3_NestedEnum::Baz => 2,
            TestAllTypesProto3_NestedEnum::Neg => -1,
        }
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]
pub enum TestAllTypesProto3_AliasedEnum {
    AliasFoo,
    AliasBar,
    AliasBaz,
    Qux,
    Qux_,
    BAz,
}
impl ::std::convert::TryFrom<i32> for self::TestAllTypesProto3_AliasedEnum {
    type Error = ::protrust::VariantUndefinedError;
    fn try_from(value: i32) -> ::std::result::Result<Self, ::protrust::VariantUndefinedError> {
        match value {
            0 => ::std::result::Result::Ok(self::TestAllTypesProto3_AliasedEnum::AliasFoo),
            1 => ::std::result::Result::Ok(self::TestAllTypesProto3_AliasedEnum::AliasBar),
            2 => ::std::result::Result::Ok(self::TestAllTypesProto3_AliasedEnum::AliasBaz),
            2 => ::std::result::Result::Ok(self::TestAllTypesProto3_AliasedEnum::Qux),
            2 => ::std::result::Result::Ok(self::TestAllTypesProto3_AliasedEnum::Qux_),
            2 => ::std::result::Result::Ok(self::TestAllTypesProto3_AliasedEnum::BAz),
            _ => ::std::result::Result::Err(::protrust::VariantUndefinedError)
        }
    }
}
impl ::std::convert::From<self::TestAllTypesProto3_AliasedEnum> for i32 {
    fn from(value: self::TestAllTypesProto3_AliasedEnum) -> i32 {
        match value {
            TestAllTypesProto3_AliasedEnum::AliasFoo => 0,
            TestAllTypesProto3_AliasedEnum::AliasBar => 1,
            TestAllTypesProto3_AliasedEnum::AliasBaz => 2,
            TestAllTypesProto3_AliasedEnum::Qux => 2,
            TestAllTypesProto3_AliasedEnum::Qux_ => 2,
            TestAllTypesProto3_AliasedEnum::BAz => 2,
        }
    }
}
#[derive(Clone, Debug, PartialEq)]
pub struct ForeignMessage {
    c: i32,
    unknown_fields: ::protrust::UnknownFieldSet
}
impl ::protrust::CodedMessage for self::ForeignMessage {
    fn merge_from(&mut self, input: &mut ::protrust::io::CodedInput) -> ::protrust::io::InputResult<()> {
        while let ::std::option::Option::Some(tag) = input.read_tag()? {
            match tag.get() {
                8 => self.c = input.read_int32()?,
                tag => self.unknown_fields.merge_from(tag, input)?
            }
        }
        ::std::result::Result::Ok(())
    }
    fn calculate_size(&self) -> i32 {
        let mut size = 0i32;
        let c = self.c;
        if c != Self::C_DEFAULT_VALUE {
            size += 1;
            size += ::protrust::io::sizes::int32(c);
        }
        size += self.unknown_fields.calculate_size();
        size
    }
    fn write_to(&self, output: &mut ::protrust::io::CodedOutput) -> ::protrust::io::OutputResult {
        let c = self.c;
        if c != Self::C_DEFAULT_VALUE {
            output.write_raw_tag_bytes(&[8])?;
            output.write_int32(c)?;
        }
        self.unknown_fields.write_to(output)?;
        ::std::result::Result::Ok(())
    }
}
impl ::protrust::LiteMessage for self::ForeignMessage {
    fn new() -> Self {
        Self {
            c: Self::C_DEFAULT_VALUE,
            unknown_fields: ::protrust::UnknownFieldSet::new()
        }
    }
    fn merge(&mut self, other: &Self) {
        self.c = other.c;
        self.unknown_fields.merge(&other.unknown_fields);
    }
}
impl ::protrust::Message for self::ForeignMessage {
    fn descriptor() -> &'static ::protrust::reflect::MessageDescriptor {
        &self::file().messages()[1]
    }
}
impl self::ForeignMessage {
    /// Gets the field number of the [`c`] field
    ///
    /// [`c`]: #method.c
    pub const C_FIELD_NUMBER: i32 = 1;
    /// A constant value representing the default value of the [`c`] field
    ///
    /// [`c`]: #method.c
    pub const C_DEFAULT_VALUE: i32 = 0;
    pub fn c(&self) -> i32 {
        self.c
    }
    /// Returns a unique reference to the [`c`] field
    ///
    /// [`c`]: #method.c
    pub fn c_mut(&mut self) -> &mut i32 {
        &mut self.c
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]
pub enum ForeignEnum {
    ForeignFoo,
    ForeignBar,
    ForeignBaz,
}
impl ::std::convert::TryFrom<i32> for self::ForeignEnum {
    type Error = ::protrust::VariantUndefinedError;
    fn try_from(value: i32) -> ::std::result::Result<Self, ::protrust::VariantUndefinedError> {
        match value {
            0 => ::std::result::Result::Ok(self::ForeignEnum::ForeignFoo),
            1 => ::std::result::Result::Ok(self::ForeignEnum::ForeignBar),
            2 => ::std::result::Result::Ok(self::ForeignEnum::ForeignBaz),
            _ => ::std::result::Result::Err(::protrust::VariantUndefinedError)
        }
    }
}
impl ::std::convert::From<self::ForeignEnum> for i32 {
    fn from(value: self::ForeignEnum) -> i32 {
        match value {
            ForeignEnum::ForeignFoo => 0,
            ForeignEnum::ForeignBar => 1,
            ForeignEnum::ForeignBaz => 2,
        }
    }
}