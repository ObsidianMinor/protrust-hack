[env]
"PROTOC_VER" = "3.6.1"

[tasks.build]
args = ["build"]

[tasks.test]
args = ["test"]

[tasks.gen-included-checked]
command = "protoc"
args = [
    "--rust_out=src/generated/checked",
    "--rust_opt=crate_name=crate,checked_size",
    "google/protobuf/any.proto",
    "google/protobuf/api.proto",
    "google/protobuf/descriptor.proto",
    "google/protobuf/duration.proto",
    "google/protobuf/empty.proto",
    "google/protobuf/field_mask.proto",
    "google/protobuf/source_context.proto",
    "google/protobuf/struct.proto",
    "google/protobuf/timestamp.proto",
    "google/protobuf/type.proto",
    "google/protobuf/wrappers.proto",
    "google/protobuf/compiler/plugin.proto"
]

[tasks.gen-included-unchecked]
command = "protoc"
args = [
    "--rust_out=src/generated/unchecked",
    "--rust_opt=crate_name=crate",
    "google/protobuf/any.proto",
    "google/protobuf/api.proto",
    "google/protobuf/descriptor.proto",
    "google/protobuf/duration.proto",
    "google/protobuf/empty.proto",
    "google/protobuf/field_mask.proto",
    "google/protobuf/source_context.proto",
    "google/protobuf/struct.proto",
    "google/protobuf/timestamp.proto",
    "google/protobuf/type.proto",
    "google/protobuf/wrappers.proto",
    "google/protobuf/compiler/plugin.proto"
]

[tasks.gen-sample]
command = "protoc"
args = [
    "--proto_path=protos",
    "--rust_out=examples/gen",
    "addressbook.proto"
]

[tasks.gen-conformance]
command = "protoc"
args = [
    "--proto_path=protos",
    "--rust_out=src/bin/conformance/gen",
    "conformance.proto"
]

[tasks.gen-test-messages]
command = "protoc"
args = [
    "--proto_path=protos",
    "--rust_out=tests/gen",
    "test_messages_proto2.proto",
    "test_messages_proto3.proto"
]

[tasks.protoc-check.windows]
script_runner = "powershell"
script_extension = "ps1"
script = [
'''
$ErrorActionPreference='Stop'
if ($PSVersionTable.PSVersion.Major -lt 5) {
    Write-Host 'PowerShell version 5 or higher required for automatic protoc downloading and unpacking'
    exit 1
}

$ProtocUri = "https://github.com/protocolbuffers/protobuf/releases/download/v$($env:PROTOC_VER)/protoc-$($env:PROTOC_VER)-win32.zip"
$DownloadPath = "$($env:CARGO_MAKE_WORKING_DIRECTORY)\build\protoc"
$UnpackPath = "$($env:CARGO_MAKE_WORKING_DIRECTORY)\build\protoc\windows"

if (!(Test-Path -Path $UnpackPath)) {
    New-Item -Path $UnpackPath -ItemType "directory" | Out-Null
}

if (!(Test-Path -Path "$($UnpackPath)\bin\protoc.exe")) {
    Write-Host "Downloading $($ProtocUri) to $($DownloadPath)"
    Invoke-WebRequest -OutFile "$($DownloadPath)\protoc-$($env:PROTOC_VER)-win32.zip" -Uri $ProtocUri
    Expand-Archive -LiteralPath "$($DownloadPath)\protoc-$($env:PROTOC_VER)-win32.zip" -DestinationPath $UnpackPath -Force
    Remove-Item "$($DownloadPath)\protoc-$($env:PROTOC_VER)-win32.zip"
}
'''
]

[tasks.protoc-check.mac]
script_runner = "/bin/bash"
script_extension = "sh"
script = [
'''
ProtocUri='https://github.com/protocolbuffers/protobuf/releases/download/v'"$PROTOC_VER"'/protoc-'"$PROTOC_VER"'-osx-x86_32.zip'
DownloadPath="$CARGO_MAKE_WORKING_DIRECTORY"'/build/protoc'
UnpackPath="$CARGO_MAKE_WORKING_DIRECTORY"'/build/protoc/osx'

if [ ! -d $UnpackPath ] 
    then
        mkdir $UnpackPath
fi

if [ ! -f "$UnpackPath"'/bin/protoc' ] 
    then
        curl -L $ProtocUri -o "$DownloadPath"'/protoc-'"$PROTOC_VER"'-osx-x86_32.zip'
        unzip "$DownloadPath"'/protoc-'"$PROTOC_VER"'-osx-x86_32.zip' -d $UnpackPath
        rm "$DownloadPath"'/protoc-'"$PROTOC_VER"'-osx-x86_32.zip'
fi
'''
]

[tasks.protoc-check.linux]
script_runner = "/bin/bash"
script_extension = "sh"
script = [
'''
ProtocUri='https://github.com/protocolbuffers/protobuf/releases/download/v'"$PROTOC_VER"'/protoc-'"$PROTOC_VER"'-linux-x86_32.zip'
DownloadPath="$CARGO_MAKE_WORKING_DIRECTORY"'/build/protoc'
UnpackPath="$CARGO_MAKE_WORKING_DIRECTORY"'/build/protoc/linux'

if [ ! -d $UnpackPath ] 
    then
        mkdir $UnpackPath
fi

if [ ! -f "$UnpackPath"'/bin/protoc' ] 
    then
        curl -L $ProtocUri -o "$DownloadPath"'/protoc-'"$PROTOC_VER"'-linux-x86_32.zip'
        unzip "$DownloadPath"'/protoc-'"$PROTOC_VER"'-linux-x86_32.zip' -d $UnpackPath
        rm "$DownloadPath"'/protoc-'"$PROTOC_VER"'-linux-x86_32.zip'
fi
'''
]

[tasks.gen-move-included-checked]
script_runner = "/bin/bash"
script_extension = "sh"
script = [
    'mv "src/generated/checked" "src/generated/checked.old"',
    'mkdir "src/generated/checked"'
]

[tasks.gen-move-included-checked.windows]
script_runner = "powershell"
script_extension = "ps1"
script = [
    'Rename-Item "src\generated\checked" "checked.old"',
    'New-Item "src\generated\checked" -ItemType "directory" | Out-Null'
]

[tasks.gen-move-included-unchecked]
script_runner = "/bin/bash"
script_extension = "sh"
script = [
    'mv "src/generated/unchecked" "src/generated/unchecked.old"',
    'mkdir "src/generated/unchecked"'
]

[tasks.gen-move-included-unchecked.windows]
script_runner = "powershell"
script_extension = "ps1"
script = [
    'Rename-Item "src\generated\unchecked" "unchecked.old"',
    'New-Item "src\generated\unchecked" -ItemType "directory" | Out-Null'
]

[tasks.gen-move-sample]
script_runner = "/bin/bash"
script_extension = "sh"
script = [
    'mv "examples/gen" "examples/gen.old"',
    'mkdir "examples/gen"'
]

[tasks.gen-move-sample.windows]
script_runner = "powershell"
script_extension = "ps1"
script = [
    'Rename-Item "examples\gen" "gen.old"',
    'New-Item "examples\gen" -ItemType "directory" | Out-Null'
]

[tasks.gen-move-conformance]
script_runner = "/bin/bash"
script_extension = "sh"
script = [
    'mv "src/bin/conformance/gen" "src/bin/conformance/gen.old"',
    'mkdir "src/bin/conformance/gen"'
]

[tasks.gen-move-conformance.windows]
script_runner = "powershell"
script_extension = "ps1"
script = [
    'Rename-Item "src\bin\conformance\gen" "gen.old"',
    'New-Item "src\bin\conformance\gen" -ItemType "directory" | Out-Null'
]

[tasks.gen-move-test-messages]
script_runner = "/bin/bash"
script_extension = "sh"
script = [
    'mv "tests/gen" "tests/gen.old"',
    'mkdir "tests/gen"'
]

[tasks.gen-move-test-messages.windows]
script_runner = "powershell"
script_extension = "ps1"
script = [
    'Rename-Item "tests\gen" "gen.old"',
    'New-Item "tests\gen" -ItemType "directory" | Out-Null'
]

[tasks.pre-gen]
description = "Moves old generated code to .old directories to be reverted or commited later"
dependencies = [
    "gen-move-included-checked",
    "gen-move-included-unchecked",
    "gen-move-sample",
    "gen-move-conformance",
    "gen-move-test-messages"
]

[tasks.gen]
dependencies = [
    "protoc-check",
    "pre-gen"
]
run_task = "gen-flow"

[tasks.gen-flow]
dependencies = [
    "gen-included-checked",
    "gen-included-unchecked",
    "gen-sample",
    "gen-conformance",
    "gen-test-messages"
]

[tasks.gen.windows]
env = { PATH = '${PATH};${CARGO_MAKE_WORKING_DIRECTORY}\build\protoc\windows\bin;${CARGO_MAKE_WORKING_DIRECTORY}\target\debug' }

[tasks.gen.mac]
env = { PATH = '${PATH}:${CARGO_MAKE_WORKING_DIRECTORY}/build/protoc/osx/bin:${CARGO_MAKE_WORKING_DIRECTORY}/target/debug' }

[tasks.gen.linux]
env = { PATH = '${PATH}:${CARGO_MAKE_WORKING_DIRECTORY}/build/protoc/linux/bin:${CARGO_MAKE_WORKING_DIRECTORY}/target/debug' }

[tasks.build-gen]
dependencies = [
    "build",
    "gen"
]

[tasks.gen-revert]
dependencies = [
    "gen-revert-included-checked",
    "gen-revert-included-unchecked",
    "gen-revert-sample",
    "gen-revert-conformance",
    "gen-revert-test-messages"
]

[tasks.gen-revert-included-checked]
script_runner = "/bin/bash"
script_extension = "sh"
script = [
    'rm -rf src/generated/checked',
    'mv src/generated/checked.old src/generated/checked'
]

[tasks.gen-revert-included-checked.windows]
script_runner = "powershell"
script_extension = "ps1"
script = [
    'Remove-Item -Force -Recurse "src\generated\checked"',
    'Rename-Item "src\generated\checked.old" "checked"'
]

[tasks.gen-revert-included-unchecked]
script_runner = "/bin/bash"
script_extension = "sh"
script = [
    'rm -rf "src/generated/unchecked"',
    'mv "src/generated/unchecked.old" "src/generated/unchecked"'
]

[tasks.gen-revert-included-unchecked.windows]
script_runner = "powershell"
script_extension = "ps1"
script = [
    'Remove-Item -Force -Recurse "src\generated\unchecked"',
    'Rename-Item "src\generated\unchecked.old" "unchecked"'
]

[tasks.gen-revert-sample]
script_runner = "/bin/bash"
script_extension = "sh"
script = [
    'rm -rf "examples/gen"',
    'mv "examples/gen.old" "examples/gen"'
]

[tasks.gen-revert-sample.windows]
script_runner = "powershell"
script_extension = "ps1"
script = [
    'Remove-Item -Force -Recurse "examples\gen"',
    'Rename-Item "examples\gen.old" "gen"'
]

[tasks.gen-revert-conformance]
script_runner = "/bin/bash"
script_extension = "sh"
script = [
    'rm -rf "src/bin/conformance/gen"',
    'mv "src/bin/conformance/gen.old" "src/bin/conformance/gen"'
]

[tasks.gen-revert-conformance.windows]
script_runner = "powershell"
script_extension = "ps1"
script = [
    'Remove-Item -Force -Recurse "src\bin\conformance\gen"',
    'Rename-Item "src\bin\conformance\gen.old" "gen"'
]

[tasks.gen-revert-test-messages]
script_runner = "/bin/bash"
script_extension = "sh"
script = [
    'rm -rf "tests/gen"',
    'mv "tests/gen.old" "tests/gen"'
]

[tasks.gen-revert-test-messages.windows]
script_runner = "powershell"
script_extension = "ps1"
script = [
    'Remove-Item -Force -Recurse "tests\gen"',
    'Rename-Item "tests\gen.old" "gen"'
]

[tasks.gen-commit]
dependencies = [
    "gen-commit-included-checked",
    "gen-commit-included-unchecked",
    "gen-commit-sample",
    "gen-commit-conformance",
    "gen-commit-test-messages"
]

[tasks.gen-commit-included-checked]
script_runner = "/bin/bash"
script_extension = "sh"
script = [ 'rm -rf "src/generated/checked.old"' ]

[tasks.gen-commit-included-checked.windows]
script_runner = "powershell"
script_extension = "ps1"
script = [ 'Remove-Item -Recurse -Force "src\generated\checked.old"' ]

[tasks.gen-commit-included-unchecked]
script_runner = "/bin/bash"
script_extension = "sh"
script = [ 'rm -rf "src/generated/unchecked.old"' ]

[tasks.gen-commit-included-unchecked.windows]
script_runner = "powershell"
script_extension = "ps1"
script = [ 'Remove-Item -Recurse -Force "src\generated\unchecked.old"' ]

[tasks.gen-commit-sample]
script_runner = "/bin/bash"
script_extension = "sh"
script = [ 'rm -rf "examples/gen.old"' ]

[tasks.gen-commit-sample.windows]
script_runner = "powershell"
script_extension = "ps1"
script = [ 'Remove-Item -Recurse -Force "examples\gen.old"' ]

[tasks.gen-commit-conformance]
script_runner = "/bin/bash"
script_extension = "sh"
script = [ 'rm -rf "src/bin/conformance/gen.old"' ]

[tasks.gen-commit-conformance.windows]
script_runner = "powershell"
script_extension = "ps1"
script = [ 'Remove-Item -Recurse -Force "src\bin\conformance\gen.old"' ]

[tasks.gen-commit-test-messages]
script_runner = "/bin/bash"
script_extension = "sh"
script = [ 'rm -rf "tests/gen.old"' ]

[tasks.gen-commit-test-messages.windows]
script_runner = "powershell"
script_extension = "ps1"
script = [ 'Remove-Item -Recurse -Force "tests\gen.old"' ]

[tasks.gen-git-add-included-checked]
command = "git"
args = [ "add", "src/generated/checked" ]

[tasks.gen-git-add-included-unchecked]
command = "git"
args = [ "add", "src/generated/unchecked" ]

[tasks.gen-git-add-sample]
command = "git"
args = [ "add", "examples/gen" ]

[tasks.gen-git-add-conformance]
command = "git"
args = [ "add", "src/bin/conformance/gen" ]

[tasks.gen-git-add-test-messages]
command = "git"
args = [ "add", "tests/gen" ]

[tasks.gen-git-add]
dependencies = [
    "gen-git-add-included-checked",
    "gen-git-add-included-unchecked",
    "gen-git-add-sample",
    "gen-git-add-conformance",
    "gen-git-add-test-messages"
]